<!--information of the branch-->
{{#each branchFree}}
    <input type="hidden" value="{{rfc}}" id="rfcCFDI">
    <input type="hidden" value="{{name_branch}}" id="namebranchCFDI">
    <input type="hidden" id="expeditionPlaceCFDI" value="{{postal_code}}">
{{/each}}

<div class="container mt-4">
    <div class="card">
        <div class="card-body">
            <form id="facturaForm">
            <label>🧾 Generar Factura CFDI</label>
            <hr>
            <div class="btn-group">
                <button class="btn-select btn-active" onclick="showSection('select-1', this)" type="button"> Informacion de factura</button>
                <button class="btn-select" onclick="showSection('select-3', this)" type="button"> Informacion del receptor</button>
                <button class="btn-select" onclick="showSection('select-2', this)" type="button"> Recibo de factura</button>
            </div>
            <div id="select-1" class="content-section active">
                <hr>
                {{>tickets/formCFDI}}
            </div>
            <div id="select-3" class="content-section">
                <hr>
                {{>tickets/formAddress}}
            </div>
            <div id="select-2" class="content-section">
                <hr>
                {{>tickets/tableCFDI}}
            </div>

            <button type="submit" class="btn btn-add mt-4">Generar Factura</button>
            </form>
        </div>
    </div>
</div>
{{>loading}}
{{>tickets/popFacture}}

<script>
document.getElementById('facturaForm').addEventListener('submit', async function (e) {
    e.preventDefault();

    // Obtener productos directamente desde la tabla
    const filas = document.querySelectorAll('#tabla-productos tbody tr');
    const current_ticket = [];

    filas.forEach(fila => {
        const name = fila.cells[1].textContent.trim();
        const barcode = fila.cells[2].textContent.trim();
        const quantity = parseFloat(fila.querySelector('.cantidad').textContent) || 0;
        const price = parseFloat(fila.querySelector('.precio').textContent) || 0;
        const itemTotal = quantity * price;

        current_ticket.push({
            name,
            barcode,
            price,
            quantity,
            itemTotal
        });
    });

    // Datos del receptor del formulario
    const rfcReceptor = document.getElementById('rfcReceptor').value.trim();
    const fiscalRegimeReceptor = document.getElementById('regimenFiscal').value.trim();

    const receptor = {
        Rfc: rfcReceptor,
        //----name of the company of the customer
        Name: document.getElementById('nombreReceptor').value.trim(),
        CfdiUse: document.getElementById('usoCfdi').value.trim().toUpperCase(),
        TaxZipCode: document.getElementById('codigoPostal').value.trim(),
        Address: {
            Street: document.getElementById('calleReceptor').value.trim(),
            ExteriorNumber: document.getElementById('numeroExteriorReceptor').value.trim(),
            InteriorNumber: document.getElementById('numeroInteriorReceptor').value.trim(),
            Neighborhood: document.getElementById('coloniaReceptor').value.trim(),
            ZipCode: document.getElementById('codigoPostal').value.trim(),
            Municipality: document.getElementById('municipioReceptor').value.trim(),
            State: document.getElementById('estadoReceptor').value.trim(),
            Country: document.getElementById('paisReceptor').value.trim()
        }
    };

    // Agregar FiscalRegime solo si no es RFC público en general y régimen no vacío
    if (rfcReceptor !== 'XAXX010101000') {
        const regimen = document.getElementById('regimenFiscal').value.trim();
        if (regimen) {
            receptor.FiscalRegime = regimen;
        } else {
            warningMessage("⚠️ El régimen fiscal del receptor no puede estar vacío.");
            return;
        }
    }

    // Armar el array de items con impuestos
    const items = current_ticket.map(item => {
    const subtotal = parseFloat((item.price * item.quantity).toFixed(2));
    const iva = parseFloat((subtotal * 0.16).toFixed(2));
    const total = parseFloat((subtotal + iva).toFixed(2));

    return {
        ProductCode: item.sat_key , ////////////////////-----------------------------------------------32101601
        Description: item.name,
        UnitCode: "H87",
        Quantity: item.quantity,
        UnitPrice: item.price,
        Subtotal: subtotal,
        Total: total,
        TaxObject: "02",
        Taxes: [
            {
                TaxId: "002",
                Total: 16,
                Name: "IVA",
                Base: subtotal,
                Rate: 0.16,
                Amount: iva,
                IsRetention: false
            }
        ]
    };
    });

    // Obtener RFC del emisor desde inputs ocultos
    const rfc = document.getElementById('rfcCFDI')?.value?.trim() || '';
    const name = document.getElementById('namebranchCFDI')?.value?.trim() || '';
    const expeditionPlace = document.getElementById('expeditionPlaceCFDI')?.value?.trim() || '00000';

    const paymentForm = document.getElementById('paymentForm').value;
    const dateObj = new Date();
    const date = dateObj.getFullYear() + "-" +
        String(dateObj.getMonth() + 1).padStart(2, '0') + "-" +
        String(dateObj.getDate()).padStart(2, '0') + " " +
        String(dateObj.getHours()).padStart(2, '0') + ":" +
        String(dateObj.getMinutes()).padStart(2, '0') + ":" +
        String(dateObj.getSeconds()).padStart(2, '0');


    // Armar el payload completo
    const payload = {
        CfdiType: "I",
        PaymentForm: paymentForm, // Efectivo
        PaymentMethod: "PUE", // Pago en una sola exhibición
        ExpeditionPlace: expeditionPlace,
        Date: date, // o usa la fecha de venta si está disponible
        Folio: Math.floor(Math.random() * 10000),
        Issuer: {
            FiscalRegime: "601",
            Rfc: rfc,
            //name of the company in the SAT of the user-------------------------------------------------------------------
            Name:name
        },
        Receiver: receptor,
        Items: items
    };

    // Enviar a tu API
    const loadingOverlay=document.getElementById('loadingOverlay')
    loadingOverlay.style.display = 'flex';
    try {
        const response = await fetch('https://pluspuntodeventa.com/api/factura/factura.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
        });

        const responseText = await response.json();

        if (response.ok && responseText.success) {
            confirmationMessage("✅ ¡Factura creada!", responseText.message);

            const idFactura = responseText.response.Id; // <-- ID de la factura
            mostrarPopupFactura(idFactura); // <-- mostrar el popup y guardar

            console.log("Factura creada con ID:", idFactura);
        } else {

            warningMessage("❌ Error al generar factura", responseText.error || "Algo salió mal.");
            console.error(responseText.error || responseText);
        }

    } catch (error) {
        errorMessage("❌ Error de conexión", error.message);
    }

    loadingOverlay.style.display = 'none';
});
</script>
