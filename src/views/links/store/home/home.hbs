<link rel='stylesheet' href='/css/desktop/uicons-solid-rounded.css'>
<link rel="stylesheet" href="/css/point of sales/cart.css">
<link rel="stylesheet" href="/css/point of sales/messagePop.css">

{{>loading}}

<!--this is for get all the data of the company when the user printer the ticket-->
{{#each dataCompany}}
<input type="hidden" value="{{path_logo}}" id="path-icon-company">
<input type="hidden" value="{{name}}" id="name-company">
<input type="hidden" value="{{email_company}}" id="email_company">
{{/each}}
{{#each branchFree}}
<input type="hidden" value="{{name}}" id="name_branch">
<input type="hidden" value="{{address}}" id="address_branch">
<input type="hidden" value="{{email_branch}}" id="email_company2">
<input type="hidden" value="{{cell_phone}}" id="cell_phone">
<input type="hidden" value="{{phone}}" id="phone">
{{/each}}
<h6 id="employee-name" style="display: none;">{{user.first_name}} {{user.second_name}} {{user.last_name}}</h6>


{{>point-of-sales/recipe}}

<!--this is the container of the point of sale-->
<div class="container-point-of-sales">
    <!-- menu (left) -->
    {{>point-of-sales/addProductFlash}}
    {{>point-of-sales/menu}}

    <!-- shopping cart (right) -->
    {{>point-of-sales/shoppingCart}}
</div>

<!--services-->
{{>point-of-sales/messagePop}}
{{>point-of-sales/messagePopSales}}
{{>point-of-sales/returns}}
{{>point-of-sales/weightScale}}

<!--SHOOPING CART--->
<script src="/js/point of sale/shoppingCart.js" defer></script>
<script src="/js/point of sale/editCantOfProductShoppingCart.js" defer></script>
<script src="/js/point of sale/searchMenu.js" defer></script>




<script>
    //this is for update the input that is selected in the sweet alert of teh car
    function selectInput(input) {
        var inputs = document.querySelectorAll('.input-buy'); //get all the input of the sweet
        inputs.forEach(function (el) {
            el.classList.remove('selected'); //delete the classe <selected>
        });
        input.classList.add('selected'); //add the classe <selected> in the input that the user did click
    }
</script>



<!---this is the information for orden of send--->
<script src="/js/menu.js" defer></script>
<script src="/js/store/search.js" defer></script>
<script src="/js/search.js" defer></script>
<script src="/js/store/cashMovement.js" defer></script>
<script src="/js/store/return.js" defer></script>





<script src="/js/desktop/jquery-3.5.1.slim.min.js" defer></script>
<script src="/js/desktop/popper.min.js" defer></script>
<script src="/js/desktop/bootstrap.min.js" defer></script>
<script src="/js/desktop/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"
    defer></script>
<script src="/js/desktop/bootstrap-nav.bundle.min.js" defer></script>



<script src="/js/point of sale/cashMovement.js" defer></script>
<script src="/js/point of sale/return.js" defer></script>


<!--tickets
<script src="/js/store/JQuery.js"></script>
<script src="/js/store/escops.js"></script>
<script src="/js/store/tickets.js"></script>
{{>point-of-sales/returns}}
--->

<script>
    let ticketScriptsLoaded = false;
</script>

<!----------------------TICKET-------------------->
<!-- Ocultos con los datos de configuración del ticket -->
<input type="hidden" id="show_name_employee" value="{{dataTicket.show_name_employee}}">
<input type="hidden" id="show_name_customer" value="{{dataTicket.show_name_customer}}">
<input type="hidden" id="show_name_company" value="{{dataTicket.show_name_company}}">
<input type="hidden" id="show_address" value="{{dataTicket.show_address}}">
<input type="hidden" id="show_name_branch" value="{{dataTicket.show_name_branch}}">
<input type="hidden" id="show_phone" value="{{dataTicket.show_phone}}">
<input type="hidden" id="show_cellphone" value="{{dataTicket.show_cellphone}}">
<input type="hidden" id="show_email_company" value="{{dataTicket.show_email_company}}">
<input type="hidden" id="show_email_branch" value="{{dataTicket.show_email_branch}}">
<input type="hidden" id="show_logo" value="{{dataTicket.show_logo}}">
<input type="hidden" id="show_date" value="{{dataTicket.show_date}}">
<input type="hidden" id="show_qr" value="{{dataTicket.show_qr}}">
<input type="hidden" id="qr_value" value="{{dataTicket.qr}}">
<input type="hidden" id="ticket_message" value="{{dataTicket.message}}">
<input type="hidden" id="ticketWidth" value="{{dataTicket.size_ticket}}">




<style>
    .editor,
    .preview {
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        max-width: 800px;
        margin: 10px auto;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    h2,
    h3 {
        text-align: center;
    }
    .checkbox-group {
        margin-top: 10px;
    }

    .ticket-preview {
        border: 1px dashed #ccc;
        padding: 10px;
        background: #fff;
        text-align: center;
    }

    .ticket {
        max-width: 300px;
        margin: auto;
        font-size: 16px;
    }

    .logo {
        font-weight: bold;
        margin-bottom: 10px;
    }

    .product-table {
        width: 100%;
        margin: 10px 0;
        border-top: 1px dashed #000;
        border-bottom: 1px dashed #000;
    }

    .product-table th,
    .product-table td {
        padding: 3px;
        text-align: center;
    }

    .qr img {
        margin-top: 10px;
        width: 120px;
        height: 120px;
    }

    .hidden {
        display: none;
    }
</style>
<div class="ticket-preview" id="vistaTicket" >
    <div class="ticket" id="headerTicket">
        <!-- Aquí se genera el ticket headerTicket-->
    </div>
    <div class="qr" id="qrContainer" class="hidden"></div>
    <div class="ticket" id="infoTicket">
        <!-- Aquí se genera el ticket -->
    </div>
</div>

<!-----tickets--->
<script src="/js/printer/JsBarcode.all.min.js" defer></script>
<script src="/js/printer/html2canvas.min.js" defer></script>
<script src="/js/printer/qrious.min.js" defer></script>

<script>
document.addEventListener('DOMContentLoaded', () => {










    const selectPrinter = document.getElementById('dataPrinter');
    let listTicket = [];

    //her we will get the information of the setting of the ticket
    const config = {
        show_logo: document.getElementById('show_logo')?.value == 1,
        show_date: document.getElementById('show_date')?.value == 1,
        show_name_employee: document.getElementById('show_name_employee')?.value == 1,
        show_name_customer: document.getElementById('show_name_customer')?.value == 1,
        show_name_company: document.getElementById('show_name_company')?.value == 1,
        show_name_branch: document.getElementById('show_name_branch')?.value == 1,
        show_address: document.getElementById('show_address')?.value == 1,
        show_phone: document.getElementById('show_phone')?.value == 1,
        show_cellphone: document.getElementById('show_cellphone')?.value == 1,
        show_email_company: document.getElementById('show_email_company')?.value == 1,
        show_email_branch: document.getElementById('show_email_branch')?.value == 1,
        show_qr: document.getElementById('show_qr')?.value == 1,
        qr_value: document.getElementById('qr_value')?.value || '',
        message: document.getElementById('ticket_message')?.value || '¡Gracias por su compra!'
    };


    async function load_printer() {
        const savedPrinter = localStorage.getItem('selectedPrinter');

        try {
            const response = await fetch('http://localhost:5000/impresoras');
            const printers = await response.json();
            if (Array.isArray(printers) && printers.length > 0) {
                // Limpiar opciones previas
                selectPrinter.innerHTML = '<option value="">Selecciona una impresora</option>';

                printers.forEach((printer) => {
                    const option = document.createElement('option');
                    option.value = printer.name;
                    option.textContent = `${printer.name} - ${printer.type.split(',')[0]}`; // Mostrar solo el primer dato del campo "type"
                    if (printer.name === savedPrinter) {
                        option.selected = true;
                    }
                    selectPrinter.appendChild(option);
                });
            } else {
                selectPrinter.innerHTML = '<option value="">No se detectaron impresoras</option>';
            }
        } catch (err) {
            console.error('Error al cargar impresoras:', err);
            selectPrinter.innerHTML = '<option value="">Error de conexión</option>';
        }
    }

    selectPrinter.addEventListener('change', () => {
        const printerSelected = selectPrinter.value;
        localStorage.setItem('selectedPrinter', printerSelected);
    });

    async function print_ticket(total, moneyReceived, change, pointMoney, comment, token) {
        const dateTicket = get_date_ticket()
        const textoTicket = get_texto_ticket(total, moneyReceived, pointMoney, change, comment, dateTicket); // Aquí obtienes el texto del ticket, puedes personalizarlo
        //await sned_information_to_the_server_for_print_the_ticket(textoTicket)


        
        create_ticket_html(total, moneyReceived, change, comment, dateTicket, token); 
        await print_ticket_with_html();
        await sned_information_to_the_server_for_print_the_ticket('');
    }

    async function print_ticket_with_html() {
        const ticket = document.getElementById('vistaTicket');
        const impresora = localStorage.getItem('selectedPrinter');
        const ticketWidth = document.getElementById('ticketWidth').value*3.5; //3.5
        html2canvas(ticket, { scale: 1 }).then(canvas => {
            const imageData = canvas.toDataURL("image/png");
            fetch("http://localhost:5000/imprimir-imagen", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ image: imageData, impresora: impresora, ticketWidth: ticketWidth })
            })
                .then(res => res.json())
                .then(data => {
                    if(data.ok){
                        notificationMessage('✅','Ticket enviado correctamente')
                    }else{
                        notificationMessageError('❌', "Error al imprimir")
                    }
                })
                .catch(err => warningMessage('Error ❌',"Nos perdimos en el camino. No se pudo conectar al servidor de impresión."));
        });
    }

    async function sned_information_to_the_server_for_print_the_ticket(textoTicket, flash = false) {
        const printerName = localStorage.getItem('selectedPrinter'); // ahora guardamos el nombre

        if (!printerName || printerName.trim() === '') {
            if (flash) {
                warningMessage(
                    '¡Ups, impresora fugitiva! 🖨️💨',
                    'Estás intentando imprimir un ticket, pero... ¿y la impresora? 🤔 Selecciona una antes de seguir con la magia.'
                );
            }
            return;
        }

        try {
            const response = await fetch('http://localhost:5000/imprimir', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    texto: textoTicket,
                    impresora: printerName // se usa el nombre como identificador
                })
            });

            const result = await response.json();

            if (result.ok) {
                console.log('✅ Ticket enviado a imprimir correctamente.');
            } else {
                console.error('❌ Error al imprimir ticket:', result.error || result);
                errorMessage('❌ Error al imprimir el ticket:', result.error || 'Error desconocido');
            }
        } catch (err) {
            errorMessage('❌ Error de conexión', 'No se pudo conectar al servidor de impresión.');
            console.error('❌ Error de conexión al servidor de impresión:', err);
        }
    }


    function create_ticket_html(total, moneyReceived, change, comment = '',dateTicket, token) {
        //transform the value of the variable to number
        moneyReceived = parseFloat(moneyReceived);
        change = parseFloat(change);
        total = parseFloat(total);
        moneyReceived = parseFloat(moneyReceived);

        //now we will see would like to the user print in his ticket with help of the config 
        let html = "";

        html += `<div style="text-align:center;">`;
        if (config.show_logo) {
            const icon_company = document.getElementById('path-icon-company')?.value || 'https://pluspuntodeventa.com/img/logo-white-complete.webp';
            html += `<img src="${icon_company}" style="max-width:80px; margin-bottom:5px;"><br>`;
        }

        if (config.show_name_company) {
            const name_company = document.getElementById('name-company').value;
            html += `<strong style="font-size: 24px;">${name_company}</strong><br>`;
        }

        if (config.show_name_branch) {
            const name_branch = document.getElementById('name_branch').value;
            html += `${name_branch}<br>`;
        }

        if (config.show_address) {
            const address = document.getElementById('address_branch').value;
            html += `${address}<br>`;
        }
        html += `</div>`;

        if (config.show_date) {
            html += `<small>${dateTicket}</small><br>`;
        }

        html += `<div style="text-align:left;">`;
        if (config.show_name_employee) {
            const nameEmployee = document.getElementById('employee-name').textContent;
            html += `<small style="font-size: 16px;">Empleado: ${nameEmployee}</small><br>`;
        }

        if (config.show_name_customer) {
            const customer = document.getElementById('emailClient').textContent;
            html += `<small style="font-size: 16px;">Cliente: ${customer}</small><br>`;
        }
        html += `</div>`;


        //----------------------Tabla de productos----------------------------
        html += `
            <table class="product-table" style="width:100%; margin-top:10px; margin-left:10px; margin-right:10px;">
            <thead>
                <tr><th>Producto</th><th>Cant</th><th>Precio</th><th>Total</th></tr>
            </thead>
            <tbody>
        `;

        //---------aqui creamos los productos
        cartItems.forEach(item => {
            const nombre = item.name || '';
            const cantidad = item.quantity || 0;
            const precio = parseFloat(item.price).toFixed(2);
            const subtotal = (item.price * item.quantity).toFixed(2);

            html += `<tr>
                <td>${nombre}</td>
                <td>${cantidad}</td>
                <td>$${precio}</td>
                <td>$${subtotal}</td>
            </tr>`;
        });
        //--------------

        html += `</tbody></table>`;


        html += `<div style="text-align:right;">`;
        html += `<div style="text-align:right; margin-top:10px; margin-right:20px; font-size: 20px;">TOTAL: ${total.toFixed(2).padStart(9)}</div>`;
        html += `<div style="text-align:right; margin-top:10px; margin-right:20px; font-size: 20px;">Recibido: ${moneyReceived.toFixed(2).padStart(9)}</div>`;
        html += `<div style="text-align:right; margin-top:10px; margin-right:20px; font-size: 20px;">Cambio: ${change.toFixed(2).padStart(9)}</div>`;
        html += `</div>`;

        html += `<div style="text-align:center;">`;
        html += `<div style="text-align:center; margin-top:10px;">Comentario: ${comment}</div>`;
        html += `</div>`;

        html += `
            <div style="text-align:center; margin: 15px 0;">
                <div style="font-size: 12px; font-weight: bold;">TOKEN DEL TICKET</div>
                <div style="font-size: 24px;">
                ${token}
                </div>
            </div>
        `;
        html += `<div style="text-align:center; margin-top:10px;">${config.message}</div>`;
        document.getElementById('headerTicket').innerHTML = html;
    }

    function create_qr(){
        //---------------------------her we will show the QR
        const qrContainer = document.getElementById('qrContainer');
        qrContainer.innerHTML = "";

        if (config.show_qr) {
            const qr = new QRious({
                value: config.qr,
                size: 120
            });

            const img = document.createElement('img');
            img.src = qr.toDataURL();
            qrContainer.appendChild(img);
        }
    }
    create_qr();

    function create_info_ticket(){
        //---------------------------pie del ticket
        let htmlLast = "<br>";
        if (config.show_email_company) {
            const email_company=document.getElementById('email_company').value;
            htmlLast += `<small>${email_company}</small><br>`;
        }

        if (config.show_email_branch) {
            const email_company=document.getElementById('email_branch').value;
            htmlLast += `<small>${email_branch}</small><br>`;
        }

        if (config.show_phone) {
            const phone=document.getElementById('phone').value;
            htmlLast += `Tel: ${phone}<br>`;
        }

        if (config.show_cellphone) {
            const cell_phone=document.getElementById('cell_phone').value;
            htmlLast += `Cel: ${cell_phone}<br>`;
        }
        document.getElementById('infoTicket').innerHTML = htmlLast;
    }
    create_info_ticket();

    function get_texto_ticket(total, moneyReceived, pointMoney, change, comment = '', dateTicket) {
        moneyReceived = parseFloat(moneyReceived);
        change = parseFloat(change);
        total = parseFloat(total);
        moneyReceived = parseFloat(moneyReceived);
        const nameBranch = document.getElementById('name-company').value;
        const nameEmployee = document.getElementById('employee-name').textContent;
        const customer = document.getElementById('emailClient').textContent;
 
        let texto = '';
        texto += '\n\n';
        texto += '-------------------------------\n';
        texto += `      *** ${nameBranch} ***\n`;
        texto += `      ${dateTicket}      \n`;
        texto += `Cliente: ${customer}\n`;
        texto += `Atentido por: ${nameEmployee}\n`;
        texto += '\n\n\n\n';
        texto += '-------------------------------\n';
        texto += 'Producto      Cant    Total\n';
        texto += '-------------------------------\n';
        /*
        `Producto: ${item.name}, Precio: ${item.price}, barcode: ${item.barcode}   ${item.quantity}  ${item.purchaseUnit} ${item.discount} ${itemTotal.toFixed(2)}\n`
        */
        cartItems.forEach(item => {
            const itemTotal = (item.price) * item.quantity;

            const nombre = (item.name.length > 14 ? item.name.slice(0, 14) : item.name).padEnd(14);
            const cantidad = item.quantity.toString().padEnd(5);
            const totalStr = itemTotal.toFixed(2).padStart(7);

            texto += `${nombre}${cantidad}${totalStr}\n`;
        });


        texto += '-------------------------------\n';
        texto += `TOTAL:             ${total.toFixed(2).padStart(9)}\n`;
        texto += `Recibido:          ${moneyReceived.toFixed(2).padStart(9)}\n`;
        texto += `${document.getElementById('into-points-user').textContent}\n`;
        texto += `Cambio:            ${change.toFixed(2).padStart(9)}\n`;

        if (comment && comment.trim() !== '') {
            texto += '-------------------------------\n';
            texto += `Comentario:\n${comment}\n`;
        }
        texto += '\n\n\n';
        // 🎯 TOKEN LLAMATIVO
        const token = generarTokenUnicoTicket();
        texto += '-------------------------------\n';
        texto += '       TOKEN DEL TICKET \n';
        texto += `           ${token}\n`;
        texto += '-------------------------------\n';
        texto += '     ¡Gracias por su compra!\n';
        texto += '\n\n\n';


        save_ticket_to_cookies(texto, dateTicket);
        return texto;
    }

    function generarTokenUnicoTicket() {
        const array = new Uint8Array(8); // 8 bytes = 16 hex chars
        crypto.getRandomValues(array);
        return Array.from(array, b => b.toString(16).padStart(2, '0')).join('').toUpperCase();
    }

    function get_date_ticket() {
        const ahora = new Date();

        const dia = String(ahora.getDate()).padStart(2, '0');
        const mes = String(ahora.getMonth() + 1).padStart(2, '0'); // Mes inicia en 0
        const año = ahora.getFullYear();

        const horas = String(ahora.getHours()).padStart(2, '0');
        const minutos = String(ahora.getMinutes()).padStart(2, '0');

        return `${dia}/${mes}/${año} ${horas}:${minutos}`;
    }

    function save_ticket_to_cookies(texto, fecha) {
        const cookieName = 'ticketHistory';

        // Leer cookies existentes
        const cookies = document.cookie.split('; ').find(row => row.startsWith(cookieName + '='));

        if (cookies) {
            try {
                listTicket = JSON.parse(decodeURIComponent(cookies.split('=')[1]));
            } catch (e) {
                listTicket = []
            }
        }

        // Agregar nuevo ticket al inicio
        listTicket.unshift({ texto, fecha });

        // Limitar a 10 tickets
        if (listTicket.length > 10) {
            listTicket = listTicket.slice(0, 10);
        }

        // Guardar en cookies (expiran en 30 días)
        const cookieValue = encodeURIComponent(JSON.stringify(listTicket));
        document.cookie = `${cookieName}=${cookieValue}; path=/; max-age=${60 * 60 * 24 * 30}`;
    }

    function load_tickets_from_cookies() {
        const cookieName = 'ticketHistory';
        const cookies = document.cookie.split('; ').find(row => row.startsWith(cookieName + '='));

        if (cookies) {
            try {
                listTicket = JSON.parse(decodeURIComponent(cookies.split('=')[1]));
            } catch (e) {
                listTicket = [];
            }
        } else {
            listTicket = [];
        }
    }


    //load the cookies
    load_tickets_from_cookies();
    load_printer();








    //her we will do all the variable global
    window.config = config;
    window.selectPrinter = selectPrinter;
    window.listTicket = listTicket;

    window.load_printer = load_printer;
    window.print_ticket = print_ticket;
    window.print_ticket_with_html = print_ticket_with_html;
    window.get_texto_ticket = get_texto_ticket;
    window.create_ticket_html = create_ticket_html;
    window.generarTokenUnicoTicket = generarTokenUnicoTicket;
    window.load_tickets_from_cookies = load_tickets_from_cookies;
});
</script>