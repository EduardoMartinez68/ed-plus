<style>
    .card {
        border: 1px solid #ccc;
        border-radius: 4px;
        background-color: #fff;
    }

    label {
        font-weight: 600;
        margin-bottom: 4px;
    }

    input[readonly],
    input[disabled] {
        background-color: #e9ecef;
        cursor: not-allowed;
    }

    .form-section {
        margin-bottom: 15px;
    }

    #selectDatePersonality .btn {
        width: 100%;
    }

    .modal-header {
        font-weight: bold;
        font-size: 16px;
        margin-bottom: 10px;
    }

    .modal-footer {
        margin-top: 10px;
    }

    .input-date {
        background-color: white !important;
        border: none;
        outline: none;
        box-shadow: none;
        color: #212529;
        /* texto oscuro (puedes cambiarlo) */
        padding: 0;
        font-size: 1rem;
        pointer-events: none;
        /* evita que el usuario intente interactuar */
    }
</style>
<style>
    table.simple-table {
        width: 100%;
        border-collapse: collapse;
        font-family: Arial, sans-serif;
        font-size: 14px;
        background-color: #fff;
        color: #333;
    }

    .simple-table th,
    .simple-table td {
        border-bottom: 1px solid #ddd;
        text-align: left;
        padding: 8px 10px;
    }

    .simple-table th {
        background-color: #f2f2f2;
        font-weight: bold;
    }

    .summary {
        margin-top: 15px;
        font-family: Arial, sans-serif;
        color: #333;
    }

    .summary h6 {
        font-size: 14px;
        margin: 0;
        font-weight: normal;
    }

    .summary h4 {
        font-size: 18px;
        margin: 4px 0 0 0;
        font-weight: bold;
    }
</style>

<input type="hidden" value="{{token}}" id="token-for-facturama">

<div class="container mt-4">
    <div class="card p-3">
        <label for="">🧾 Genera una factura Global</label>

        <div class="row">
            <div class="col">
                <label for="">Timbres: </label><b id="number-timbres-user">0</b>
            </div>
        </div>
        <label onclick="update_information_timbres()" style="cursor: pointer;">Recargar</label>


        <hr>
        <div class="row">
            <div class="col">
                <div class="form-group form-section">
                    <info-label label="Selecciona los Documentos a Facturar *"
                        message="Solo se incluirán los tickets que aún no han sido facturados.">
                    </info-label>
                    <select id="dataTypeFactureGlobal" class="form-select">
                        <option value="1">Facturar las ventas de todos los clientes</option>
                        <!---
                        <option value="2">Facturar las ventas solo del publico en general</option>
                        -->
                    </select>
                </div>
            </div>
            <div class="col">
                <div class="form-group form-section">
                    <info-label label="Selecciona el periodo de tiempo de los tickets que deseas facturar. *"
                        message="Solo se incluirán los tickets generados dentro de este rango de fechas.">
                    </info-label>
                    <select id="dateRangeSelect" class="form-select">
                        <option value="1">Hoy</option>
                        <option value="2">Últimos 7 días</option>
                        <option value="3">Mes actual</option>
                        <option value="4">Mes anterior</option>
                        <option value="5">Personalizado</option>
                    </select>
                </div>
            </div>
        </div>
        <hr>
        <div class="form-group">
            <label for="">Desde </label><input type="date" id="dateFrom" readonly disabled class="input-date"><label
                for="">Hasta </label><input type="date" id="dateTo" readonly disabled class="input-date">
            <br>
            <label for="">Meses a Facturar: </label><label for="" id="Months"></label>
        </div>
        <div id="settingFacture" class="my-pop">
            <div class="my-pop-content-wrapper">
                <div class="my-pop-header">
                    <h4 class="my-pop-title">Ajuste de Facturación</h4>
                    <button class="close-btn" onclick="close_my_pop('settingFacture')" type="button">×</button>
                </div>
                <div class="my-pop-content">
                    {{>cfdi/settingFactureCFDIGlobalInfo}}
                </div>
            </div>
        </div>
        <div class="btn-div" onclick="open_my_pop('settingFacture')">
            <div class="btn-div-content">
                <label><i class="fi fi-ss-file-invoice-dollar"></i> Datos de la Factura</label>
                <p>Mis Datos personales de facturación</p>
            </div>
            <i class="fi fi-rr-angle-right"></i>
        </div>



        <div id="settingFactureTicket" class="my-pop">
            <div class="my-pop-content-wrapper">
                <div class="my-pop-header">
                    <h4 class="my-pop-title">Ajuste de Facturación</h4>
                    <button class="close-btn" onclick="close_my_pop('settingFactureTicket')" type="button">×</button>
                </div>
                <div class="my-pop-content">
                    {{>cfdi/settingFactureCFDIGlobal}}
                </div>
            </div>
        </div>
        <!---
        <div class="btn-div" onclick="open_my_pop('settingFactureTicket')">
            <div class="btn-div-content">
                <label><i class="fi-icon fi-rr-settings-sliders"></i> Filtra los documentos a facturar</label>
                <p>Todos</p>
            </div>
            <i class="fi fi-rr-angle-right"></i>
        </div>
        --->
        <br><br><br><br><br><br><br>
        <div class="row">
            <div class="col">
                <div class="form-group form-section">
                    <info-label label="Periodicidad *"
                        message="Campo requerido para registrar el período al que corresponde la información del comprobante global">
                    </info-label>
                    <select id="Periodicity" class="form-select">
                        <option value="01">01 - Diario</option>
                        <option value="02">02 - Semanal</option>
                        <option value="03">03 - Quincenal</option>
                        <option value="04">04 - Mensual</option>
                        <option value="05">05 - Bimestral</option>
                    </select>
                </div>
            </div>
            <div class="col">
                <div class="form-group form-section">
                    <info-label label="Año de la factura *"
                        message="Se debe registrar el año al que corresponde la información del comprobante global">
                    </info-label>
                    <input type="number" id="Year" class="form-control" min="1900" max="2100" placeholder="Ej: 2025">
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col">
                <div class="form-group form-section">
                    <info-label label="Forma de Pago *"
                        message="Clave de la forma de pago con la que se liquidó el comprobante de operaciones con el público en general de mayor monto de entre los contenidos en el CFDI global">
                    </info-label>
                    <select name="formaPago" class="form-select" required id="PaymentForm">
                        <option value="01">01 - Efectivo</option>
                        <option value="02">02 - Cheque nominativo</option>
                        <option value="03">03 - Transferencia electrónica de fondos</option>
                        <option value="04">04 - Tarjeta de crédito</option>
                        <option value="05">05 - Monedero electrónico</option>
                        <option value="06">06 - Dinero electrónico</option>
                        <option value="08">08 - Vales de despensa</option>
                        <option value="12">12 - Dación en pago</option>
                        <option value="13">13 - Pago por subrogación</option>
                        <option value="14">14 - Pago por consignación</option>
                        <option value="15">15 - Condonación</option>
                        <option value="17">17 - Compensación</option>
                        <option value="23">23 - Novación</option>
                        <option value="24">24 - Confusión</option>
                        <option value="25">25 - Remisión de deuda</option>
                        <option value="26">26 - Prescripción o caducidad</option>
                        <option value="27">27 - A satisfacción del acreedor</option>
                        <option value="28">28 - Tarjeta de débito</option>
                        <option value="29">29 - Tarjeta de servicios</option>
                        <option value="30">30 - Aplicación de anticipos</option>
                        <option value="99">99 - Por definir</option>
                    </select>
                </div>
            </div>
        </div>

        <button class="btn btn-add" onclick="create_data_facture()">Crear Factura Global</button>
    </div>

</div>

<!-- Modal personalizado -->
<div id="selectDatePersonality" class="my-pop">
    <div class="my-pop-content-wrapper">
        <div class="my-pop-header">
            <h4 class="my-pop-title">Seleccionar Rango Personalizado</h4>
            <button class="close-btn" onclick="close_my_pop('selectDatePersonality')" type="button">×</button>
        </div>
        <div class="my-pop-content">
            <div class="form-group">
                <label for="customStart">Fecha inicial</label>
                <input type="date" id="customStart" class="form-control">
            </div>
            <div class="form-group">
                <label for="customEnd">Fecha final</label>
                <input type="date" id="customEnd" class="form-control">
            </div>
            <div class="modal-footer">
                <button class="btn btn-success" id="applyCustomRange">Aceptar</button>
            </div>
            <br><br>
        </div>
    </div>
</div>
<br><br><br>


<div id="viewPreviuCFDI" class="my-pop">
    <div class="my-pop-content-wrapper">
        <div class="my-pop-header">
            <h4 class="my-pop-title">Vista previa del CFDI</h4>
            <button class="close-btn" onclick="close_my_pop('viewPreviuCFDI')" type="button">×</button>
        </div>
        <div class="my-pop-content">
            <div id="cfdi-preview"></div>
            <br>
            <button onclick="create_facture_global()" class="btn btn-add">Generar Factura</button>
            <br>
        </div>
    </div>
</div>


{{>loading}}
{{>tickets/popFacture}}

<script>
    function get_credetial_user() {
        const payload = {
            token: document.getElementById('token-for-facturama').value,
            user_email: localStorage.getItem('user_email'),
            password: localStorage.getItem('user_password')
        };
        return payload;
    }

    async function update_information_timbres() {
        const payload = get_credetial_user();
        let result;
        try {
            const response = await fetch('https://pluspuntodeventa.com/api/factura/get_timbres.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            const text = await response.text(); // para depurar si la respuesta no es JSON
            try {
                result = JSON.parse(text);
            } catch {
                throw new Error('Respuesta no es JSON. Body: ' + text.slice(0, 300));
            }
        } catch (error) {
            console.error('Error al enviar los datos al servidor:', error);
        }

        document.getElementById('number-timbres-user').textContent = result.timbres || 0;
    }


</script>
<script>
    document.getElementById('Year').value = new Date().getFullYear();

    //her update the data of the month
    const now = new Date();
    const currentMonth = String(now.getMonth() + 1).padStart(2, '0'); // getMonth() es de 0 a 11
    document.getElementById('Months').textContent = currentMonth;


    const dateRangeSelect = document.getElementById("dateRangeSelect");
    const dateFrom = document.getElementById("dateFrom");
    const dateTo = document.getElementById("dateTo");
    const customModal = document.getElementById("customRangeModal");
    const applyCustomBtn = document.getElementById("applyCustomRange");

    dateRangeSelect.addEventListener("change", function () {
        const today = new Date();
        let startDate, endDate;

        switch (this.value) {
            case "1": // Hoy
                startDate = endDate = today;
                update_date_today();
                break;
            case "2": // Últimos 7 días
                endDate = today;
                startDate = new Date();
                startDate.setDate(endDate.getDate() - 6);
                break;
            case "3": // Mes actual
                startDate = new Date(today.getFullYear(), today.getMonth(), 1);
                endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                break;
            case "4": // Mes anterior
                startDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);
                endDate = new Date(today.getFullYear(), today.getMonth(), 0);
                break;
            case "5": // Personalizado
                //customModal.style.display = "block";
                open_my_pop('selectDatePersonality');
                return;
        }
        update_data_month(startDate, endDate)

        if (this.value !== "5") {
            const format = (d) => d.toISOString().split('T')[0];
            dateFrom.value = format(startDate);
            dateTo.value = format(endDate);
            //customModal.style.display = "none";
            close_my_pop('selectDatePersonality');
        }
    });

    function update_data_month(startDate, endDate) {
        const months = [];
        const start = new Date(startDate);
        const end = new Date(endDate);

        // Normalizar al primer día del mes
        start.setDate(1);
        end.setDate(1);

        // Recorrer cada mes entre startDate y endDate
        while (start <= end) {
            const month = String(start.getMonth() + 1).padStart(2, '0');
            if (!months.includes(month)) months.push(month);
            start.setMonth(start.getMonth() + 1);
        }

        // Unir los meses por coma si hay más de uno
        document.getElementById('Months').textContent = months.join(',');
    }

    function update_date_today() {
        const today = new Date();
        const formattedDate = today.toISOString().split('T')[0]; // Formato YYYY-MM-DD

        document.getElementById('dateFrom').value = formattedDate;
        document.getElementById('dateTo').value = formattedDate;
    }
    update_date_today();

    applyCustomBtn.addEventListener("click", () => {
        const start = document.getElementById("customStart").value;
        const end = document.getElementById("customEnd").value;

        if (!start || !end) {
            alert("Por favor selecciona ambas fechas.");
            return;
        }

        if (start > end) {
            alert("La fecha inicial no puede ser mayor que la final.");
            return;
        }

        dateFrom.value = start;
        dateTo.value = end;
        //customModal.style.display = "none";
        close_my_pop('selectDatePersonality');

        const dateStart = new Date(start);
        dateStart.setMonth(dateStart.getMonth() + 1);
        //const nextMonth = dateStart.toISOString().split("T")[0];


        update_data_month(dateStart, end)
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const Periodicity = document.getElementById("Periodicity");
        const fiscalInput = document.getElementById("FiscalRegime");

        if (!Periodicity || !fiscalInput) {
            console.warn("No se encontraron los elementos necesarios");
            return;
        }

        const originalFiscalValue = fiscalInput.value;

        // Asignar valor inicial si ya está en 05
        if (Periodicity.value === "05") {
            fiscalInput.value = "621";
        }

        Periodicity.addEventListener("change", function () {
            if (Periodicity.value === "05") {
                fiscalInput.value = "621";
            } else {
                fiscalInput.value = originalFiscalValue;
            }
        });
    });
</script>
<script>
    let pathLogoRFCFacture = 'https://pluspuntodeventa.com/img/logo-white-complete.webp';
    let dataForTheServer = null;
    async function create_data_facture() {
        /*
        {	    
            "Items": [{        
                "ProductCode": "25173108",
                "Description": "GPS estandar pruebas",
                "UnitCode": "E48",
                "Quantity": 1.0,
                "UnitPrice": 100.0,
                "Subtotal": 100.00,
                "TaxObject" : "02",
                "Taxes": [{
                    "Total": 16,
                    "Name": "IVA",
                    "Base": 100,
                    "Rate": 0.16,
                    "IsRetention": false
                }],
                "Total": 116
            }]	
        }
        */
        const allTheItems = await get_all_the_tickets();
        const Items = allTheItems.products;
        const dataCFDI = {
            CfdiType: 'I',
            PaymentForm: document.getElementById('PaymentForm').value,
            PaymentMethod: "PUE",
            ExpeditionPlace: document.getElementById('ExpeditionPlace').value,
            Date: create_date_folio(),
            Folio: create_folio(),
            Issuer: {
                FiscalRegime: document.getElementById('fiscalRegimeUsuario').value, 
                Rfc: document.getElementById('RFC').value,
                Name: document.getElementById('nameCompanyCFDI').value
            },
            GlobalInformation: get_global_information(),
            Receiver: get_data_receiver(),
            Items: Items
        }
        
        
        //const dataUser = get_credetial_user()

        dataForTheServer = {
            token: document.getElementById('token-for-facturama').value,
            user_email: localStorage.getItem('user_email'),
            password: localStorage.getItem('user_password'),
            cfdi: dataCFDI
        };

        dataForTheServer.cfdi = cleanTaxes(dataForTheServer.cfdi);
        console.log(JSON.stringify(dataForTheServer, null, 2));
        renderCfdiPreview(dataCFDI)
        open_my_pop('viewPreviuCFDI')

        //console.log(JSON.stringify(dataForTheServer, null, 2));
    }

    function escapeHtml(s) {
        return String(s ?? '')
            .replace(/&/g, "&amp;").replace(/</g, "&lt;")
            .replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
    // Agrega comas de miles sin alterar decimales
    function formatNumberWithCommas(n) {
        if (n === null || n === undefined || n === '' || isNaN(n)) return '0';
        const [intPart, decPart] = String(n).split('.');
        const intFmt = intPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        return decPart ? `${intFmt}.${decPart}` : intFmt;
    }

    function formatMoney(n) {
        return '$' + formatNumberWithCommas(
            // aseguramos máximo 2 decimales *visuales* sin redondear en exceso
            (Math.floor(Number(n) * 100) / 100).toFixed(2)
        );
    }

    function toIsoLike(dateStr) {
        // Convierte "YYYY-MM-DD HH:mm:ss" a "YYYY-MM-DDTHH:mm:ss"
        return String(dateStr).replace(' ', 'T');
    }


    function create_folio() {
        return Math.floor(Math.random() * 10000)
    }

    function create_date_folio() {
        const now = new Date();

        const formattedDate = now.getFullYear() + '-' +
            String(now.getMonth() + 1).padStart(2, '0') + '-' +
            String(now.getDate()).padStart(2, '0') + ' ' +
            String(now.getHours()).padStart(2, '0') + ':' +
            String(now.getMinutes()).padStart(2, '0') + ':' +
            String(now.getSeconds()).padStart(2, '0');

        return formattedDate;
    }

    function get_global_information() {
        return {
            Periodicity: document.getElementById('Periodicity').value,
            Months: document.getElementById('Months').textContent,
            Year: document.getElementById('Year').value,
        }
    }

    function get_data_receiver() {
        return {
            Rfc: "XAXX010101000",
            CfdiUse: "S01",
            Name: "PUBLICO EN GENERAL",
            FiscalRegime: document.getElementById('FiscalRegime').value,
            TaxZipCode: document.getElementById('ExpeditionPlace').value
        }
    }

    async function get_all_the_tickets() {
        const range_date = get_range_date()
        const answer = await send_data_to_server('/links/get_data_of_tickets_for_date', range_date);
        if (answer.success) {
            return answer.data;
        } else {
            return null;
        }
    }

    function get_range_date() {
        const date_start = document.getElementById('dateFrom').value;
        const date_finish = document.getElementById('dateTo').value;
        return {
            date_start,
            date_finish
        }
    }


    function renderCfdiPreview(cfdi, containerId = 'cfdi-preview') {
        const el = document.getElementById(containerId);
        if (!el) {
            console.error('[renderCfdiPreview] No existe #' + containerId);
            return;
        }

        // Desestructuración segura con soporte para factura global
        const {
            CfdiType, PaymentForm, PaymentMethod, ExpeditionPlace,
            LogoUrl, Date, Folio, Issuer = {}, Receiver = {}, Items = {},
            GlobalInformation = {}
        } = cfdi || {};



        // Para factura global, los productos están dentro de Items.products
        const products = Items;// Array.isArray(Items.products) ? Items.products : [];

        // Calcular totales (subtotal, total, impuestos) con productos
        let subtotalGlobal = 0;
        let totalGlobal = 0;
        products.forEach(it => {
            subtotalGlobal += Number(it.Subtotal || 0);
            totalGlobal += Number(it.Total || 0);
        });
        // Si totalGlobal viene en GlobalInformation, puedes usarlo en lugar de totalGlobal calculado
        if (cfdi.Items.totalGlobal) {
            totalGlobal = Number(cfdi.Items.totalGlobal);
        }
        const impuestosGlobales = (totalGlobal - subtotalGlobal).toFixed(2);

        // Renderizar filas de productos
        const htmlItems = products.map(it => {
            const taxesText = Array.isArray(it.Taxes) && it.Taxes.length
                ? it.Taxes.map(t => {
                    const rate = (t.rate ?? t.Rate ?? 0);
                    const rateShow = (rate > 1 ? rate : rate * 100);
                    return `${escapeHtml(t.name ?? 'Impuesto')} ${formatNumberWithCommas(rateShow)}%`;
                }).join(', ')
                : '—';

            return `
      <tr>
        <td>${escapeHtml(it.ProductCode)}</td>
        <td>${escapeHtml(it.Description)}</td>
        <td>${escapeHtml(it.UnitCode ?? '')}</td>
        <td class="text-right">${formatNumberWithCommas(it.Quantity ?? 0)}</td>
        <td class="text-right">${formatMoney(it.UnitPrice ?? 0)}</td>
        <td class="text-right">${formatMoney(it.Subtotal ?? 0)}</td>
        <td>${escapeHtml(taxesText)}</td>
        <td class="text-right">${formatMoney(it.Total ?? 0)}</td>
      </tr>
    `;
        }).join('');

        // Mostrar información de GlobalInformation (periodicidad, meses, año) en una sección aparte
        const htmlGlobalInfo = `
    <div class="cfdi-sec">
      <h3>Información Global</h3>
      <table class="cfdi-table">
        <tr>
          <td><strong>Periodicidad:</strong> ${escapeHtml(GlobalInformation.Periodicity ?? '')}</td>
          <td><strong>Meses:</strong> ${escapeHtml(GlobalInformation.Months ?? '')}</td>
          <td><strong>Año:</strong> ${escapeHtml(GlobalInformation.Year ?? '')}</td>
        </tr>
      </table>
    </div>
  `;

        const html = `
    <style>
      /* Tu CSS igual que antes, o extrae y pon fuera para reutilizar */
      .cfdi-card{background:#fff;border:1px solid #ccc;box-shadow:0 0 15px rgba(0,0,0,.05);padding:24px;max-width:960px;margin:auto;position:relative}
      .cfdi-head{display:flex;justify-content:space-between;align-items:center;margin-bottom:16px}
      .cfdi-head .logo img{max-height:64px}
      .cfdi-title{color:#0669D0;font-size:22px;font-weight:700}
      .cfdi-sub{color:#888;font-size:13px}
      .cfdi-water{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;pointer-events:none;z-index:0}
      .cfdi-water span{transform:rotate(-25deg);font-size:100px;color:rgba(6,105,208,.10);font-weight:800;white-space:nowrap}
      .cfdi-body{position:relative;z-index:1}
      .cfdi-sec h3{color:#0669D0;margin:16px 0 6px 0;font-size:18px}
      .cfdi-table{width:100%;border-collapse:collapse;margin-bottom:12px;font-size:14px}
      .cfdi-table th{background:#0669D0;color:#fff;text-align:left;padding:8px}
      .cfdi-table td{border:1px solid #ccc;padding:8px}
      .text-right{text-align:right}
      .totals td{border:none;text-align:right;padding:4px 0;font-size:15px}
      .nota {
        font-size: 12px;
        color: #666;
        margin-top: 30px;
        text-align: center;
      }
    </style>

    <div class="cfdi-card">
      <div class="cfdi-water"><span>Prueba</span></div>
      <div class="cfdi-body">
        <div class="cfdi-head">
          <div class="logo">
            ${pathLogoRFCFacture ? `<img src="${escapeHtml(pathLogoRFCFacture)}" alt="Logo">` : ''}
          </div>
          <div class="t">
            <div class="cfdi-title">Factura CFDI 4.0</div>
            <div class="cfdi-sub">Vista previa sin timbrar</div>
          </div>
        </div>

        <div class="cfdi-sec">
          <h3>Información fiscal</h3>
          <table class="cfdi-table">
            <tr>
              <td><strong>Folio:</strong> ${escapeHtml(Folio ?? '')}</td>
              <td><strong>Fecha de emisión:</strong> ${escapeHtml(toIsoLike(Date ?? ''))}</td>
            </tr>
            <tr>
              <td><strong>Tipo de comprobante:</strong> ${escapeHtml(CfdiType ?? '')}</td>
              <td><strong>Lugar de expedición (CP):</strong> ${escapeHtml(ExpeditionPlace ?? '')}</td>
            </tr>
            <tr>
              <td><strong>Forma de pago:</strong> ${escapeHtml(PaymentForm ?? '')}</td>
              <td><strong>Método de pago:</strong> ${escapeHtml(PaymentMethod ?? '')}</td>
            </tr>
          </table>
        </div>

        <div class="cfdi-sec">
          <h3>Emisor</h3>
          <table class="cfdi-table">
            <tr>
              <td><strong>RFC:</strong> ${escapeHtml(Issuer.Rfc ?? '')}</td>
              <td><strong>Nombre o Razón Social:</strong> ${escapeHtml(Issuer.Name ?? '')}</td>
            </tr>
            <tr>
              <td><strong>Régimen Fiscal:</strong> ${escapeHtml(Issuer.FiscalRegime ?? '')}</td>
              <td></td>
            </tr>
          </table>
        </div>

        <div class="cfdi-sec">
          <h3>Receptor</h3>
          <table class="cfdi-table">
            <tr>
              <td><strong>RFC:</strong> ${escapeHtml(Receiver.Rfc ?? '')}</td>
              <td><strong>Nombre:</strong> ${escapeHtml(Receiver.Name ?? '')}</td>
            </tr>
            <tr>
              <td><strong>Uso del CFDI:</strong> ${escapeHtml(Receiver.CfdiUse ?? '')}</td>
              <td><strong>Régimen Fiscal:</strong> ${escapeHtml(Receiver.FiscalRegime ?? '')}</td>
            </tr>
            <tr>
              <td><strong>Código Postal:</strong> ${escapeHtml(Receiver.TaxZipCode ?? '')}</td>
              <td></td>
            </tr>
          </table>
        </div>

        ${htmlGlobalInfo}

        <div class="cfdi-sec">
          <h3>Conceptos</h3>
          <table class="cfdi-table">
            <thead>
              <tr>
                <th>Clave SAT</th>
                <th>Descripción</th>
                <th>Unidad</th>
                <th>Cantidad</th>
                <th>Precio Unitario</th>
                <th>Subtotal</th>
                <th>Impuestos</th>
                <th>Total</th>
              </tr>
            </thead>
            <tbody>
              ${htmlItems || `<tr><td colspan="8" class="text-right">Sin conceptos</td></tr>`}
            </tbody>
          </table>
        </div>

        <div class="cfdi-sec">
          <h3>Totales</h3>
          <table class="totals" style="width:100%">
            <tr>
              <td><strong>Subtotal:</strong></td>
              <td>${formatMoney(subtotalGlobal)}</td>
            </tr>
            <tr>
              <td><strong>Impuestos:</strong></td>
              <td>${formatMoney(impuestosGlobales)}</td>
            </tr>
            <tr>
              <td><strong>Total:</strong></td>
              <td><strong>${formatMoney(totalGlobal)}</strong></td>
            </tr>
          </table>
        </div>

        <div class="qr-sello">
          <div class="qr">
            <img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=UUID:123e4567-e89b-12d3-a456-426614174000" alt="QR CFDI">
          </div>
        </div>
        <br>
        <div class="nota">
          Esta es una vista previa de la factura CFDI 4.0 generada con fines informativos. <br>
          No tiene validez fiscal hasta que sea debidamente timbrada por el PAC autorizado ante el SAT.
        </div>
      </div>
    </div>
  `;

        el.innerHTML = html;
    }


    function credentials_exist() {
        const token = document.getElementById('token-for-facturama')?.value || '';
        const email = localStorage.getItem('user_email') || '';
        const password = localStorage.getItem('user_password') || '';

        return token.trim() !== '' && email.trim() !== '' && password.trim() !== '';
    }

    function cleanTaxes(cfdi) {
        if (!cfdi.Items) return cfdi;

        cfdi.Items = cfdi.Items.map(item => {
            if (!item.Taxes) return item;

            const isRetention = false;

            item.Taxes = item.Taxes.map(tax => {
                const base = Number(item.Subtotal || 0);
                const rate = Number(tax.rate || 0) / 100; // 0.16 si viene 16
                const total = parseFloat((base * rate).toFixed(2));

                return {
                    Total: total,
                    Name: tax.name,
                    Base: base,
                    Rate: rate,
                    IsRetention: isRetention
                };
            });

            return item;
        });

        return cfdi;
    }

    async function create_facture_global() {
        if (!await questionMessage('🤔 ¿Deseas generar esta factura?', 'Una vez creada, solo podrás cancelarla pero no modificarla. ¡Asegúrate de que todo esté correcto!')) {
            return;
        }

        if (!credentials_exist()) {
            errorMessage('⚠️ ERROR', 'No tienes una cuenta PLUS asignada');
            return;
        }

        const loadingOverlay = document.getElementById('loadingOverlay');
        if (loadingOverlay) loadingOverlay.style.display = 'flex';

        //her clear the taxes for not have retentions
        //dataForTheServer.dataCFDI = cleanTaxes(dataForTheServer.dataCFDI);

        try {
            const resp = await fetch('https://pluspuntodeventa.com/api/factura/factura-global.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(dataForTheServer)
            });

            const raw = await resp.text();            // SIEMPRE texto primero
            let data;
            try {
                data = JSON.parse(raw);                 // intenta JSON
            } catch (e) {
                console.error('Respuesta no es JSON. RAW:', raw);
                throw new Error('Respuesta no es JSON');
            }

            if (resp.ok && data?.success) {
                //close_all_the_pop();
                close_my_pop('viewPreviuCFDI');
                confirmationMessage("✅ ¡Factura creada!", data.message);

                const idFactura = data?.response?.Id;
                //if we can create the facture, now we will change the status of the ticket to 
                await update_ticket_and_save_the_id_of_the_facture(idFactura); //this is for save the ticket like facture

                //show the data of the facture
                if (idFactura) mostrarPopupFactura(idFactura);
                dataForTheServer = null;
            } else {
                const msg = data?.message || data?.error || 'Algo salió mal.';
                warningMessage("❌ Error al generar factura", msg);
                console.error('Respuesta API:', data);
            }
        } catch (err) {
            console.error('Error de conexión o parseo:', err);
            errorMessage("❌ Error de conexión", err.message || String(err));
        } finally {
            if (loadingOverlay) loadingOverlay.style.display = 'none';
        }
    }


    async function update_ticket_and_save_the_id_of_the_facture(idFacture) {
        //get the range of date that the user would like facturar
        const range_date = get_range_date()
        const answer = await send_data_to_server('/links/update_all_the_tickets_in_a_range_of_time_for_create_facture', {idFacture, range_date});
    }
</script>