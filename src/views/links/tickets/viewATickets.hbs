<!--information of the branch-->
{{#each branchFree}}
<input type="hidden" value="{{rfc}}" id="rfcCFDI">
<input type="hidden" value="{{name_branch}}" id="namebranchCFDI">
<input type="hidden" id="expeditionPlaceCFDI" value="{{postal_code}}">
{{/each}}


<style>
    .btn-div {
        width: 100%;
        background-color: #ffffff;
        border: 1px solid #ccc;
        padding: 10px 12px;
        box-sizing: border-box;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
        margin-bottom: 8px;
    }

    .btn-div-content {
        display: flex;
        flex-direction: column;
    }

    .btn-div label {
        font-weight: bold;
        margin-bottom: 8px;
        color: #333;
    }

    .btn-div p {
        margin: 0;
        color: #666;
        font-size: 13px;
    }

    .btn-div i {
        font-size: 20px;
        color: #999;
        margin-top: 13px;
    }
</style>

<div class="container mt-4">
    <div class="card">
        <div class="card-body">
            {{#each infoCustomer}}
                <input type="hidden" value="{{id}}" id="id_customer">
            {{/each}}

            <form id="formCreateFactureCFDI">
                <label>üßæ Generar Factura CFDI</label>
                <hr>



                {{>tickets/formCFDI}}
                <br>
                <div id="informationSales" class="my-pop">   
                    <div class="my-pop-content-wrapper">
                        <div class="my-pop-header">
                            <h4 class="my-pop-title">Datos de la Venta</h4>
                            <button class="close-btn" onclick="close_my_pop('informationSales')" type="button">√ó</button>
                        </div> 
                        <div class="my-pop-content">
                            {{>tickets/informationSales}}
                        </div>
                    </div>
                </div>
                <div class="btn-div" onclick="open_my_pop('informationSales')">
                    <div class="btn-div-content">
                        <label>Datos de la Venta</label>
                        <p>Total de Venta: ${{dataTicketOld.total}}</p>
                    </div>
                    <i class="fi fi-rr-angle-right"></i>
                </div>






                <div id="informationAddress" class="my-pop">  
                    <div class="my-pop-content-wrapper">
                        <div class="my-pop-header">
                            <h4 class="my-pop-title">Datos de Facturaci√≥n</h4>
                            <button class="close-btn" onclick="close_my_pop('informationAddress')" type="button">√ó</button>
                        </div>  
                        <div class="my-pop-content">
                            {{>tickets/formAddress}}
                        </div>
                    </div>
                </div>
                <div class="btn-div" onclick="open_my_pop('informationAddress')">
                    <div class="btn-div-content">
                        <label>Datos de Facturaci√≥n</label>
                        <p>XAXX010101000</p>
                    </div>
                    <i class="fi fi-rr-angle-right"></i>
                </div>

                <br><br><br><br><br><br><br><br>
                <div class="row mt-3">
                    <div class="col">
                        {{>tickets/useCFDI}}
                    </div>
                    <div class="col">
                        {{>tickets/metpay}}
                    </div>
                </div>

                <button type="button" class="btn btn-add mt-4" onclick="create_my_facture_cfdi()" id="btn-create-facture">Generar Factura</button>
            </form>
        </div>
    </div>
</div>







{{>loading}}
{{>tickets/popFacture}}
{{>updateSelects}}


<script>

    async function create_my_facture_cfdi(){
        const codigoPostal = document.getElementById('codigoPostal').value;
        if (codigoPostal == '') {
            warningMessage(
                'C√≥digo postal requerido',
                'Por favor, ingresa el c√≥digo postal del cliente en la pesta√±a "Informaci√≥n del receptor".'
            );
            return;
        }
        
        const nombreReceptor = document.getElementById('nombreReceptor').value;

        if (nombreReceptor == '') {
            warningMessage(
                'Nombre o Raz√≥n Social requerido',
                'Por favor, completa el campo "Nombre o Raz√≥n Social" en la pesta√±a "Informaci√≥n de factura".'
            );
            return;
        }

        //after we will question to the user if he would like make this facture 
        if (!await questionMessage('¬øDeseas generar la factura?', 'Una vez emitida, la factura no se puede modificar ni eliminar solo cancelar. ¬øEst√°s seguro de continuar?')) {
            return;
        }

        // Obtener productos directamente desde la tabla
        const filas = document.querySelectorAll('.tabla-productos-sales tbody tr');
        const current_ticket = [];

        filas.forEach(fila => {
            const sat_key = fila.cells[0].textContent.trim();
            const name = fila.cells[1].textContent.trim();
            const barcode = fila.cells[2].textContent.trim();
            const quantity = parseFloat(fila.querySelector('.cantidad').textContent) || 0;
            const priceWithoutTaxes = parseFloat(fila.querySelector('.priceWithoutTaxes').textContent) || 0;
            const price = parseFloat(fila.querySelector('.precio').textContent) || 0;
            const itemTotal = quantity * price;

            current_ticket.push({
                sat_key,
                name,
                barcode,
                priceWithoutTaxes,
                price,
                quantity,
                itemTotal
            });
        });

        // Datos del receptor del formulario
        const rfcReceptor = document.getElementById('rfcReceptor').value.trim();
        const fiscalRegimeReceptor = document.getElementById('regimenFiscalUser').value.trim();



        //this is when the receptor is public general
        const receptor = {
            Rfc: rfcReceptor,
            //----name of the company of the customer
            Name: document.getElementById('nombreReceptor').value.trim(),
            CfdiUse: document.getElementById('usoCfdi').value.trim().toUpperCase(),
            TaxZipCode: document.getElementById('codigoPostal').value.trim(),
        };

        //her we will see if the customer have the information of his address beacuse facturama not acept data null in this data
        const calle = document.getElementById('calleReceptor').value.trim();
        const exterior = document.getElementById('numeroExteriorReceptor').value.trim();
        const interior = document.getElementById('numeroInteriorReceptor').value.trim();
        const colonia = document.getElementById('coloniaReceptor').value.trim();
        const municipio = document.getElementById('municipioReceptor').value.trim();
        const estado = document.getElementById('estadoReceptor').value.trim();
        const pais = document.getElementById('paisReceptor').value.trim();
        const cp = document.getElementById('codigoPostal').value.trim();

        //if the user have data of his address, we will save in the facture
        if (calle && exterior && colonia && municipio && estado && pais) {
            receptor.Address = {
                Street: calle,
                ExteriorNumber: exterior,
                InteriorNumber: interior, // this can be null
                Neighborhood: colonia,
                ZipCode: cp,
                Municipality: municipio,
                State: estado,
                Country: pais
            };
        }



        //Add FiscalRegime only if it is not a general public RFC and a non-empty regime
        
            //get the regimen of the receptor not of the company
            const regimen = document.getElementById('regimenFiscalReceptor').value.trim();
            if (regimen) {
                receptor.FiscalRegime = regimen;
            } else {
                warningMessage("‚ö†Ô∏è El r√©gimen fiscal del receptor no puede estar vac√≠o.");
                return;
            }
        

        // Armar el array de items con impuestos
        const items = current_ticket.map(item => {
            const subtotal = parseFloat((item.priceWithoutTaxes * item.quantity).toFixed(2));
            const total = item.price * item.quantity;

            return {
                ProductCode: item.sat_key, ////////////////////-----------------------------------------------32101601
                Description: item.name,
                UnitCode: "H87", //--indica unidad de medida H87=pieza KGM=kilogramo LTR=litro
                Quantity: item.quantity,
                UnitPrice: item.priceWithoutTaxes,
                Subtotal: subtotal,
                Total: total,
                TaxObject: "02",

                //her we will get the taxes of the product
                Taxes: get_taxes_for_product(item.barcode, subtotal)
            };
        });

        function get_taxes_for_product(barcode, base) {
            console.log(barcode)
            const tableBody = document.getElementById(`table-tax-${barcode}`);
            const taxes = [];

            if (!tableBody) {
                console.warn(`‚ùå No se encontr√≥ la tabla de impuestos para el producto con c√≥digo: ${barcode}`);
                return taxes;
            }

            const rows = tableBody.querySelectorAll('tr');

            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                if (cells.length < 4) return;

                const name = cells[0].textContent.trim();
                const taxId = cells[1].textContent.trim();
                const rate = parseFloat(cells[2].textContent.trim()) || 0;
                const isRetention = cells[3].textContent.trim().toLowerCase() === 's√≠' || cells[3].textContent.trim() === '1';

                const taxAmount = parseFloat((base * (rate / 100)).toFixed(2));

                taxes.push({
                    TaxId: taxId,
                    Total: taxAmount,
                    Name: name,
                    Base: base,
                    Rate: rate / 100, // convertir a decimal
                    Amount: taxAmount,
                    IsRetention: isRetention
                });
            });

            return taxes;
        }

        //get the RFC of the emisor, the emisor is the user 
        const rfc = document.getElementById('rfcCFDI')?.value?.trim() || '';
        const name = document.getElementById('namebranchCFDI')?.value?.trim() || '';
        const expeditionPlace = document.getElementById('expeditionPlaceCFDI')?.value?.trim() || '00000';

        const paymentForm = document.getElementById('paymentForm').value;
        const dateObj = new Date();
        const date = dateObj.getFullYear() + "-" +
            String(dateObj.getMonth() + 1).padStart(2, '0') + "-" +
            String(dateObj.getDate()).padStart(2, '0') + " " +
            String(dateObj.getHours()).padStart(2, '0') + ":" +
            String(dateObj.getMinutes()).padStart(2, '0') + ":" +
            String(dateObj.getSeconds()).padStart(2, '0');


        // Armar el payload completo
        const payload = {
            //information of the CFDI
            CfdiType: document.getElementById('cfdiType').value,
            PaymentForm: paymentForm, // Efectivo
            PaymentMethod: document.getElementById('paymentMethod').value, // Pago en una sola exhibici√≥n
            ExpeditionPlace: expeditionPlace,
            Date: date, // o usa la fecha de venta si est√° disponible
            Folio: Math.floor(Math.random() * 10000),

            //this is the information of the user. The owner of the company
            Issuer: {
                FiscalRegime: document.getElementById('regimenFiscalUser').value,
                Rfc: rfc,
                //name of the company in the SAT of the user-------------------------------------------------------------------
                Name: name
            },



            //information of the container of the CFDI
            Receiver: receptor,
            Items: items
        };
        

        //now we will see if the user would like do a facture to public, if the user would like create a facture to the public,
        //we will that save the information of facture global in the data that send to the API of facturama
        if (rfcReceptor === 'XAXX010101000') {

            //get the information that the user have save in his data of facture to public
            const periodicidad = document.getElementById('periodicidad').value;
            const meses = document.getElementById('meses').value;
            const anio = document.getElementById('anio').value.trim();

            //if not have this data, we will show a message of error
            if (!periodicidad || !meses || !anio) {
                warningMessage('Datos globales incompletos', 'Por favor, completa periodicidad, meses y a√±o para facturaci√≥n global. Esta en el apartado de "Datos de Facturaci√≥n" y "Publico en General" ');
                return;
            }

            payload.GlobalInformation = {
                Periodicity: periodicidad,
                Months: meses,
                Year: anio
            };
        }

        // Enviar a tu API
        const loadingOverlay = document.getElementById('loadingOverlay')
        loadingOverlay.style.display = 'flex';
        console.log(JSON.stringify(payload))
        try {
            const response = await fetch('https://pluspuntodeventa.com/api/factura/factura.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });

            const responseText = await response.json();

            if (response.ok && responseText.success) {
                confirmationMessage("‚úÖ ¬°Factura creada!", responseText.message);

                const idFactura = responseText.response.Id; // <-- ID de la factura
                mostrarPopupFactura(idFactura); // <-- mostrar el popup y guardar

                console.log("Factura creada con ID:", idFactura);
            } else {

                warningMessage("‚ùå Error al generar factura", responseText.error || "Algo sali√≥ mal.");
                console.error(responseText.error || responseText);
            }
        } catch (error) {
            errorMessage("‚ùå Error de conexi√≥n", error.message);
        }
        loadingOverlay.style.display = 'none';













    };
</script>

