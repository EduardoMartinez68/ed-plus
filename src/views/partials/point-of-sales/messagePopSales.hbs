<style>
    /*
    body {
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f4f4f4;
    }
    */

    .popup-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5); /* Fondo negro con opacidad */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 999; /* Asegura que esté sobre otros elementos */
        visibility: hidden;
        opacity: 0;
        transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
    }

    .popup-overlay.active {
        visibility: visible;
        opacity: 1;
    }

    .popup {
        width: 80%;
        height: auto;
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        display: flex;
        justify-content: space-between;

        /* Centrando en la pantalla */
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 100;
    }

    .left-panel,
    .right-panel {
        width: 48%;
    }

    .buttons-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 10px;
    }

    .button-pop-sales {
        padding: 15px;
        font-size: 18px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: 0.3s;
    }

    .num-btn,
    .quick-amount-btn {
        background: #ddd;
    }

    .num-btn:hover,
    .quick-amount-btn:hover {
        background: #bbb;
    }

    .delete-btn {
        background: #ff4d4d;
        color: white;
    }

    .delete-btn:hover {
        background: #cc0000;
    }

    .pay-btn {
        width: 100%;
        background: #00A245;
        color: white;
        padding: 15px;
        font-size: 20px;
    }

    .pay-btn:hover {
        background: #018339;
    }

    .input-container {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .input-pop-sales {
        padding: 10px;
        font-size: 18px;
        text-align: right;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .selected {
        border: 2px solid #007bff;
    }

    .total-text {
        font-size: 14px;
        color: #666;
        margin-top: 5px;
    }

    .change {
        font-size: 20px;
        font-weight: bold;
        margin-top: 10px;
    }

    .positive {
        color: green;
    }

    .negative {
        color: red;
    }

    @media (max-width: 768px) {
        .popup {
            width: 95%;
            padding: 15px;
        }

        .buttons-container {
            grid-template-columns: repeat(3, 1fr);
            gap: 8px;
        }

        .pay-btn {
            font-size: 18px;
            padding: 12px;
        }

        .input-pop-sales {
            font-size: 16px;
        }

        .change {
            font-size: 18px;
        }

        .total-text {
            font-size: 12px;
        }
    }

    @media (max-width: 480px) {
        .popup {
            width: 100%;
            padding: 10px;
        }

        .right-panel {
            width: 100%;
        }

        .left-panel {
            width: 0%;
        }

        .buttons-container {
            grid-template-columns: repeat(3, 1fr);
            gap: 5px;
        }

        .button-pop-sales {
            font-size: 16px;
            padding: 12px;
        }

        .pay-btn {
            font-size: 16px;
            padding: 10px;
        }

        .input-container {
            flex-direction: column;
        }

        .input-pop-sales {
            font-size: 14px;
        }

        .total-text {
            font-size: 12px;
        }

        /* Ocultar botones numéricos (0-9) en pantallas pequeñas */
        .num-btn,
        .delete-btn,
        .quick-amount-btn {
            display: none;
        }
    }


    /*-------------------------------------------*/
/* Fondo del popup */
.pop-points-user-popup {
  display: none;
  position: fixed;
  z-index: 999;
  left: 0; top: 0;
  width: 100%; height: 100%;
  background-color: rgba(0,0,0,0.5);
  font-family: Arial, sans-serif;
}

/* Contenido del popup */
.pop-points-user-popup-content {
  background: #fff;
  border-radius: 10px;
  width: 45%;
  max-width: 90%;
  margin: 10% auto;
  overflow: hidden;
  box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}

/* Header azul */
.pop-points-user-popup-header {
  background-color: var(--color-company);
  color: white;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 15px;
}
.pop-points-user-popup-header h3 {
  margin: 0;
  font-size: 18px;
  color: white;
}
.pop-points-user-close {
  font-size: 22px;
  cursor: pointer;
  color: white;
}

/* Cuerpo */
.pop-points-user-popup-body {
  padding: 20px;
}
.pop-points-user-info p {
  margin: 6px 0;
  font-size: 14px;
}

/* Calculadora */
.pop-points-user-calculator {
  display: flex;
  justify-content: space-between;
  margin: 15px 0;
  gap: 10px;
}
.pop-points-user-calculator-group {
  flex: 1;
  display: flex;
  flex-direction: column;
}
.pop-points-user-calculator-group input {
  padding: 6px;
  font-size: 14px;
  margin-top: 4px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

/* Botón Usar */
.pop-points-user-btn-use {
  width: 100%;
  padding: 10px;
  background-color: var(--color-company);
  border: none;
  color: white;
  font-size: 16px;
  border-radius: 6px;
  cursor: pointer;
}
.pop-points-user-btn-use:hover {
  background-color: var(--color-hover);
}
</style>
<div class="popup-overlay" id="popupOverlay">
    <div class="popup" id="popup">
        <button class="button-pop-sales close-btn" onclick="closePopSales()">&times;</button>
        <div class="left-panel">
            <div class="buttons-container">
                <button class="button-pop-sales quick-amount-btn" onclick="setAmount(20)">$20</button>
                <button class="button-pop-sales quick-amount-btn" onclick="setAmount(100)">$100</button>
                <button class="button-pop-sales quick-amount-btn" onclick="setAmount(200)">$200</button>
            </div>
            <br>
            <div class="buttons-container">
                <button class="button-pop-sales  num-btn" onclick="addNumber(1)">1</button>
                <button class="button-pop-sales  num-btn" onclick="addNumber(2)">2</button>
                <button class="button-pop-sales num-btn" onclick="addNumber(3)">3</button>
                <button class="button-pop-sales num-btn" onclick="addNumber(4)">4</button>
                <button class="button-pop-sales num-btn" onclick="addNumber(5)">5</button>
                <button class="button-pop-sales num-btn" onclick="addNumber(6)">6</button>
                <button class="button-pop-sales num-btn" onclick="addNumber(7)">7</button>
                <button class="button-pop-sales num-btn" onclick="addNumber(8)">8</button>
                <button class="button-pop-sales num-btn" onclick="addNumber(9)">9</button>
                <button class="button-pop-sales delete-btn" onclick="deleteNumber()">⌫</button>
                <button class="button-pop-sales num-btn" onclick="addNumber(0)">0</button>
                <button class="button-pop-sales num-btn" onclick="addNumber('.')">.</button>
            </div>
        </div>
        <div class="right-panel">
            <h2>Total: $<span id="total">35000</span></h2>
            <p class="total-text" id="total-text">number</p>
            <div class="input-container">
                <label for="">Efectivo</label>
                <input type="number" id="cash" placeholder="Efectivo" onfocus="setSelected(this)" oninput="calculateChange()"
                    class="input-pop-sales">
                <label for="">Tarjeta de Crédito</label>
                <input type="number" id="credit" placeholder="Tarjeta de Crédito" onfocus="setSelected(this)"
                    oninput="calculateChange()" class="input-pop-sales">
                <label for="">Tarjeta de Débito</label>
                <input type="number" id="debit" placeholder="Tarjeta de Débito" onfocus="setSelected(this)"
                    oninput="calculateChange()" class="input-pop-sales">

                <label for="">Puntos del Cliente</label>
                <div class="input-group mb-3">
                    <input type="number" class="form-control"  id="points" placeholder="Puntos del cliente"  aria-label="Recipient's username" aria-describedby="basic-addon2" oninput="calculateChange()" readonly value="0">               
                    <div class="input-group-append">
                        <button class="btn btn-outline-secondary" type="button" onclick="popPointsUser_openPopup()">Usar Puntos</button>
                    </div>
                </div>

                <div class="form-group">
                    <label for="exampleFormControlTextarea1">Comentario</label>
                    <textarea class="form-control" id="comment-sales" rows="3"></textarea>
                </div>
            </div>
            <p class="change" id="change">Cambio: $0.00</p>
            <button class="button-pop-sales pay-btn" onclick="buy_my_car()">Cobrar</button>
        </div>
    </div>
</div>




<div class="pop-points-user-popup" id="popPointsUser_popup">
  <div class="pop-points-user-popup-content">
    <!-- Header azul -->
    <div class="pop-points-user-popup-header">
      <h3>Usar puntos del usuario</h3>
      <span class="pop-points-user-close" onclick="popPointsUser_closePopup()">&times;</span>
    </div>

    <!-- Cuerpo del popup -->
    <div class="pop-points-user-popup-body">
      <div class="pop-points-user-info">
        <p><strong>Nombre:</strong> <span id="popPointsUser_name">Juan Pérez</span></p>
        <p><strong>Puntos actuales:</strong> <span id="popPointsUser_points">400</span></p>
        <p><em>1$ = 200 puntos</em></p>
      </div>

      <!-- Calculadora -->
      <div class="pop-points-user-calculator">
        <div class="pop-points-user-calculator-group">
          <label for="popPointsUser_pointsInput">Puntos que quiero usar:</label>
          <input type="number" id="popPointsUser_pointsInput" min="0" step="1" value="0">
        </div>
        <div class="pop-points-user-calculator-group">
          <label for="popPointsUser_moneyInput">Dinero que quiero usar ($):</label>
          <input type="number" id="popPointsUser_moneyInput" min="0" step="0.01" value="0">
        </div>
      </div>

      <button class="pop-points-user-btn-use" onclick="popPointsUser_usePoints()">Usar</button>
    </div>
  </div>
</div>









<script>
    let selectedInput = null;
    let finalTotal=0;

    function openPopSales() {
        //we will see if exist a product in the shopping cart
        if(cartItems.length > 0){
            //forever that the user open the UI, the default input is the cash
            setSelected(document.getElementById('cash'));

            //get the total of the shopping cart
            const totalText = document.getElementById('cart-total').textContent.trim(); // Elimina espacios extra
            const total = parseFloat(totalText.replace(/[^0-9.]/g, '')); // Elimina caracteres no numéricos
            const formattedTotal = total.toFixed(2); // String con 2 decimales
            finalTotal = parseFloat(formattedTotal); // Número final

            //update the data of the shopping cart
            document.getElementById('total').textContent=finalTotal;
            calculateChange();
            updateTotalText();

            //when the data was updated, we will show the pop
            document.getElementById('popupOverlay').classList.add('active');
        }else{
            //if not exist a product in the shopping car, we will show a message of error
            errorMessage('Ups 👉👈', 'No existe ningun producto en el carrito');
        }
    }

    function closePopSales() {
        //restart the inputs
        if (selectedInput) {
            selectedInput.classList.remove('selected');
        }
        document.getElementById('cash').value='';
        document.getElementById('debit').value='';
        document.getElementById('credit').value='';
        selectedInput=null;

        //close the pop
        finalTotal=0;
        document.getElementById('popupOverlay').classList.remove('active');
    }

    function setSelected(input) {
        if (selectedInput) {
            selectedInput.classList.remove('selected');
        }
        selectedInput = input;
        selectedInput.classList.add('selected');
    }

    function addNumber(num) {
        if (selectedInput) {
            selectedInput.value += num;
            calculateChange();
        }
    }

    function deleteNumber() {
        if (selectedInput) {
            selectedInput.value = selectedInput.value.slice(0, -1);
            calculateChange();
        }
    }

    function setAmount(amount) {
        if (selectedInput) {
            selectedInput.value = amount;
            calculateChange();
        }
    }

    function calculateChange(){
        const total=finalTotal;
        let cash = parseFloat(document.getElementById('cash').value) || 0;
        let credit = parseFloat(document.getElementById('credit').value) || 0;
        let debit = parseFloat(document.getElementById('debit').value) || 0;
        let paid = cash + credit + debit;
        let change = paid - total;
        let changeText = document.getElementById('change');
        changeText.textContent = `Cambio: $${change.toFixed(2)}`;
        changeText.className = 'change ' + (change >= 0 ? 'positive' : 'negative');
    }

    function numberToWords(number) {
        const ones = [
            '', 'uno', 'dos', 'tres', 'cuatro', 'cinco', 'seis', 'siete', 'ocho', 'nueve',
            'diez', 'once', 'doce', 'trece', 'catorce', 'quince', 'dieciséis', 'diecisiete',
            'dieciocho', 'diecinueve'
        ];

        const tens = [
            '', '', 'veinte', 'treinta', 'cuarenta', 'cincuenta', 'sesenta', 'setenta',
            'ochenta', 'noventa'
        ];
        const hundreds = [
            '', 'cien', 'doscientos', 'trescientos', 'cuatrocientos', 'quinientos', 'seiscientos',
            'setecientos', 'ochocientos', 'novecientos'
        ];
        const thousands = [
            '', 'mil', 'dos mil', 'tres mil', 'cuatro mil', 'cinco mil', 'seis mil', 'siete mil',
            'ocho mil', 'nueve mil'
        ];
        const millions = [
            '', 'un millón', 'dos millones', 'tres millones', 'cuatro millones', 'cinco millones',
            'seis millones', 'siete millones', 'ocho millones', 'nueve millones'
        ];

        let numberU = parseInt(number);

        if (numberU === 0) return 'cero';

        let result = '';

        // Convertir el número en millones
        if (numberU >= 1000000) {
            let millionPart = Math.floor(numberU / 1000000);
            result += millions[millionPart] + ' ';
            numberU %= 1000000;
        }

        // Convertir el número en miles
        if (numberU >= 1000) {
            let thousandPart = Math.floor(numberU / 1000);
            result += thousands[thousandPart] + ' ';
            numberU %= 1000;
        }

        // Convertir centenas
        if (numberU >= 100) {
            result += hundreds[Math.floor(numberU / 100)] + ' ';
            numberU %= 100;
        }

        // Convertir decenas y unidades
        if (numberU >= 20) {
            result += tens[Math.floor(numberU / 10)] + ' ';
            numberU %= 10;
            if (numberU > 0) result += 'y ' + ones[numberU];
        } else if (numberU > 0) {
            result += ones[numberU];
        }

        // Leer los decimales (puntos)
        if (number % 1 !== 0) {
            result += ' punto';
            let decimalPart = (number % 1).toFixed(2).split('.')[1]; // Obtener la parte decimal como cadena
            for (let i = 0; i < decimalPart.length; i++) {
                result += ' ' + ones[parseInt(decimalPart.charAt(i))];
            }
        }

        return result.charAt(0).toUpperCase() + result.slice(1).trim(); // Capitaliza la primera letra y elimina espacios innecesarios
    }

    function updateTotalText() {
        const total=finalTotal;
        const totalText = numberToWords(total);
        document.getElementById('total-text').innerText = totalText;
    }
</script>
<script>
const POINTS_RATE = 200; // 1$ = 200 puntos

function popPointsUser_openPopup() {
  document.getElementById('popPointsUser_popup').style.display = 'block';
}

function popPointsUser_closePopup() {
  document.getElementById('popPointsUser_popup').style.display = 'none';
}

// Sincronización de la calculadora
const pointsInput = document.getElementById('popPointsUser_pointsInput');
const moneyInput = document.getElementById('popPointsUser_moneyInput');

pointsInput.addEventListener('input', () => {
  const points = parseFloat(pointsInput.value) || 0;
  moneyInput.value = (points / POINTS_RATE).toFixed(2);
});

moneyInput.addEventListener('input', () => {
  const money = parseFloat(moneyInput.value) || 0;
  pointsInput.value = Math.round(money * POINTS_RATE);
});

function popPointsUser_usePoints() {
  const points = parseFloat(pointsInput.value) || 0;
  const money = parseFloat(moneyInput.value) || 0;

  console.log(`Se usarán ${points} puntos equivalentes a $${money}`);

  // Aquí puedes hacer fetch al backend para registrar el uso de puntos
  popPointsUser_closePopup();
}
</script>