<link rel='stylesheet' href='/css/desktop/uicons-solid-rounded.css'>
<link rel="stylesheet" href="/css/point of sales/cart.css">
<link rel="stylesheet" href="/css/point of sales/messagePop.css">

{{>loading}}

<!--this is for get all the data of the company when the user printer the ticket-->
{{#each dataCompany}}
<input type="hidden" value="{{path_logo}}" id="path-icon-company">
<input type="hidden" value="{{name}}" id="name-company">
{{/each}}
<h6 id="employee-name" style="display: none;">{{user.first_name}} {{user.second_name}} {{user.last_name}}</h6>


{{>point-of-sales/recipe}}

<!--this is the container of the point of sale-->
<div class="container-point-of-sales">
    <!-- menu (left) -->
    {{>point-of-sales/addProductFlash}}
    {{>point-of-sales/menu}}

    <!-- shopping cart (right) -->
    {{>point-of-sales/shoppingCart}}
</div>

<!--services-->
{{>point-of-sales/messagePop}}
{{>point-of-sales/messagePopSales}}
{{>point-of-sales/returns}}
{{>point-of-sales/weightScale}}

<!--SHOOPING CART--->
<script src="/js/point of sale/shoppingCart.js" defer></script>
<script src="/js/point of sale/editCantOfProductShoppingCart.js" defer></script>
<script src="/js/point of sale/searchMenu.js" defer></script>




<script>
    //this is for update the input that is selected in the sweet alert of teh car
    function selectInput(input) {
        var inputs = document.querySelectorAll('.input-buy'); //get all the input of the sweet
        inputs.forEach(function (el) {
            el.classList.remove('selected'); //delete the classe <selected>
        });
        input.classList.add('selected'); //add the classe <selected> in the input that the user did click
    }
</script>



<!---this is the information for orden of send--->
<script src="/js/menu.js" defer></script>
<script src="/js/store/search.js" defer></script>
<script src="/js/search.js" defer></script>
<script src="/js/store/cashMovement.js" defer></script>
<script src="/js/store/return.js" defer></script>





<script src="/js/desktop/jquery-3.5.1.slim.min.js" defer></script>
<script src="/js/desktop/popper.min.js" defer></script>
<script src="/js/desktop/bootstrap.min.js" defer></script>
<script src="/js/desktop/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous" defer></script>
<script src="/js/desktop/bootstrap-nav.bundle.min.js" defer></script>



<script src="/js/point of sale/cashMovement.js" defer></script>
<script src="/js/point of sale/return.js" defer></script>


<!--tickets
<script src="/js/store/JQuery.js"></script>
<script src="/js/store/escops.js"></script>
<script src="/js/store/tickets.js"></script>
{{>point-of-sales/returns}}
--->

<script>
    let ticketScriptsLoaded = false;
</script>

<script>
    const selectPrinter = document.getElementById('dataPrinter');
    let listTicket = [];

    async function load_printer() {
        const savedPrinter = localStorage.getItem('selectedPrinter');

        try {
            const response = await fetch('http://localhost:5000/impresoras');
            const printers = await response.json();
            console.log(printers)
            if (Array.isArray(printers) && printers.length > 0) {
                // Limpiar opciones previas
                selectPrinter.innerHTML = '<option value="">Selecciona una impresora</option>';

                printers.forEach((printer) => {
                    const option = document.createElement('option');
                    option.value = printer.name;
                    option.textContent = `${printer.name} - ${printer.type.split(',')[0]}`; // Mostrar solo el primer dato del campo "type"
                    if (printer.name === savedPrinter) {
                        option.selected = true;
                    }
                    selectPrinter.appendChild(option);
                });
            } else {
                selectPrinter.innerHTML = '<option value="">No se detectaron impresoras</option>';
            }
        } catch (err) {
            console.error('Error al cargar impresoras:', err);
            selectPrinter.innerHTML = '<option value="">Error de conexi√≥n</option>';
        }
    }

    selectPrinter.addEventListener('change', () => {
        const printerSelected = selectPrinter.value;
        localStorage.setItem('selectedPrinter', printerSelected);
    });

    async function print_ticket(total, moneyReceived, change, comment) {
        //console.log(get_texto_ticket(total, moneyReceived, change, comment));
        const textoTicket = get_texto_ticket(total, moneyReceived, change, comment); // Aqu√≠ obtienes el texto del ticket, puedes personalizarlo
        await sned_information_to_the_server_for_print_the_ticket(textoTicket)
    }


    async function sned_information_to_the_server_for_print_the_ticket(textoTicket, flash = false) {
        const printerName = localStorage.getItem('selectedPrinter'); // ahora guardamos el nombre

        if (!printerName || printerName.trim() === '') {
            if (flash) {
                warningMessage(
                    '¬°Ups, impresora fugitiva! üñ®Ô∏èüí®',
                    'Est√°s intentando imprimir un ticket, pero... ¬øy la impresora? ü§î Selecciona una antes de seguir con la magia.'
                );
            }
            return;
        }

        try {
            const response = await fetch('http://localhost:5000/imprimir', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    texto: textoTicket,
                    impresora: printerName // se usa el nombre como identificador
                })
            });

            const result = await response.json();

            if (result.ok) {
                console.log('‚úÖ Ticket enviado a imprimir correctamente.');
            } else {
                console.error('‚ùå Error al imprimir ticket:', result.error || result);
                errorMessage('‚ùå Error al imprimir el ticket:', result.error || 'Error desconocido');
            }
        } catch (err) {
            errorMessage('‚ùå Error de conexi√≥n', 'No se pudo conectar al servidor de impresi√≥n.');
            console.error('‚ùå Error de conexi√≥n al servidor de impresi√≥n:', err);
        }
    }

    function get_texto_ticket(total, moneyReceived, change, comment = '') {
        moneyReceived = parseFloat(moneyReceived);
        change = parseFloat(change);
        total = parseFloat(total);
        moneyReceived = parseFloat(moneyReceived);
        const nameBranch = document.getElementById('name-company').value;
        const nameEmployee = document.getElementById('employee-name').textContent;
        const customer = document.getElementById('emailClient').textContent;
        const dateTicket = get_date_ticket()
        let texto = '';
        texto += '\n\n';
        texto += '-------------------------------\n';
        texto += `      *** ${nameBranch} ***\n`;
        texto += `      ${dateTicket}      \n`;
        texto += `Cliente: ${customer}\n`;
        texto += `Atentido por: ${nameEmployee}\n`;
        texto += '\n\n\n\n';
        texto += '-------------------------------\n';
        texto += 'Producto      Cant    Total\n';
        texto += '-------------------------------\n';
        /*
        `Producto: ${item.name}, Precio: ${item.price}, barcode: ${item.barcode}   ${item.quantity}  ${item.purchaseUnit} ${item.discount} ${itemTotal.toFixed(2)}\n`
        */
        cartItems.forEach(item => {
            const itemTotal = (item.price) * item.quantity;

            const nombre = (item.name.length > 14 ? item.name.slice(0, 14) : item.name).padEnd(14);
            const cantidad = item.quantity.toString().padEnd(5);
            const totalStr = itemTotal.toFixed(2).padStart(7);

            texto += `${nombre}${cantidad}${totalStr}\n`;
        });


        texto += '-------------------------------\n';
        texto += `TOTAL:             ${total.toFixed(2).padStart(9)}\n`;
        texto += `Recibido:          ${moneyReceived.toFixed(2).padStart(9)}\n`;
        texto += `Cambio:            ${change.toFixed(2).padStart(9)}\n`;

        if (comment && comment.trim() !== '') {
            texto += '-------------------------------\n';
            texto += `Comentario:\n${comment}\n`;
        }
        texto += '\n\n\n';
        // üéØ TOKEN LLAMATIVO
        const token=generarTokenUnicoTicket();
        texto += '-------------------------------\n';
        texto += '       TOKEN DEL TICKET \n';
        texto += `           ${token}\n`;
        texto += '-------------------------------\n';
        texto += '     ¬°Gracias por su compra!\n';
        texto += '\n\n\n';


        save_ticket_to_cookies(texto, dateTicket);
        return texto;
    }

    function generarTokenUnicoTicket() {
        const array = new Uint8Array(8); // 8 bytes = 16 hex chars
        crypto.getRandomValues(array);
        return Array.from(array, b => b.toString(16).padStart(2, '0')).join('').toUpperCase();
    }

    function get_date_ticket() {
        const ahora = new Date();

        const dia = String(ahora.getDate()).padStart(2, '0');
        const mes = String(ahora.getMonth() + 1).padStart(2, '0'); // Mes inicia en 0
        const a√±o = ahora.getFullYear();

        const horas = String(ahora.getHours()).padStart(2, '0');
        const minutos = String(ahora.getMinutes()).padStart(2, '0');

        return `${dia}/${mes}/${a√±o} ${horas}:${minutos}`;
    }

    function save_ticket_to_cookies(texto, fecha) {
        const cookieName = 'ticketHistory';

        // Leer cookies existentes
        const cookies = document.cookie.split('; ').find(row => row.startsWith(cookieName + '='));

        if (cookies) {
            try {
                listTicket = JSON.parse(decodeURIComponent(cookies.split('=')[1]));
            } catch (e) {
                listTicket=[]
            }
        }

        // Agregar nuevo ticket al inicio
        listTicket.unshift({ texto, fecha });

        // Limitar a 10 tickets
        if (listTicket.length > 10) {
            listTicket = listTicket.slice(0, 10);
        }

        // Guardar en cookies (expiran en 30 d√≠as)
        const cookieValue = encodeURIComponent(JSON.stringify(listTicket));
        document.cookie = `${cookieName}=${cookieValue}; path=/; max-age=${60 * 60 * 24 * 30}`;
    }

    function load_tickets_from_cookies() {
        const cookieName = 'ticketHistory';
        const cookies = document.cookie.split('; ').find(row => row.startsWith(cookieName + '='));

        if (cookies) {
            try {
                listTicket = JSON.parse(decodeURIComponent(cookies.split('=')[1]));
            } catch (e) {
                listTicket = [];
            }
        } else {
            listTicket = [];
        }
    }


    //load the cookies
    load_tickets_from_cookies();
    load_printer();
</script>