<div id="pop-returns" class="plus-popup-overlay">
    <div class="plus-popup-message">

        <button class="plus-popup-close pop-ticket-history-close"
            onclick="hidden_message_pop('pop-returns')">&times;</button>


<div class="row">
    <div class="col-10">
        <label for="">Escribe el codigo del Ticket que deceas buscar</label>
        <input type="text" placeholder="Buscar un Ticket" class="form-control" id="search-ticket">
    </div>
    <div class="col-2">
        <br>
        <button class="btn btn-edit" onclick="search_ticket()">Buscar</button>
    </div>
</div>

<div class="row" id="container-data-ticket">
    <br>
    <hr>
    <div class="row">
        <input type="text" id="filtro-productos" placeholder="Buscar producto por nombre o c√≥digo" class="form-control"
            style="margin-bottom: 8px; width: 50%;">
        <div id="container-ticket" style="max-height: 300px; overflow-y: auto; width: 100%;"></div>
    </div>
    <div id="container-ticket">
    </div>
    <div style="margin-top: 10px;">
        <label for="nota-general">Nota:</label>
        <textarea id="nota-general" class="form-control" rows="3"
            placeholder="Escribe una nota sobre esta devoluci√≥n..."></textarea>
    </div>
    <div style="margin-top: 10px;">
        <strong>Total a devolver: $<span id="total-devolucion">0.00</span></strong>
    </div>

    <br>
    <button class="btn btn-success" onclick="save_return()">Devolver</button>
</div>

    </div>
</div>



<script>
    const containerTicket = document.getElementById('container-data-ticket')
    containerTicket.style.display = 'none';

    

    async function get_information_of_the_ticket(ticket) {
        
        if (!ticket) {
            return null;
        }

        //show the screen load
        const loadingOverlay=document.getElementById('loadingOverlay');
        loadingOverlay.style.display = 'flex';

        //now her we will get the information of the server for get the information of the ticket
        try {
            const response = await fetch('/links/get-data-ticket', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ ticketCode: ticket })
            });

            const data = await response.json();

            if (!response.ok || !data.success) {
            throw new Error(data.message || 'Error al obtener el ticket');
            }

            // Devolver los datos
            return data.ticket;
        } catch (error) {
            console.error('Error al obtener el ticket:', error.message);
            return null;
        }finally{
            loadingOverlay.style.display = 'none'; //hidden the screen load
        }
        
    }

    async function search_ticket() {
        const ticketCode = document.getElementById('search-ticket').value;
        if (!ticketCode.trim()) {
            warningMessage('üëÅÔ∏è Campo vac√≠o', 'Por favor escribe un n√∫mero de ticket.');
            return;
        }

        const dataTicket = await get_information_of_the_ticket(ticketCode);
        
        containerTicket.style.display = 'none';
        if (!dataTicket) {
            warningMessage('ü§î ¬øD√≥nde est√°?', 'El ticket que buscas no existe...¬øSeguro que escribiste bien el c√≥digo?');
            return;
        };


        containerTicket.style.display = 'block';
        const container = document.getElementById('container-ticket');
        container.innerHTML = ''; //clear the container of the table


        //get the table that show
        const table = document.createElement('table');
        table.className = 'table table-bordered table-striped';
        table.style.width = '100%';

        const thead = document.createElement('thead');
        thead.innerHTML = `
            <tr>
                <th>Producto</th>
                <th>Cant. Comprada</th>
                <th>Devolver</th>
                <th>Precio Unitario</th>
                <th>Descuento</th>
                <th>Total</th>
                <th>Subtotal</th>
            </tr>
        `;


        //get the body of the table
        const tbody = document.createElement('tbody');
        tbody.id = 'body-productos';

        //with a for we will show all the data of the ticket 
        dataTicket.current_ticket.forEach((prod, index) => {

            //her we will create the row with his information
            const rowId = `prod-${index}`;
            const tr = document.createElement('tr');
            tr.dataset.name = prod.name.toLowerCase();
            tr.dataset.barcode = prod.barcode.toLowerCase();

            //now we will show the information of the table
            tr.innerHTML = `
            <td><strong>${prod.barcode}</strong><br>${prod.name}</td>
            <td>${prod.quantity}</td>
            <td>
                <div style="display: flex; align-items: center; justify-content: center;">
                <button class="btn btn-edit" onclick="cambiarCantidad('${rowId}', -1)">-</button>
                <input type="number" min="0" max="${prod.quantity}" value="0" 
                    id="input-${rowId}" 
                    data-precio="${prod.price}" 
                    data-max="${prod.quantity}"
                    discount="${prod.discount}"
                    total="${prod.itemTotal}"
                    class="form-control" style="width: 60px; margin: 0 5px;" />
                <button class="btn btn-edit" onclick="cambiarCantidad('${rowId}', 1)">+</button>
                </div>
            </td>
            <td>$${prod.price.toFixed(2)}</td>
            <td>${prod.discount.toFixed(2)}%</td>
            <td>$${prod.itemTotal.toFixed(2)}</td>
            <td id="subtotal-${rowId}">$0.00</td>
            `;

            tbody.appendChild(tr);
        });

        //add the body of the table
        table.appendChild(thead);
        table.appendChild(tbody);
        container.appendChild(table);

        //her we will add the information and event of the
        document.getElementById('total-devolucion').textContent = '0.00';
        mostrarPopup('pop-returns');
        agregarListenersCantidad();
    }


    function cambiarCantidad(id, cambio) {
        const input = document.getElementById(`input-${id}`);
        const max = parseInt(input.dataset.max);
        let val = parseInt(input.value) || 0;
        val = Math.min(Math.max(val + cambio, 0), max);
        input.value = val;
        actualizarTotales();
    }

    function agregarListenersCantidad() {
        const inputs = document.querySelectorAll('[id^="input-prod-"]');
        inputs.forEach(input => {
            input.addEventListener('input', () => {
                const max = parseInt(input.dataset.max);
                let val = parseInt(input.value) || 0;
                if (val > max) {
                    input.value = max;
                    val = max;
                } else if (val < 0) {
                    input.value = 0;
                    val = 0;
                }
                actualizarTotales();
            });
        });

        // Filtro por nombre o c√≥digo
        const filtro = document.getElementById('filtro-productos');
        filtro.addEventListener('input', () => {
            const valor = filtro.value.toLowerCase();
            document.querySelectorAll('#body-productos tr').forEach(row => {
                const coincide = row.dataset.nombre.includes(valor) || row.dataset.codigo.includes(valor);
                row.style.display = coincide ? '' : 'none';
            });
        });
    }

    function actualizarTotales() {
        let total = 0;
        document.querySelectorAll('[id^="input-prod-"]').forEach(input => {
            const precio = parseFloat(input.dataset.precio);
            const cantidad = parseInt(input.value) || 0;
            //const subtotal = cantidad * precio;

            //precio=18
            //descuento=33.33%
            ///total=36
            //cant=3

            //totalSinDescuento=precio*cant;=54
            const totalP = parseFloat(input.getAttribute('total'));
            const max = parseFloat(input.dataset.max);
            const subtotal=(cantidad*totalP)/max;

            const rowId = input.id.replace('input-', '');
            document.getElementById(`subtotal-${rowId}`).textContent = `$${subtotal.toFixed(2)}`;
            total += subtotal;
        });
        document.getElementById('total-devolucion').textContent = total.toFixed(2);
    }

    function agregarListenersDevoluciones() {
        const inputs = document.querySelectorAll('.input-devolver');
        inputs.forEach(input => {
            input.addEventListener('input', () => {
                let total = 0;
                inputs.forEach(inp => {
                    const cantidad = parseFloat(inp.value) || 0;
                    const precio = parseFloat(inp.dataset.precio);
                    const subtotal = cantidad * precio;
                    inp.closest('tr').querySelector('.subtotal').textContent = `$${subtotal.toFixed(2)}`;
                    total += subtotal;
                });

                document.getElementById('total-devolucion').textContent = total.toFixed(2);
            });
        });


        // Filtro por nombre o c√≥digo de barras
        const filtro = document.getElementById('filtro-productos');
        filtro.addEventListener('input', () => {
            const valor = filtro.value.toLowerCase();
            document.querySelectorAll('#body-productos tr').forEach(row => {
                const coincide = row.dataset.nombre.includes(valor) || row.dataset.codigo.includes(valor);
                row.style.display = coincide ? '' : 'none';
            });
        });
    }


    agregarListenersDevoluciones();


    //-------------------------------------------------------
    async function save_return() {
        const money = document.getElementById('total-devolucion').textContent;
        //first we will see if exist money for return 
        if (parseFloat(money) > 0) {
            warningMessage('ü§î ¬øNada que devolver?', 'Tienes que elegir al menos un producto para devolver al cliente.');
            return;
        }

        if (await questionMessage('¬øConfirmar devoluci√≥n al cliente?', `Se va a devolver $${money} al cliente. ¬øEst√° seguro de que desea continuar con esta operaci√≥n?`)) {
            const container = document.getElementById('container-ticket');
            containerTicket.style.display = 'none';
            container.innerHTML = '';
            hidden_message_pop('pop-returns');



            confirmationMessage(`‚úÖ ¬°Listo!`, `$${money} devueltos al cliente sin problemas. El dinero de tu caja fue actualizada exitosamente.`);
        }
    }
</script>