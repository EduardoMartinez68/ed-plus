<style>
    #app {
        max-width: 800px;
        margin: auto;
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    h1 {
        text-align: center;
        color: #333;
    }

    .table-settings {
        margin-bottom: 20px;
    }

    #table-name {
        padding: 5px;
        margin-right: 10px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th,
    td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #f4f4f4;
    }

    .add-row-btn {
        margin-top: 10px;
        padding: 8px 16px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .add-row-btn:hover {
        background-color: #0056b3;
    }

    input[type="text"],
    select {
        padding: 5px;
        margin: 5px;
    }

    .right {
        text-align: right;
        margin-left: 90%;
        background-color: #28a745;
        /* Color verde */
        color: white;
        cursor: pointer;
    }

    .right:hover {
        background-color: #218838;
        /* Color verde m√°s oscuro al pasar el rat√≥n */
    }
</style>

<br><br>
<div id="app">
    <h5>Base de Datos</h5>
    <hr>
    {{#each branchFree}}
        <form action="/fud/{{id_companies}}/{{id}}/app/create-database" id="myForm" method="post">
            <input type="text" name="name_app" placeholder="Escribe el nombre de tu aplicacion" class="form-control" required id="name_app">
            <div id="table-editor-container"></div>
        </form>
    {{/each}}
</div>

<script>
    create_table();


    function create_table() {
        // we will create the container of the table
        const tableContainer = document.createElement("div");
        tableContainer.className = "tabla-container";

        // button for add the row
        const buttonAddRow = document.createElement("button");
        buttonAddRow.type = "button";
        buttonAddRow.textContent = "Agregar Fila";
        buttonAddRow.className = "add-row-btn";
        buttonAddRow.onclick = () => create_row(tbody);
        tableContainer.appendChild(buttonAddRow);


        //we will create the table
        const table = document.createElement("table");
        const thead = document.createElement("thead");
        const tbody = document.createElement("tbody");

        //we will create the body table
        thead.innerHTML = `
                <tr>
                    <th>Nombre de la columna</th>
                    <th>Tipo de dato</th>
                    <th>¬øEs obilgatorio?</th>
                    <th>Acciones</th>
                </tr>
            `;

        table.appendChild(thead);
        table.appendChild(tbody);
        tableContainer.appendChild(table);

        // button for save the database
        const btnSaveDatabase = document.createElement("button");
        btnSaveDatabase.type = "button";
        btnSaveDatabase.textContent = "Crear";
        btnSaveDatabase.className = "add-row-btn right";
        btnSaveDatabase.onclick = () => send_form(tbody);

        tableContainer.appendChild(btnSaveDatabase);
        document.getElementById("table-editor-container").innerHTML = ""; // clean the container 
        document.getElementById("table-editor-container").appendChild(tableContainer);
    }

    function create_row(tbody) {
        const row = document.createElement("tr");

        //this is for create the input of the name of the database
        const columnName = document.createElement("td");
        const inputName = document.createElement("input");
        inputName.type = "text";
        inputName.className = "form-control input_name_table";
        inputName.placeholder = "Nombre de la columna";
        inputName.name = "name_column";
        inputName.required = true;
        
        columnName.appendChild(inputName);

        //this is for create the select of the database
        const columnType = document.createElement("td");
        const selectType = document.createElement("select");
        selectType.className = "form-select";
        selectType.name = "select_name_column";
        const types = [
            "TEXT",
            "VARCHAR", // Con capacidad para definir longitud, por ejemplo, VARCHAR(255)
            "CHAR",    // Con capacidad para definir longitud, por ejemplo, CHAR(10)
            "INT",     // Para valores enteros
            "INT2",    // Peque√±os enteros (16 bits)
            "INT4",    // Enteros (32 bits)
            "INT8",    // Grandes enteros (64 bits)
            "SMALLINT", // Similar a INT2
            "SERIAL",  // Entero autoincremental
            "BIGSERIAL", // Grande entero autoincremental
            "FLOAT",   // Flotantes (precisi√≥n simple)
            "DOUBLE PRECISION", // Flotantes (precisi√≥n doble)
            "NUMERIC", // Con capacidad para definir precisi√≥n, por ejemplo, NUMERIC(10, 2)
            "BOOLEAN", // Valores verdaderos/falsos
            "DATE",    // Fecha (sin hora)
            "TIME",    // Hora (sin fecha)
            "TIMESTAMP", // Fecha y hora
            "TIMESTAMPTZ", // Fecha y hora con zona horaria
            "INTERVAL", // Intervalos de tiempo
            "UUID",    // Identificador √∫nico universal
            "JSON",    // Datos en formato JSON
            "JSONB",   // Datos en formato JSON binario (mejor rendimiento)
            "BYTEA"    // Datos binarios
        ];

        types.forEach(type => {
            const option = document.createElement("option");
            option.value = type;
            option.textContent = type;
            selectType.appendChild(option);
        });
        columnType.appendChild(selectType);

        //this is for create the select Required
        const columnTypeRequired = document.createElement("td");
        const selectTypeRequired = document.createElement("select");
        selectTypeRequired.className = "form-select";
        selectTypeRequired.name = "select_required_column";

        const option2 = document.createElement("option");
        option2.value = 'NULL';
        option2.textContent = 'No';
        selectTypeRequired.appendChild(option2);

        const option1 = document.createElement("option");
        option1.value = 'NOT NULL';
        option1.textContent = 'Si';
        selectTypeRequired.appendChild(option1);

        columnTypeRequired.appendChild(selectTypeRequired);


        //this is for add the function for change the name of the input and the select
        inputName.addEventListener("input", (event) => change_name(event, selectType, selectTypeRequired));

        //button for delete the row
        const columnAction = document.createElement("td");
        const buttonDelete = document.createElement("button");
        buttonDelete.textContent = "Eliminar";
        buttonDelete.type = "button";
        buttonDelete.className = "btn btn-danger";
        buttonDelete.onclick = () => delete_row(row);
        columnAction.appendChild(buttonDelete);

        row.appendChild(columnName);
        row.appendChild(columnType);
        row.appendChild(columnTypeRequired);
        row.appendChild(columnAction);
        tbody.appendChild(row);
    }

    async function delete_row(row) {
        if (await questionMessage('Eliminar fila üò±', '¬øDeseas eliminar esta fila?')) {
            row.remove();
        }
    }

    function change_name(event,select,selectRequired) {
        const input = event.target;
        const newName = event.target.value.trim().replace(/\s+/g, "_"); // get the record of the value of the input
        input.name = newName ? newName : "name_column"; // Cambia el 'name' del input, o usa un nombre predeterminado si est√° vac√≠o
        
        if(input.name=='name_app'){
            input.name='name_column';
            input.value=''
            warningMessage('‚ö†Ô∏è Error ‚ö†Ô∏è','Este nombre esta reservado')
        }

        select.name='select_'+input.name
        selectRequired.name='select_requeride_'+input.name
    }

    function send_form(tbody) {
        // get the form for his id
        const form = document.getElementById("myForm");
        if (form) {
            const inputNameApp=document.getElementById('name_app').value;
            if (inputNameApp.trim() == "") {
                errorMessage('Error al crear la base de datos', 'Ingresa un nombre valido para la App üëÅÔ∏è')
                return;
            }

            // get all the inputs with the class todos 'input_name_table'
            const inputs = document.querySelectorAll(".input_name_table");

            //we will see if exist inputs in the table
            if (inputs.length == 0) {
                errorMessage('Error al crear la base de datos', 'No existe ninguna fila en la base de datos üëÅÔ∏è')
                return;
            }
            
            if (are_allInputs_filled()) {
                if (!check_duplicate_names()) {
                    form.submit(); // send the form
                } else {
                    errorMessage('Error al crear la base de datos', 'No puedes tener 2 filas con el mismo nombre üßê')
                }
            } else {
                errorMessage('Error al crear la base de datos', 'Todas las filas necesitan tener un nombre üëÅÔ∏è')
            }
        }
    }

    function check_duplicate_names() {
        // Obtiene todos los inputs que tienen la clase 'input_name_table'
        const inputs = document.querySelectorAll(".input_name_table");

        // Crea un conjunto para almacenar nombres √∫nicos
        const namesSet = new Set();

        // Itera sobre los inputs
        for (const input of inputs) {
            const name = input.name; // Obt√©n el atributo 'name' del input
            // Verifica si el nombre ya est√° en el conjunto
            if (namesSet.has(name)) {
                // Si el nombre ya existe en el conjunto, hay un duplicado
                return true; // Devuelve true si encuentra un duplicado
            }

            // Si no es un duplicado, agrega el nombre al conjunto
            namesSet.add(name);
        }

        // Si no se encontraron duplicados, devuelve false
        return false;
    }

    function are_allInputs_filled() {
        // Obtiene todos los inputs con la clase 'input_name_table'
        const inputs = document.querySelectorAll(".input_name_table");

        //we will see if exist inputs in the table
        if (inputs.length == 0) {
            return false;
        }

        // Itera sobre los inputs y verifica si alguno est√° vac√≠o
        for (const input of inputs) {
            if (input.required && !input.value.trim()) {
                return false; // Retorna false si alg√∫n input requerido est√° vac√≠o
            }
        }

        return true; // Retorna true si todos los inputs requeridos tienen valor
    }

</script>