<style>
  .btn-div {
    width: 100%;
    background-color: #ffffff;
    border: 1px solid #ccc;
    padding: 10px 12px;
    box-sizing: border-box;
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    margin-bottom: 8px;
  }

  .btn-div-content {
    display: flex;
    flex-direction: column;
  }

  .btn-div label {
    font-weight: bold;
    margin-bottom: 8px;
    color: #333;
  }

  .btn-div p {
    margin: 0;
    color: #666;
    font-size: 13px;
  }

  .btn-div i {
    font-size: 20px;
    color: #999;
    margin-top: 13px;
  }
</style>


<input type="hidden" value="{{token}}" id="token-for-facturama">

{{#each infoCustomer}}
<input type="hidden" value="{{id}}" id="id_customer">
{{/each}}

<form id="formCreateFactureCFDI">
  <b><i class="fi-icon fi-ss-bell"></i> Timbres: <label for="" id="number-timbres-user">0</label></b>
  {{>tickets/formCFDI}}
  <br>
  <div id="informationSales" class="my-pop">
    <div class="my-pop-content-wrapper">
      <div class="my-pop-header">
        <h4 class="my-pop-title">Datos de la Venta</h4>
        <button class="close-btn" onclick="close_my_pop('informationSales')" type="button">×</button>
      </div>
      <div class="my-pop-content">
        {{>tickets/informationSales}}
      </div>
    </div>
  </div>
  <div class="btn-div" onclick="open_my_pop('informationSales')">
    <div class="btn-div-content">
      <label>Datos de la Venta</label>
      <p id="total-message-cfdi-show">Total de Venta: ${{dataTicketOld.total}}</p>
    </div>
    <i class="fi fi-rr-angle-right"></i>
  </div>






  <div id="informationAddress" class="my-pop">
    <div class="my-pop-content-wrapper">
      <div class="my-pop-header">
        <h4 class="my-pop-title">Datos de Facturación</h4>
        <button class="close-btn" onclick="close_my_pop('informationAddress')" type="button">×</button>
      </div>
      <div class="my-pop-content">
        {{>tickets/formAddress}}
      </div>
    </div>
  </div>
  <div class="btn-div" onclick="open_my_pop('informationAddress')">
    <div class="btn-div-content">
      <label>Datos de Facturación</label>
      <p id="p-rfc-customer">XAXX010101000</p>
    </div>
    <i class="fi fi-rr-angle-right"></i>
  </div>

  <br><br><br><br><br><br><br><br>
  <div class="row mt-3">
    <div class="col">
      {{>tickets/useCFDI}}
    </div>
    <div class="col">
      {{>tickets/metpay}}
    </div>
  </div>

  <button type="button" class="btn btn-add mt-4" onclick="create_preview_view_facture_cfdi()" id="btn-create-facture">Generar
    Factura por</button>
</form>


<div id="viewPreviuCFDI" class="my-pop">
  <div class="my-pop-content-wrapper">
    <div class="my-pop-header">
      <h4 class="my-pop-title">Vista previa del CFDI</h4>
      <button class="close-btn" onclick="close_my_pop('viewPreviuCFDI')" type="button">×</button>
    </div>
    <div class="my-pop-content">
      <div id="cfdi-preview"></div>
      <br>
      <button onclick="create_my_facture_cfdi()" class="btn btn-add">Generar Factura</button>
      <br>
    </div>
  </div>
</div>


<!---this pop is when the facture was create a the user neeed see and send for email, pdf, download--->
{{>tickets/popFacture}}







<script>

  /**--------------------THIS SCRIPT IS FOR LOAD ALL THE INFORMATION OF THE TICKET AND SHOW THE PRODUCT THAT THE USER WOULD LIKE FACTURE---------------------*/
  let dataFactureCFDI = {}
  let keyTicketFacture = null;
  let pathLogoRFCFacture = 'https://pluspuntodeventa.com/img/logo-white-complete.webp';

  function update_information_of_the_form_to_publico_en_general(zipCode) {
    /*
      Rfc: 'XAXX010101000', /
      CfdiUse: 'S01',
      Name: 'PUBLICO EN GENERAL', /
      FiscalRegime: '616', /
      TaxZipCode: TaxZipCodeCFDI, //this is the zip code of the company /
    */

    document.getElementById('regimenFiscalReceptor').value = '616';
    document.getElementById('codigoPostalReceptor').value = zipCode;
    document.getElementById('rfcReceptor').value = 'XAXX010101000';
    document.getElementById('nombreReceptor').value = 'PUBLICO EN GENERAL';
    document.getElementById("usoCfdi").value = "S01";
  }

  async function render_information_cfdi(key) {
    //first we will see if the user have a acount of PLUS, if not have, not seacrh information for the facture
    if(!credentials_exist()){
      errorMessage('⚠️ ERROR','No tienes una cuenta PLUS asignada');
      return;
    }

    //get the number of timbres that the user have in his count 
    await update_information_of_timbres();

    keyTicketFacture = key;
    const dataBranchCFDI = await send_data_to_server('/links/get_data_cfdi_branch', { n: null });
    const dataTicket = await send_data_to_server('/links/get-info-ticket-by-ticket', { key });
    const infoFactureSave = await send_data_to_server('/links/get-info-facture-cfdi', { id_customer: null, query: '' }) //her we will get the information of factura of the customer if exist or of all the company


    //when get the data of the server, we will show in the frontend
    render_html_of_the_table(dataTicket.data);
    renderFactureCards(infoFactureSave.data);
    update_information_of_the_form_to_publico_en_general(dataBranchCFDI.data.TaxZipCode);
  }

  async function update_information_of_timbres(){
    const payload=get_credetial_user();
    let result;
    try {
      const response = await fetch('https://pluspuntodeventa.com/api/factura/get_timbres.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const text = await response.text(); // para depurar si la respuesta no es JSON
      try {
        result = JSON.parse(text);
      } catch {
        throw new Error('Respuesta no es JSON. Body: ' + text.slice(0, 300));
      }
    } catch (error) {
      console.error('Error al enviar los datos al servidor:', error);
    }

    document.getElementById('number-timbres-user').textContent=result.timbres;
  }

  function get_credetial_user(){
    const payload = {
      token: document.getElementById('token-for-facturama').value,
      user_email: localStorage.getItem('user_email'),
      password: localStorage.getItem('user_password')
    };
    return payload;
  }

  function credentials_exist() {
      const token = document.getElementById('token-for-facturama')?.value || '';
      const email = localStorage.getItem('user_email') || '';
      const password = localStorage.getItem('user_password') || '';

      return token.trim() !== '' && email.trim() !== '' && password.trim() !== '';
  }

  function renderFactureCards(dataFacture) {
    const container = document.getElementById('card-info-fiscal');
    if (!container) {
      console.error('[renderFactureCards] No existe #card-info-fiscal');
      return;
    }

    const list = Array.isArray(dataFacture) ? dataFacture : [];
    if (list.length === 0) {
      container.innerHTML = `
      <div class="info-row">
        <div class="info-value text-muted">Sin resultados</div>
      </div>
    `;
      return;
    }

    // Construye el HTML
    const html = list.map(item => {
      // Sanitiza valores básicos (evita 'undefined' en pantalla)
      const id = item.id ?? '';
      const rfc = item.rfc ?? '';
      const company_name = item.company_name ?? '';
      const use_cfdi = item.use_cfdi ?? '';
      const fiscalRegime = item.fiscalRegime ?? '';
      const postal_code = item.postal_code ?? '';
      const street = item.street ?? '';
      const num_i = item.num_i ?? '';
      const num_e = item.num_e ?? '';
      const cologne = item.cologne ?? '';
      const municipy = item.municipy ?? '';
      const state = item.state ?? '';
      const country = item.country ?? '';

      return `
      <div class="info-row">
        <div class="info-value">
          <label>RFC del Cliente: ${rfc}</label><br>
          <label>Nombre o Razón Social: ${company_name}</label><br>
          <button
            type='button'
            class="btn btn-edit"
            onclick="use_data_for_the_facture(this)"
            data-id="${id}"
            data-rfc="${escapeAttr(rfc)}"
            data-company_name="${escapeAttr(company_name)}"
            data-use_cfdi="${escapeAttr(use_cfdi)}"
            data-fiscal_regime="${escapeAttr(fiscalRegime)}"
            data-postal_code="${escapeAttr(postal_code)}"
            data-street="${escapeAttr(street)}"
            data-num_i="${escapeAttr(num_i)}"
            data-num_e="${escapeAttr(num_e)}"
            data-cologne="${escapeAttr(cologne)}"
            data-municipy="${escapeAttr(municipy)}"
            data-state="${escapeAttr(state)}"
            data-country="${escapeAttr(country)}"
          >
            Usar
          </button>
        </div>
      </div>
    `;
    }).join('');

    container.innerHTML = html;
  }

  // Escapa comillas en atributos HTML
  function escapeAttr(v) {
    return String(v).replace(/"/g, '&quot;');
  }


  // Helper para asignar valores con seguridad
  function setValue(selector, value) {
    const el = document.querySelector(selector);
    if (!el) return;
    // Soporta input, select, textarea o label/span
    if ('value' in el) el.value = value ?? '';
    else el.textContent = value ?? '';
  }

  function fmtNumber(n) {
    if (n === null || n === undefined || isNaN(n)) return '0';
    return Number(n).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
  }

  function formatToMXN(num) {
    if (num === null || num === undefined || isNaN(num)) return '0';
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }

  function render_html_of_the_table(dataTicket) {
    if (!dataTicket || !Array.isArray(dataTicket.products)) {
      console.error('[render] dataTicket.products no es un arreglo', dataTicket);
      return;
    }

    const products = dataTicket.products;
    const tbody = document.getElementById('container-product-ticket');
    const taxesContainer = document.getElementById('container-taxes-products');

    if (!tbody) {
      console.error('[render] No existe #container-product-ticket en el DOM');
      return;
    }
    if (!taxesContainer) {
      console.error('[render] No existe #container-taxes-products en el DOM');
      return;
    }

    // Limpia
    tbody.innerHTML = '';
    taxesContainer.innerHTML = '';

    products.forEach((p, idx) => {
      // Campos con fallback
      const sat_key = p.ProductCode ?? '';
      const name = p.Description ?? '';
      const barcode = p.Barcode ?? '';   // No viene en tu payload; por si lo agregas luego
      const quantity = p.Quantity ?? 0;
      const priceWithoutTaxes = p.UnitPrice ?? 0;

      // Precio unitario con impuestos (si quieres mostrarlo): si el total viene por línea
      const itemTotal = p.Total ?? (Number(priceWithoutTaxes) * Number(quantity));
      const priceWithTaxesUnit = quantity ? (Number(itemTotal) / Number(quantity)) : 0;

      // Fila de productos
      const tr = document.createElement('tr');
      tr.innerHTML = `
      <td>${sat_key}</td>
      <td>${name}</td>
      <td>${barcode}</td>
      <td class="cantidad">${fmtNumber(quantity)}</td>
      <td class="priceWithoutTaxes">${fmtNumber(priceWithoutTaxes)}</td>
      <td class="precio">${fmtNumber(priceWithTaxesUnit)}</td>
      <td class="total">${fmtNumber(itemTotal)}</td>
    `;
      tbody.appendChild(tr);

      // ===== Impuestos por producto =====
      const taxes = Array.isArray(p.Taxes) ? p.Taxes : [];
      // Estructura de cada impuesto: depende de tu backend. Asumo:
      // { name, taxId, rate, is_retention }
      // Si tu backend trae otra forma (ej: {Type, Rate, Amount, Withholding}), adapta el mapeo abajo.

      const tableId = `table-tax-${(barcode || sat_key || `idx${idx}`)}`.replace(/[^a-zA-Z0-9_-]/g, '');
      const wrapper = document.createElement('div');
      wrapper.className = 'table-responsive mb-3';
      wrapper.innerHTML = `
      <h6 class="mb-1">${name || 'Producto'}</h6>
      <label class="d-block mb-2">${barcode || sat_key || ''}</label>
      <table class="table table-hover">
        <thead>
          <tr>
            <th>Nombre</th>
            <th>Código</th>
            <th>Tasa</th>
            <th>¿Retención?</th>
          </tr>
        </thead>
        <tbody id="${tableId}">
          ${taxes.length === 0 ? `
            <tr><td colspan="4" class="text-muted">Sin impuestos</td></tr>
          ` : ''}
        </tbody>
      </table>
    `;
      taxesContainer.appendChild(wrapper);

      const tbodyTaxes = wrapper.querySelector(`#${tableId}`);
      taxes.forEach(tax => {
        // Mapeo flexible
        const taxName = tax.name ?? tax.Name ?? tax.Type ?? 'Impuesto';
        const taxCode = tax.taxId ?? tax.Id ?? tax.Code ?? '';
        const taxRate = tax.rate ?? tax.Rate ?? tax.Percentage ?? tax.Factor ?? 0;
        const taxIsRetention = (tax.is_retention ?? tax.Withholding ?? tax.IsRetention ?? false) ? 'Sí' : 'No';

        const trTax = document.createElement('tr');
        trTax.innerHTML = `
        <td>${taxName}</td>
        <td>${taxCode}</td>
        <td>${fmtNumber(taxRate)}</td>
        <td>${taxIsRetention}</td>
      `;
        tbodyTaxes.appendChild(trTax);
      });
    });

    const totalFacture = formatToMXN(dataTicket.totalGlobal);
    document.getElementById('total-general').textContent = '$' + totalFacture;
    document.getElementById('btn-create-facture').textContent = 'Generar Factura por $' + totalFacture;
    document.getElementById('total-message-cfdi-show').textContent = 'Total de Venta: $' + totalFacture;
  }


  /**--------------------HER WE WILL CREATE A FACTURE OF PREVIEW VIEW---------------------*/
  let TaxZipCodeCFDI = null;
  let dataForTheServer=null;

  async function create_preview_view_facture_cfdi() {
    //first we will see that the user not have information empty
    if (!this_user_can_create_a_facture()) {
      return;
    }

    //if the user have the permition of create a facture and all the inputs that the API need, now get the data and create the body
    const Issuer = await create_data_issuer(); //this is get from the server (data of the SAT of the company)
    const Receiver = create_data_receiver(); //(data of the SAT of the customer)
    const key = keyTicketFacture;
    const itemFromTheServer = await send_data_to_server('/links/get-info-ticket-by-ticket', { key: key }); //this is get from the server (product that the send to SAT that you sold)
    const Items = itemFromTheServer.data.products;

    //her we will to create the item that send to the API of prontipagos
    const dataForTheServerFunction = {
      CfdiType: document.getElementById('cfdiType').value,
      PaymentForm: document.getElementById('paymentForm').value,
      PaymentMethod: document.getElementById('paymentMethod').value,
      ExpeditionPlace: TaxZipCodeCFDI,
      LogoUrl: pathLogoRFCFacture,
      Date: getCurrentDateTimeForCFDI(),
      Folio: Math.floor(Math.random() * 10000),



      Issuer,
      Receiver,
      Items
    }
    dataForTheServer=dataForTheServerFunction;
    console.log(JSON.stringify(dataForTheServer, null, 2));
    render_preview_view_of_my_facture();
    //await create_my_facture_cfdi(dataForTheServer);
  }

  function render_preview_view_of_my_facture() {
    renderCfdiPreview(dataForTheServer, 'cfdi-preview');
    open_my_pop('viewPreviuCFDI');
  }


  function escapeHtml(s) {
    return String(s ?? '')
      .replace(/&/g, "&amp;").replace(/</g, "&lt;")
      .replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
  }

  // Agrega comas de miles sin alterar decimales
  function formatNumberWithCommas(n) {
    if (n === null || n === undefined || n === '' || isNaN(n)) return '0';
    const [intPart, decPart] = String(n).split('.');
    const intFmt = intPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    return decPart ? `${intFmt}.${decPart}` : intFmt;
  }

  function formatMoney(n) {
    return '$' + formatNumberWithCommas(
      // aseguramos máximo 2 decimales *visuales* sin redondear en exceso
      (Math.floor(Number(n) * 100) / 100).toFixed(2)
    );
  }

  function toIsoLike(dateStr) {
    // Convierte "YYYY-MM-DD HH:mm:ss" a "YYYY-MM-DDTHH:mm:ss"
    return String(dateStr).replace(' ', 'T');
  }

  // ===== Render principal =====
  function renderCfdiPreview(cfdi, containerId = 'cfdi-preview') {
    const el = document.getElementById(containerId);
    if (!el) {
      console.error('[renderCfdiPreview] No existe #' + containerId);
      return;
    }

    // Desestructuración segura
    const {
      CfdiType, PaymentForm, PaymentMethod, ExpeditionPlace,
      LogoUrl, Date, Folio, Issuer = {}, Receiver = {}, Items = []
    } = cfdi || {};

    // Totales a partir de Items
    let subtotalGlobal = 0;
    let totalGlobal = 0;
    Items.forEach(it => {
      subtotalGlobal += Number(it.Subtotal || 0);
      totalGlobal += Number(it.Total || 0);
    });
    const impuestosGlobales = totalGlobal - subtotalGlobal;

    const htmlItems = Items.map(it => {
      const taxesText = Array.isArray(it.Taxes) && it.Taxes.length
        ? it.Taxes.map(t => {
          const rate = (t.rate ?? t.Rate ?? 0);
          // Si viene 16, mostramos 16%; si viniera 0.16, ajusta a (rate*100)
          const rateShow = (rate > 1 ? rate : rate * 100);
          return `${escapeHtml(t.name ?? 'Impuesto')} ${formatNumberWithCommas(rateShow)}%`;
        }).join(', ')
        : '—';
      return `
      <tr>
        <td>${escapeHtml(it.ProductCode)}</td>
        <td>${escapeHtml(it.Description)}</td>
        <td>${escapeHtml(it.UnitCode)}</td>
        <td class="text-right">${formatNumberWithCommas(it.Quantity ?? 0)}</td>
        <td class="text-right">${formatMoney(it.UnitPrice ?? 0)}</td>
        <td class="text-right">${formatMoney(it.Subtotal ?? 0)}</td>
        <td>${escapeHtml(taxesText)}</td>
        <td class="text-right">${formatMoney(it.Total ?? 0)}</td>
      </tr>
    `;
    }).join('');

    const html = `
    <style>
      .cfdi-card{background:#fff;border:1px solid #ccc;box-shadow:0 0 15px rgba(0,0,0,.05);padding:24px;max-width:960px;margin:auto;position:relative}
      .cfdi-head{display:flex;justify-content:space-between;align-items:center;margin-bottom:16px}
      .cfdi-head .logo img{max-height:64px}
      .cfdi-title{color:#0669D0;font-size:22px;font-weight:700}
      .cfdi-sub{color:#888;font-size:13px}
      .cfdi-water{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;pointer-events:none;z-index:0}
      .cfdi-water span{transform:rotate(-25deg);font-size:100px;color:rgba(6,105,208,.10);font-weight:800;white-space:nowrap}
      .cfdi-body{position:relative;z-index:1}
      .cfdi-sec h3{color:#0669D0;margin:16px 0 6px 0;font-size:18px}
      .cfdi-table{width:100%;border-collapse:collapse;margin-bottom:12px;font-size:14px}
      .cfdi-table th{background:#0669D0;color:#fff;text-align:left;padding:8px}
      .cfdi-table td{border:1px solid #ccc;padding:8px}
      .text-right{text-align:right}
      .totals td{border:none;text-align:right;padding:4px 0;font-size:15px}
      .nota {
        font-size: 12px;
        color: #666;
        margin-top: 30px;
        text-align: center;
      }
    </style>

    <div class="cfdi-card">
      <div class="cfdi-water"><span>Prueba</span></div>
      <div class="cfdi-body">
        <div class="cfdi-head">
          <div class="logo">
            ${pathLogoRFCFacture ? `<img src="${escapeHtml(pathLogoRFCFacture)}" alt="Logo">` : ''}
          </div>
          <div class="t">
            <div class="cfdi-title">Factura CFDI 4.0</div>
            <div class="cfdi-sub">Vista previa sin timbrar</div>
          </div>
        </div>

        <div class="cfdi-sec">
          <h3>Información fiscal</h3>
          <table class="cfdi-table">
            <tr>
              <td><strong>Folio:</strong> ${escapeHtml(Folio ?? '')}</td>
              <td><strong>Fecha de emisión:</strong> ${escapeHtml(toIsoLike(Date ?? ''))}</td>
            </tr>
            <tr>
              <td><strong>Tipo de comprobante:</strong> ${escapeHtml(CfdiType ?? '')}</td>
              <td><strong>Lugar de expedición (CP):</strong> ${escapeHtml(ExpeditionPlace ?? '')}</td>
            </tr>
            <tr>
              <td><strong>Forma de pago:</strong> ${escapeHtml(PaymentForm ?? '')}</td>
              <td><strong>Método de pago:</strong> ${escapeHtml(PaymentMethod ?? '')}</td>
            </tr>
          </table>
        </div>

        <div class="cfdi-sec">
          <h3>Emisor</h3>
          <table class="cfdi-table">
            <tr>
              <td><strong>RFC:</strong> ${escapeHtml(Issuer.Rfc)}</td>
              <td><strong>Nombre o Razón Social:</strong> ${escapeHtml(Issuer.Name)}</td>
            </tr>
            <tr>
              <td><strong>Régimen Fiscal:</strong> ${escapeHtml(Issuer.FiscalRegime)}</td>
              <td></td>
            </tr>
          </table>
        </div>

        <div class="cfdi-sec">
          <h3>Receptor</h3>
          <table class="cfdi-table">
            <tr>
              <td><strong>RFC:</strong> ${escapeHtml(Receiver.Rfc)}</td>
              <td><strong>Nombre:</strong> ${escapeHtml(Receiver.Name)}</td>
            </tr>
            <tr>
              <td><strong>Uso del CFDI:</strong> ${escapeHtml(Receiver.CfdiUse)}</td>
              <td><strong>Régimen Fiscal:</strong> ${escapeHtml(Receiver.FiscalRegime)}</td>
            </tr>
            <tr>
              <td><strong>Código Postal:</strong> ${escapeHtml(Receiver.TaxZipCode)}</td>
              <td></td>
            </tr>
          </table>
        </div>

        <div class="cfdi-sec">
          <h3>Conceptos</h3>
          <table class="cfdi-table">
            <thead>
              <tr>
                <th>Clave SAT</th>
                <th>Descripción</th>
                <th>Unidad</th>
                <th>Cantidad</th>
                <th>Precio Unitario</th>
                <th>Subtotal</th>
                <th>Impuestos</th>
                <th>Total</th>
              </tr>
            </thead>
            <tbody>
              ${htmlItems || `<tr><td colspan="8" class="text-right">Sin conceptos</td></tr>`}
            </tbody>
          </table>
        </div>

        <div class="cfdi-sec">
          <h3>Totales</h3>
          <table class="totals" style="width:100%">
            <tr>
              <td><strong>Subtotal:</strong></td>
              <td>${formatMoney(subtotalGlobal)}</td>
            </tr>
            <tr>
              <td><strong>Impuestos:</strong></td>
              <td>${formatMoney(impuestosGlobales)}</td>
            </tr>
            <tr>
              <td><strong>Total:</strong></td>
              <td><strong>${formatMoney(totalGlobal)}</strong></td>
            </tr>
          </table>
        </div>

            <div class="qr-sello">
              <div class="qr">
                <img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=UUID:123e4567-e89b-12d3-a456-426614174000" alt="QR CFDI">
              </div>
            </div>
            <br>
            <div class="nota">
              Esta es una vista previa de la factura CFDI 4.0 generada con fines informativos. <br>
              No tiene validez fiscal hasta que sea debidamente timbrada por el PAC autorizado ante el SAT.
            </div>

      </div>
    </div>
  `;

    el.innerHTML = html;
  }


  /**--------------------HER GET ALL THE DATA OF CREATE THE FACTURE---------------------*/
  async function create_my_facture_cfdi() {
    //now if the user have all the input success and have the permition for create a factue, we will do a question 
    if (!await questionMessage('🤔 ¿Deseas generar esta factura?', 'Una vez creada, solo podrás cancelarla pero no modificarla. ¡Asegúrate de que todo esté correcto!')) {
      return;
    }

    if(!credentials_exist()){
      errorMessage('⚠️ ERROR','No tienes una cuenta PLUS asignada');
      return;
    }

    //now we will send the information save to the api of facturama
    const loadingOverlay = document.getElementById('loadingOverlay')
    if(loadingOverlay){
      loadingOverlay.style.display = 'flex';
    }
    
    try {
        const response = await fetch('https://pluspuntodeventa.com/api/factura/factura.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(dataForTheServer)
        });

        const responseText = await response.json();

        if (response.ok && responseText.success) {
            close_all_the_pop();
            confirmationMessage("✅ ¡Factura creada!", responseText.message);

            const idFactura = responseText.response.Id; // <-- ID de la factura
            mostrarPopupFactura(idFactura); // <-- mostrar el popup y guardar

            
        } else {
          warningMessage("❌ Error al generar factura", responseText.error || "Algo salió mal.");
          console.error(responseText.error || responseText);
        }
    } catch (error) {
        errorMessage("❌ Error de conexión", error.message);
    }

   
    if(loadingOverlay){
      loadingOverlay.style.display = 'none';
    }


    //clear the information former
    dataForTheServer=null;


  }

  function close_all_the_pop(){
    //close all the pop of the UI 
    close_my_pop('viewPreviuCFDI');
    close_my_pop('informationAddress');
    close_my_pop('informationSales');

    //her we will see if exist a message pop of facture
    if(document.getElementById('createFactureCFDI')){
      close_my_pop('createFactureCFDI')
    }
  }

  function getCurrentDateTimeForCFDI() {
    const now = new Date();

    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0'); // Mes 01-12
    const day = String(now.getDate()).padStart(2, '0');        // Día 01-31

    const hours = String(now.getHours()).padStart(2, '0');     // Hora 00-23
    const minutes = String(now.getMinutes()).padStart(2, '0');// Minutos 00-59
    const seconds = String(now.getSeconds()).padStart(2, '0');// Segundos 00-59

    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
  }

  function this_user_can_create_a_facture() {
    if (document.getElementById('rfcReceptor').value == '') {
      errorMessage('Necesitas el RFC del cliente');
      return false;
    }

    if (document.getElementById('regimenFiscalReceptor').value == '') {
      errorMessage('Necesitas el Regimen Fiscal o el Nombre de tu cliente');
      return false;
    }

    if (document.getElementById('nombreReceptor').value == '') {
      errorMessage('Necesitas el Nombre de tu cliente');
      return false;
    }

    if (document.getElementById('codigoPostalReceptor').value == '') {
      errorMessage('Necesitas el codigo postal de tu cliente');
      return false;
    }
    return true;
  }

  async function create_data_issuer() {
    const dataBranchCFDI = await send_data_to_server('/links/get_data_cfdi_branch', { n: null });
    TaxZipCodeCFDI = dataBranchCFDI.data.TaxZipCode;
    pathLogoRFCFacture = dataBranchCFDI.data.linkCFDI; //get the link of the logo of the company

    return {
      FiscalRegime: dataBranchCFDI.data.FiscalRegime,
      Rfc: dataBranchCFDI.data.Rfc,
      Name: dataBranchCFDI.data.Name
    }
  }

  function create_data_receiver() {
    //her we will see if the user would like do a facture a PUBLICO EN GENERAL
    const RFC = document.getElementById('rfcReceptor').value;
    if (RFC == 'XAXX010101000') {
      //if the customer would like create a facture to PUBLICO EN GENERAL, we will create the information of FACTURA A PUBLICO EN GENERAL
      return {
        Rfc: 'XAXX010101000',
        CfdiUse: 'S01',
        Name: 'PUBLICO EN GENERAL',
        FiscalRegime: '616',
        TaxZipCode: TaxZipCodeCFDI, //this is the zip code of the company
      }
    } else {
      //if this facture no is to PUBLICO EN GENRAL get his address and other data
      const Address = get_data_addres_data_customer_cfdi()
      return {
        Rfc: document.getElementById('rfcReceptor').value,
        CfdiUse: document.getElementById('usoCfdi').value,
        Name: document.getElementById('nombreReceptor').value,
        FiscalRegime: document.getElementById('regimenFiscalReceptor').value,
        TaxZipCode: document.getElementById('codigoPostalReceptor').value,
        Address: Address
      }
    }
  }

  function get_data_addres_data_customer_cfdi() {
    return {
      Street: document.getElementById('calleReceptor').value,
      ExteriorNumber: document.getElementById('numeroExteriorReceptor').value,
      InteriorNumber: document.getElementById('numeroInteriorReceptor').value,
      Neighborhood: document.getElementById('coloniaReceptor').value,
      ZipCode: document.getElementById('codigoPostalReceptor').value,
      Municipality: document.getElementById('municipioReceptor').value,
      State: document.getElementById('estadoReceptor').value,
      Country: document.getElementById('paisReceptor').value
    }
  }
</script>