<style>
.pop-cfdi-overlay {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 300;
  backdrop-filter: blur(2px);
}

.pop-cfdi-card {
  background: #f1f1f1;
  border-radius: 12px;
  padding: 24px;
  width: 50%;
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);
  font-family: 'Segoe UI', sans-serif;
  text-align: center;
  animation: slideUp 0.3s ease;
}

.pop-cfdi-btn-close {
  position: absolute;
  top: 12px;
  right: 14px;
  font-size: 20px;
  border: none;
  background: transparent;
  cursor: pointer;
  color: #555;
}

.factura-link {
  display: block;
  background: #ffff;
  border: 1px dashed #bbb;
  border-radius: 6px;
  padding: 10px;
  font-size: 13px;
  margin-bottom: 20px;
  color: #444;
  text-align: center;
  word-break: break-all;
  user-select: all;
}

.factura-actions {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  gap: 12px;
}

.factura-btn {
  background: white;
  border-radius: 10px;
  padding: 16px 10px;
  border: 1px solid #ddd;
  cursor: pointer;
  transition: all 0.2s ease;
  text-align: center;
}
.factura-btn:hover {
  background: #f0f0f0;
}

.factura-btn i {
  font-size: 22px;
  color: var(--color-company);
  margin-bottom: 6px;
}

.factura-btn span {
  display: block;
  font-size: 10px;
  color: var(--color-company);
}


</style>
<div class="pop-cfdi-overlay" id="facturaPopup" style="display:none;">
  <div class="pop-cfdi-card">
    <button class="pop-cfdi-btn-close" onclick="cerrarPopup()">&times;</button>
    <h3 style="margin-bottom: 12px;">✅ Factura creada</h3>
    <p style="font-size: 14px; margin-bottom: 12px;">Puedes usar este enlace directo:</p>
    
    <div class="factura-link" id="facturaLink">
      https://pluspuntodeventa.com/cfdi/IDFACTURA
    </div>

    <div id="container-facture" class="preview-box">

    </div>
    <br>
    <div class="factura-actions">
      <div class="factura-btn" onclick="descargarFactura(currentFacturaId, 'pdf')">
        <i class="fi fi-sr-file-pdf"></i>
        <span>PDF</span>
      </div>
      <div class="factura-btn" onclick="descargarFactura(currentFacturaId, 'xml')">
        <i class="fi fi-sr-file"></i>
        <span>XML</span>
      </div>
      <div class="factura-btn" onclick="descargarFactura(currentFacturaId, 'html')">
        <i class="fi fi-sr-poll-h"></i>
        <span>HTML</span>
      </div>
      <div class="factura-btn" onclick="imprimirFactura()">
        <i class="fi fi-ss-print"></i>
        <span>Imprimir</span>
      </div>
      <div class="factura-btn" onclick="enviarPorEmail(currentFacturaId)">
        <i class="fi fi-sr-envelope"></i>
        <span>Email</span>
      </div>
    </div>
    <br><br>
    <button class="btn btn-add" onclick="cerrarPopup()" style="width: 50%;">Aceptar</button>
  </div>
</div>

<div id="cancelPopup" class="pop-cfdi-overlay" style="display:none;">
  <div class="pop-cfdi-card">
    <button class="pop-cfdi-btn-close" onclick="cerrarCancelPopup()">&times;</button>
    <h5 style="margin-bottom: 16px;">❌ Cancelar Factura</h5>

    <label>Motivo de cancelación:</label>
    <select id="cancelMotive" onchange="toggleUUIDField()"  class="form-select" aria-label="Default select example">
      <option value="01">01 - Con errores con relación</option>
      <option value="02">02 - Con errores sin relación</option>
      <option value="03">03 - No se llevó a cabo la operación</option>
      <option value="04">04 - Relacionado con factura global</option>
    </select>

    <div id="uuidField" style="margin-top: 10px; display:none;">
      <label>UUID que sustituye a esta factura:</label>
      <input type="text" id="uuidReplacement" placeholder="Ej: abc123..."class="form-control">
    </div>
    <br>
    <button class="btn btn-edit" onclick="enviarCancelacion()">Cancelar factura</button>
    <button class="btn btn-danger" onclick="cerrarCancelPopup()">Salir</button>
  </div>
</div>

<!---this is for dowload the pdf--->
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>

<script>
  //-------------------------------------------------script for dowload facture--------------------------------------
  let currentFacturaId = '';

  async function mostrarPopupFactura(idFactura) {
    currentFacturaId = idFactura;
    document.getElementById('facturaLink').innerText = `https://pluspuntodeventa.com/api/factura/watch_facture.php?id=${idFactura}`;
    document.getElementById('facturaPopup').style.display = 'flex';
    await update_container_facture();

    document.getElementById('popCfdiBtnPdf').onclick = () => {
      descargarFactura(idFactura, 'pdf');
    };

    document.getElementById('popCfdiBtnXml').onclick = () => {
      descargarFactura(idFactura, 'xml');
    };

    document.getElementById('popCfdiBtnEmail').onclick = () => {
      descargarFactura(idFactura, 'html');
    };

    document.getElementById('popBtnCancell').onclick = () => {
      mostrarCancelPopup(idFactura);
    };
  }

  async function update_container_facture() {
      const id = currentFacturaId;
      const loadingOverlay = document.getElementById('loadingOverlay');
      loadingOverlay.style.display = 'flex';

      try {
          const response = await fetch('https://pluspuntodeventa.com/api/factura/descargar_factura.php', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify({ id, formato: 'html' })  // Asegúrate que el backend acepte 'formato'
          });

          const result = await response.json();

          if (!result.success || !result.base64) {
              throw new Error(result.message || 'Error desconocido.');
          }

          // Decodificamos base64 a texto HTML
          const decodedHtml = atob(result.base64);


          const datosFactura = extraer_datos_de_factura(decodedHtml);
          console.log(datosFactura);
          const nuevoHTML = renderizarFacturaHTML(datosFactura);

          // Mostramos el contenido HTML en el div "factura-html"
          const facturaDiv = document.getElementById('container-facture');
          facturaDiv.innerHTML = nuevoHTML;//decodedHtml;

      } catch (error) {
          console.error('❌ Error al obtener la factura HTML:', error);
          alert('❌ Error al obtener la factura:\n' + error.message);
      }

      // Ejemplo de uso:
      
      //actualizarFacturaHtml(datosFactura)

      loadingOverlay.style.display = 'none';
  }


/**-------------------------------------------------------------*/

function extraer_datos_de_factura(html) {
  // Parseamos el html a un documento DOM para manipularlo
  const parser = new DOMParser();
  const doc = parser.parseFromString(html, 'text/html');
  const imgLogo=get_path_logo()
  return {
    imgLogo,
    tipoYfolio: extraerTipoYFolio(doc), //falta codigo postal
    datosFiscales: extraerDatosFiscales(doc),
    InfoGlobalFactura: extraerInfoGlobalFactura(doc),
    TotalesYConceptos: extraerTotalesYConceptos(doc),
    DatosDePago:extraerDatosDePago(doc),
    FormaDePago:extraerDatosDePago2(doc),
    CadenaYSellos:extraerCadenaYSellos(doc),
    codigoPostalReceptor:obtenerCodigoPostalReceptor(doc),
    EfectoDelComprobante:obtenerEfectoDelComprobante(doc)
  };
}

function get_path_logo(){
  return 'https://mir-s3-cdn-cf.behance.net/projects/404/5f7a7768859071.Y3JvcCwzMDM3LDIzNzYsMzE1LDA.jpg'
}

// Utils robustos
function normalizarLineasDesdeHTML(el) {
  if (!el) return [];
  // 1) Tomar innerHTML (no textContent), 2) quitar comentarios, 3) convertir <br> a \n,
  // 4) quitar etiquetas, 5) normalizar espacios, 6) split por líneas y filtrar vacíos
  const html = el.innerHTML || '';
  const sinComentarios = html.replace(/<!--[\s\S]*?-->/g, '');
  const conSaltos = sinComentarios.replace(/<br\s*\/?>/gi, '\n');
  const sinTags = conSaltos.replace(/<[^>]*>/g, '');
  return sinTags
    .split('\n')
    .map(s => s.replace(/\s+/g, ' ').trim())
    .filter(Boolean);
}

/**
 * Devuelve el valor textual que aparece inmediatamente DESPUÉS de una etiqueta <b> cuyo
 * contenido (sin espacios) coincide con labelRegex, concatenando hasta el siguiente <br> o <b>.
 */
function valorDespuesDeEtiquetaB(container, labelRegex) {
  if (!container) return null;
  // Recorremos los <b> dentro del contenedor y buscamos el que matchee el label
  const bs = Array.from(container.querySelectorAll('b'));
  const b = bs.find(bEl => labelRegex.test(bEl.textContent.replace(/\s+/g, ' ').trim()));
  if (!b) return null;

  // Acumular texto entre b y el siguiente <br> o <b>
  let texto = '';
  let node = b.nextSibling;
  while (node) {
    // cortar si llega un <b> (otra etiqueta) o un <br>
    if (node.nodeType === Node.ELEMENT_NODE) {
      const tag = node.tagName ? node.tagName.toUpperCase() : '';
      if (tag === 'B' || tag === 'BR') break;
      // Si es otro elemento, añadimos su texto y seguimos
      texto += ' ' + node.textContent;
    } else if (node.nodeType === Node.TEXT_NODE) {
      texto += ' ' + node.textContent;
    }
    node = node.nextSibling;
  }
  const limpio = texto.replace(/\s+/g, ' ').trim();
  return limpio || null;
}

function extraerTipoYFolio(doc) {
  const result = {};

  // Tipo y folio
  const tipoFacturaEl = doc.querySelector('b.i-type');
  result.tipoFactura = tipoFacturaEl ? tipoFacturaEl.textContent.trim() : null;

  const folioEl = doc.querySelector('b.i-folio');
  if (folioEl) {
    const folioTexto = folioEl.textContent.replace(/\s+/g, ' ').trim();
    const folioMatch = folioTexto.match(/Folio:\s*(\d+)/i);
    result.folio = folioMatch ? folioMatch[1] : null;
  } else {
    result.folio = null;
  }

  // ===== Emisor =====
  const emisorP = doc.querySelector('p.lead.issuer');
  if (emisorP) {
    // Normalizamos líneas: deberían salir ["Emisor:", "ESCUELA KEMPER URGATE", "EKU9003173C9"]
    const lineas = normalizarLineasDesdeHTML(emisorP);

    // Nombre del emisor = primera línea que no sea "Emisor:" ni RFC (12/13 chars alfanum)
    let emisorNombre = null;
    for (const ln of lineas) {
      if (/^Emisor:$/i.test(ln)) continue;
      if (/^[A-Z0-9]{12,13}$/i.test(ln)) continue;
      if (ln) { emisorNombre = ln; break; }
    }
    result.emisorNombre = emisorNombre || null;

    // RFC emisor: buscar en span.rfc o en líneas por patrón de RFC (12/13)
    const rfcSpan = emisorP.querySelector('span.rfc');
    result.emisorRfc = rfcSpan
      ? rfcSpan.textContent.trim()
      : (lineas.find(x => /^[A-Z0-9]{12,13}$/i.test(x)) || null);
  } else {
    result.emisorNombre = null;
    result.emisorRfc = null;
  }

  // Datos emisor (lugar, régimen, efecto)
  const pDatosEmisor = doc.querySelector('div.columns.five > p:not(.lead)');
  if (pDatosEmisor) {
    const texto = pDatosEmisor.textContent.replace(/\s+/g, ' ');
    const lugarMatch = texto.match(/Lugar de Expedici[oó]n:\s*(\d+)/i);
    result.lugarExpedicion = lugarMatch ? lugarMatch[1] : null;

    const regimenMatch = texto.match(/R[eé]gimen Fiscal:\s*([\d]+ - [^]*?)(?:\s+Efecto|\s*$)/i);
    result.regimenFiscal = regimenMatch ? regimenMatch[1].trim() : null;

    const efectoMatch = texto.match(/Efecto del comprobante:\s*([A-Z] - [^\n\r]+)/i);
    result.efectoComprobante = efectoMatch ? efectoMatch[1].trim() : null;
  } else {
    result.lugarExpedicion = null;
    result.regimenFiscal = null;
    result.efectoComprobante = null;
  }

  // ===== Receptor =====
  const pReceptor = doc.querySelector('div.columns.four > p');
  if (pReceptor) {
    // Nombre del receptor: dentro del <b> superior, usar normalización por líneas
    const bEl = pReceptor.querySelector('b');
    let receptorNombre = null;
    if (bEl) {
      const lineasB = normalizarLineasDesdeHTML(bEl);
      // lineasB típicamente: ["Receptor:", "PUBLICO EN GENERAL", "XAXX010101000"]
      for (const ln of lineasB) {
        if (/^Receptor:$/i.test(ln)) continue;
        if (/^[A-Z0-9]{12,13}$/i.test(ln)) continue; // RFC
        if (ln) { receptorNombre = ln; break; }
      }
    }
    result.receptorNombre = receptorNombre || null;

    // RFC receptor: segundo span.rfc si existe, si no, detectar por patrón
    const rfcSpans = pReceptor.querySelectorAll('span.rfc');
    result.receptorRfc = rfcSpans.length >= 2
      ? rfcSpans[1].textContent.trim()
      : (Array.from(rfcSpans)[0]?.textContent.trim() ||
         (normalizarLineasDesdeHTML(pReceptor).find(x => /^[A-Z0-9]{12,13}$/i.test(x)) ?? null));

    // Código postal, Uso CFDI, Régimen: mejor leer con valorDespuesDeEtiquetaB
    result.receptorCodigoPostal = valorDespuesDeEtiquetaB(pReceptor, /^Código postal:$/i); //--------------esta falta
    result.receptorUsoCFDI     = valorDespuesDeEtiquetaB(pReceptor, /^Uso del CFDI:$/i);
    result.receptorRegimenFiscal = valorDespuesDeEtiquetaB(pReceptor, /^Regimen Fiscal:$/i);
  } else {
    result.receptorNombre = null;
    result.receptorRfc = null;
    result.receptorCodigoPostal = null;
    result.receptorUsoCFDI = null;
    result.receptorRegimenFiscal = null;
  }

  return result;
}

function extraerDatosFiscales(doc) {
  const result = {};

  // Buscamos el contenedor principal del bloque de impuestos
  const container = doc.querySelector('div.invoice-row.taxes > div.invoice-row');
  if (!container) {
    return {
      folioFiscal: null,
      fechaEmision: null,
      certificadoDigital: null,
    };
  }

  // Folio Fiscal (dentro del div.columns.five > p)
  const folioFiscalP = container.querySelector('div.columns.five > p');
  if (folioFiscalP) {
    // El texto está en el <p>, después del <b> y un <br>, así que tomamos el texto del nodo de texto después
    const folioTexto = folioFiscalP.childNodes;
    // Normalmente el texto que queremos está después del <br>, o en el segundo nodo de texto
    // Por eso buscamos el nodo de texto que no sea vacío ni el <b>
    let folioFiscal = null;
    folioTexto.forEach(node => {
      if (node.nodeType === Node.TEXT_NODE) {
        const txt = node.textContent.trim();
        if (txt.length > 0) folioFiscal = txt;
      }
    });
    result.folioFiscal = folioFiscal || null;
  } else {
    result.folioFiscal = null;
  }

  // Fecha / Hora de Emisión (div.columns.three > p)
  const fechaP = container.querySelector('div.columns.three > p');
  if (fechaP) {
    let fechaEmision = null;
    fechaP.childNodes.forEach(node => {
      if (node.nodeType === Node.TEXT_NODE) {
        const txt = node.textContent.trim();
        if (txt.length > 0) fechaEmision = txt;
      }
    });
    result.fechaEmision = fechaEmision || null;
  } else {
    result.fechaEmision = null;
  }

  // Número de Certificado Digital (div.columns.four > p)
  const certP = container.querySelector('div.columns.four > p');
  if (certP) {
    let certificadoDigital = null;
    certP.childNodes.forEach(node => {
      if (node.nodeType === Node.TEXT_NODE) {
        const txt = node.textContent.trim();
        if (txt.length > 0) certificadoDigital = txt;
      }
    });
    result.certificadoDigital = certificadoDigital || null;
  } else {
    result.certificadoDigital = null;
  }

  return result;
}

function extraerInfoGlobalFactura(doc) {
  const result = {};

  // Contenedor principal (div.invoice-row) que contiene los bloques de Exportación e Información Global
  const container = doc.querySelector('div.invoice-row');

  if (!container) {
    return {
      exportacion: null,
      anio: null,
      mes: null,
      periodicidad: null,
    };
  }

  // Exportación (div.columns.four > p que tiene <b>Exportacion:</b>)
  const exportacionP = Array.from(container.querySelectorAll('div.columns.four > p')).find(p =>
    p.querySelector('b')?.textContent.trim().toLowerCase().startsWith('exportacion')
  );
  if (exportacionP) {
    // El texto que queremos está después del <br>
    let exportacion = null;
    exportacionP.childNodes.forEach(node => {
      if (node.nodeType === Node.TEXT_NODE) {
        const txt = node.textContent.trim();
        if (txt.length > 0) exportacion = txt;
      }
    });
    result.exportacion = exportacion || null;
  } else {
    result.exportacion = null;
  }

  // Información Global (div.columns.four > p que contiene 'Año:', 'Mes:' y 'Periodicidad:')
  const infoGlobalP = Array.from(container.querySelectorAll('div.columns.four > p')).find(p =>
    p.textContent.includes('Año:') && p.textContent.includes('Mes:') && p.textContent.includes('Periodicidad:')
  );

  if (infoGlobalP) {
    const text = infoGlobalP.textContent.replace(/\u00A0/g, ' ').replace(/\s+/g, ' ').trim();

    // Regex para extraer Año, Mes y Periodicidad
    const anioMatch = text.match(/Año:\s*(\d{4})/i);
    const mesMatch = text.match(/Mes:\s*([A-Za-záéíóúñ]+)/i);
    const periodicidadMatch = text.match(/Periodicidad:\s*([A-Za-z]+)/i);

    result.anio = anioMatch ? anioMatch[1] : null;
    result.mes = mesMatch ? mesMatch[1] : null;
    result.periodicidad = periodicidadMatch ? periodicidadMatch[1] : null;
  } else {
    result.anio = null;
    result.mes = null;
    result.periodicidad = null;
  }

  return result;
}

function extraerTotalesYConceptos(doc) {
  const resultado = {
    conceptos: [],
    subtotal: null,
    impuestos: [],
    totalLetra: null,
    total: null,
    moneda: null,
  };

  // Buscar la tabla de conceptos (productos)
  const tablaConceptos = doc.querySelector('div.invoice-row > table.invoice-table');
  if (!tablaConceptos) return resultado;

  // Saltar la fila de encabezados (primer <tr>)
  const filas = Array.from(tablaConceptos.querySelectorAll('tr')).slice(1);

  filas.forEach(fila => {
    // Si la fila tiene celdas, asumimos que es un concepto/producto
    const celdas = fila.querySelectorAll('td');
    if (celdas.length >= 6) {
      const producto = celdas[0].textContent.trim();
      const cantidad = celdas[1].textContent.trim();
      const unidad = celdas[2].textContent.trim();
      const conceptoHtml = celdas[3].innerHTML.trim(); // Contiene también <br> y etiquetas para impuestos
      const precioUnitario = celdas[4].textContent.trim();
      const importe = celdas[5].textContent.trim();

      // Extraer detalle de traslados dentro del concepto (ej. IVA, base, tasa, importe)
      // Buscamos etiquetas con clase smaller-text dentro del concepto (puede haber varias)
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = conceptoHtml;
      const trasladosElems = tempDiv.querySelectorAll('span.smaller-text');

      const traslados = [];
      trasladosElems.forEach(span => {
        // El texto es tipo "IVA: 002, Base: $300.00,"
        const texto = span.textContent.trim().replace(/,$/, '');
        traslados.push(texto);
      });

      resultado.conceptos.push({
        producto,
        cantidad,
        unidad,
        conceptoTexto: tempDiv.textContent.trim(), // texto plano con todo
        precioUnitario,
        importe,
        traslados
      });
    }
  });

  // Buscar subtotal e impuestos (tabla dentro de div.invoice-row.taxes .table-totals)
  const tablaTotales = doc.querySelector('div.invoice-row.taxes .table-totals table.invoice-table');
  if (tablaTotales) {
    const filasTotales = tablaTotales.querySelectorAll('tr');

    filasTotales.forEach(fila => {
      const celdas = fila.querySelectorAll('td');
      if (celdas.length === 2) {
        const label = celdas[0].textContent.trim();
        const valor = celdas[1].textContent.trim();

        if (/subtotal/i.test(label)) {
          resultado.subtotal = valor;
        } else if (/total/i.test(label)) {
          resultado.total = valor;
        } else if (/iva|impuesto/i.test(label)) {
          resultado.impuestos.push({ impuesto: label, importe: valor });
        }
      }
    });
  }

  // Total en número y letra (tabla final)
  const tablaFinal = doc.querySelector('div.invoice-row > table.invoice-table.u-full-width');
  if (tablaFinal) {
    // Moneda está en la primera celda de la primera fila
    const monedaTd = tablaFinal.querySelector('tr > td:first-child');
    resultado.moneda = monedaTd ? monedaTd.textContent.trim() : null;

    // Total en letras
    const totalLetraTd = tablaFinal.querySelector('td.payment-in-words b');
    resultado.totalLetra = totalLetraTd ? totalLetraTd.textContent.trim() : null;

    // Total numérico
    const totalNumTd = tablaFinal.querySelector('td.total.currency.totals b');
    resultado.total = totalNumTd ? totalNumTd.textContent.trim() : resultado.total;
  }

  return resultado;
}

function extraerDatosDePago(doc) {
  const result = {
    formaPago: null,
    metodoPago: null,
    banco: null,
    cuenta: null,
    condicionesPago: null,
  };

  // Buscamos el contenedor principal que tenga el bloque Datos de Pago
  // En tu ejemplo está en un div.invoice-row > div.invoice-row > varios div.column.one-fifth
  const contenedorPago = doc.querySelector('div.invoice-row > div.invoice-row');
  if (!contenedorPago) return result;

  const columnas = contenedorPago.querySelectorAll('div.column.one-fifth');

  if (columnas.length >= 1) {
    // Forma de Pago
    const fpP = columnas[0].querySelector('p');
    if (fpP) {
      // El texto que interesa está después del <b> y el <br>
      const textos = Array.from(fpP.childNodes).filter(n => n.nodeType === Node.TEXT_NODE).map(n => n.textContent.trim()).filter(t => t);
      result.formaPago = textos.length > 0 ? textos[0] : null;
    }
  }

  if (columnas.length >= 2) {
    // Método de Pago
    const mpP = columnas[1].querySelector('p');
    if (mpP) {
      const textos = Array.from(mpP.childNodes).filter(n => n.nodeType === Node.TEXT_NODE).map(n => n.textContent.trim()).filter(t => t);
      result.metodoPago = textos.length > 0 ? textos[0] : null;
    }
  }

  if (columnas.length >= 3) {
    // Banco (puede estar vacío)
    const bancoP = columnas[2].querySelector('p');
    result.banco = bancoP ? bancoP.textContent.trim() || null : null;
  }

  if (columnas.length >= 4) {
    // Cuenta (puede estar vacío)
    const cuentaP = columnas[3].querySelector('p');
    result.cuenta = cuentaP ? cuentaP.textContent.trim() || null : null;
  }

  if (columnas.length >= 5) {
    // Condiciones de Pago (puede estar vacío)
    const condicionesP = columnas[4].querySelector('p');
    result.condicionesPago = condicionesP ? condicionesP.textContent.trim() || null : null;
  }

  return result;
}





function valorEnParrafoDespuesDeB(pEl, labelRegex) {
  if (!pEl) return null;

  // Buscar el <b> cuyo texto matchee el label (tolerante a espacios)
  const b = Array.from(pEl.querySelectorAll('b')).find(bEl => {
    const t = limpiarTexto(bEl.textContent);
    return labelRegex.test(t);
  });
  if (!b) return null;

  // Intento 1: recorrer hermanos después del <b>, hasta <br> o otro <b>
  let txt = '';
  let node = b.nextSibling;
  while (node) {
    if (node.nodeType === Node.COMMENT_NODE) { node = node.nextSibling; continue; }
    if (node.nodeType === Node.ELEMENT_NODE) {
      const tag = node.tagName ? node.tagName.toUpperCase() : '';
      if (tag === 'B' || tag === 'BR') break; // fin del valor
      txt += ' ' + node.textContent;
    } else if (node.nodeType === Node.TEXT_NODE) {
      txt += ' ' + node.textContent;
    }
    node = node.nextSibling;
  }
  const limpio = limpiarTexto(txt);
  if (limpio) return limpio;

  // Intento 2: normalizar a líneas y tomar la línea siguiente al label
  const lineas = normalizarLineasDesdeHTMLDeP(pEl);
  const idx = lineas.findIndex(l => labelRegex.test(l));
  if (idx !== -1 && idx + 1 < lineas.length) {
    return lineas[idx + 1] || null;
  }

  return null;
}

/**
 * Obtiene el Código Postal del bloque del Receptor.
 * Incluye un Fallback #2 basado en innerHTML por si el parser devuelve algo raro.
 */
function obtenerCodigoPostalReceptor(doc) {
  // 1) Tomar el <p> del bloque receptor
  const pReceptor = doc.querySelector('div.columns.four > p');
  if (!pReceptor) return null;

  // 2) Intento principal: leer el valor después del <b>Código postal:</b>
  //    (acepta posibles espacios / variaciones de mayúsculas / NBSP)
  const cpText = valorEnParrafoDespuesDeB(pReceptor, /^C[óo]digo postal:$/i);
  if (cpText) {
    const m = cpText.match(/(\d{4,6})/); // CP MX normalmente 5 dígitos; dejamos 4-6 por tolerancia
    if (m) return m[1];
  }

  // 3) Fallback #1: usar textContent completo del <p> y regex
  const textoPlano = limpiarTexto(pReceptor.textContent);
  let m = textoPlano.match(/CÃ³digo postal:\s*(\d{4,6})/i);
  if (m) return m[1];

  // 4) Fallback #2: usar innerHTML para capturar justo después del </b>
  //    Reemplazamos entidades y NBSP, luego buscamos </b> ... <br>
  const html = (pReceptor.innerHTML || '')
    .replace(/&nbsp;/gi, ' ')
    .replace(/&oacute;|&#243;|&\#x00F3;/gi, 'ó') // asegurar "Código"
    .replace(/<!--[\s\S]*?-->/g, '');

  // Buscar el segmento <b>...Código postal...</b> [valor] <br
  m = html.match(/<b[^>]*>\s*C[óo]digo\s+postal:\s*<\/b>\s*([^\n<]+?)(?:<br|$)/i);
  if (m) {
    const val = limpiarTexto(m[1]);
    const d = val.match(/(\d{4,6})/);
    if (d) return d[1];
  }

  // 5) Como último recurso, normalizar líneas (ya sin etiquetas) y buscar línea con "Código postal:"
  const lineas = normalizarLineasDesdeHTMLDeP(pReceptor);
  const idx = lineas.findIndex(l => /C[óo]digo postal:/i.test(l));
  if (idx !== -1) {
    // La línea puede incluir el número (p.ej. "Código postal: 42501")
    const linea = lineas[idx];
    const mm = linea.match(/C[óo]digo postal:\s*(\d{4,6})/i);
    if (mm) return mm[1];
    // O puede estar en la siguiente línea
    const next = lineas[idx + 1];
    if (next) {
      const nn = next.match(/(\d{4,6})/);
      if (nn) return nn[1];
    }
  }

  return null;
}

//---------
function limpiarTexto(s) {
  return (s || '').replace(/\s+/g, ' ').trim();
}



function normalizarLineasDesdeHTMLDeP(pEl) {
  if (!pEl) return [];
  const html = pEl.innerHTML || '';
  const sinComentarios = html.replace(/<!--[\s\S]*?-->/g, '');
  const conSaltos = sinComentarios.replace(/<br\s*\/?>/gi, '\n');
  const sinTags = conSaltos.replace(/<[^>]*>/g, '');
  return sinTags
    .split('\n')
    .map(l => limpiarTexto(l))
    .filter(Boolean);
}

/**
 * Extrae el valor dentro del MISMO <p> que aparece después de un <b> cuyo texto coincide con labelRegex.
 * 1) Intenta caminando nodos hermano por hermano hasta encontrar el texto previo al próximo <br> o <b>.
 * 2) Si no encuentra, normaliza a líneas y toma la línea siguiente al label.
 */
function valorEnParrafoDespuesDeB(pEl, labelRegex) {
  if (!pEl) return null;

  // Buscar el <b> con el label
  const b = Array.from(pEl.querySelectorAll('b')).find(bEl => {
    const t = limpiarTexto(bEl.textContent);
    return labelRegex.test(t);
  });
  if (!b) return null;

  // --- Intento 1: recorrer nodos dentro del mismo <p> después del <b> ---
  let txt = '';
  let node = b.nextSibling;
  while (node) {
    if (node.nodeType === Node.COMMENT_NODE) { node = node.nextSibling; continue; }
    if (node.nodeType === Node.ELEMENT_NODE) {
      const tag = node.tagName ? node.tagName.toUpperCase() : '';
      if (tag === 'B' || tag === 'BR') break;                 // fin del valor
      txt += ' ' + node.textContent;
    } else if (node.nodeType === Node.TEXT_NODE) {
      txt += ' ' + node.textContent;
    }
    node = node.nextSibling;
  }
  const limpio = limpiarTexto(txt);
  if (limpio) return limpio;

  // --- Intento 2: normalizar a líneas y tomar la siguiente al label ---
  const lineas = normalizarLineasDesdeHTMLDeP(pEl);
  const idx = lineas.findIndex(l => labelRegex.test(l));
  if (idx !== -1 && idx + 1 < lineas.length) {
    return lineas[idx + 1] || null;
  }

  return null;
}

// --- Función principal robusta ---
function extraerDatosDePago2(doc) {
  const res = {
    formaPago: null,
    metodoPago: null,
    banco: null,
    cuenta: null,
    condicionesPago: null,
  };

  // Buscar TODOS los <p> del documento (sin depender de estructura)
  const parrafos = Array.from(doc.querySelectorAll('p'));
  if (parrafos.length === 0) return res;

  // Buscamos en cualquier <p> que tenga el label indicado
  for (const p of parrafos) {
    // Forma de Pago
    if (res.formaPago === null) {
      const v = valorEnParrafoDespuesDeB(p, /^Forma de Pago:$/i);
      if (v) res.formaPago = v;
    }
    // Método de Pago (acepta acento real o entidad HTML ya decodificada por el parser)
    if (res.metodoPago === null) {
      const v = valorEnParrafoDespuesDeB(p, /^M[eé]todo de Pago:$/i);
      if (v) res.metodoPago = v;
    }
    // Banco
    if (res.banco === null) {
      const v = valorEnParrafoDespuesDeB(p, /^Banco:$/i);
      if (v) res.banco = v;
    }
    // Cuenta
    if (res.cuenta === null) {
      const v = valorEnParrafoDespuesDeB(p, /^Cuenta:$/i);
      if (v) res.cuenta = v;
    }
    // Condiciones de Pago
    if (res.condicionesPago === null) {
      const v = valorEnParrafoDespuesDeB(p, /^Condiciones de Pago:$/i);
      if (v) res.condicionesPago = v;
    }
  }

  return res;
}



function obtenerEfectoDelComprobante(doc) {
  // 1) Ubicar el <p> de "Datos Emisor" (el que NO es .lead dentro de div.columns.five)
  const pDatosEmisor = doc.querySelector('div.columns.five > p:not(.lead)');
  if (!pDatosEmisor) return null;

  // 2) Intento principal: leer el valor justo después de <b>Efecto del comprobante:</b>
  let valor = valorEnParrafoDespuesDeB(pDatosEmisor, /^Efecto del comprobante:$/i);
  if (valor) return valor;

  // 3) Fallback #1: regex sobre textContent (por si el parser aplanó el DOM)
  const textoPlano = limpiarTexto(pDatosEmisor.textContent);
  let m = textoPlano.match(/Efecto del comprobante:\s*([A-Z]\s*-\s*[^\n\r]+)/i);
  if (m) return limpiarTexto(m[1]);

  // 4) Fallback #2: buscar en innerHTML justo después del </b> de ese label
  const html = (pDatosEmisor.innerHTML || '')
    .replace(/&nbsp;/gi, ' ')
    .replace(/<!--[\s\S]*?-->/g, '');
  m = html.match(/<b[^>]*>\s*Efecto del comprobante:\s*<\/b>\s*([^<\n\r]+)(?:<br|$)/i);
  if (m) return limpiarTexto(m[1]);

  // 5) Último recurso: normalizar a líneas y tomar la siguiente a la del label
  const lineas = normalizarLineasDesdeHTMLDeP(pDatosEmisor);
  const idx = lineas.findIndex(l => /^Efecto del comprobante:$/i.test(l));
  if (idx !== -1 && idx + 1 < lineas.length) {
    return lineas[idx + 1] || null;
  }

  return null;
}




























function extraerCadenaYSellos(doc) {
  const resultado = {
    cadenaOriginal: null,
    selloDigitalCFDI: null,
    selloDigitalSAT: null,
    fechaHoraCertificacion: null,
    numeroSerieCertificadoSAT: null,
    rfcPAC: null,
  };

  // Contenedor donde están cadena y sellos (div.columns.smaller-text.break-words)
  const cadenaSellosDiv = doc.querySelector('div.columns.smaller-text.break-words');
  if (cadenaSellosDiv) {
    // Extraemos textos que están en los <p> que siguen a cada <b> correspondiente
    // La estructura es: <b>Texto</b> seguido de <p>...</p>
    // El orden es: Cadena Original, Sello Digital CFDI, Sello Digital SAT
    const bs = cadenaSellosDiv.querySelectorAll('b');
    const ps = cadenaSellosDiv.querySelectorAll('p');

    if (bs.length >= 3 && ps.length >= 3) {
      resultado.cadenaOriginal = ps[0].textContent.trim() || null;
      resultado.selloDigitalCFDI = ps[1].textContent.trim() || null;
      resultado.selloDigitalSAT = ps[2].textContent.trim() || null;
    }
  }

  // Contenedor de Fecha y Número de Certificado del CFDI (div.invoice-row.smaller-text)
  const certRow = doc.querySelector('div.invoice-row.smaller-text');
  if (certRow) {
    const columnas = certRow.querySelectorAll('div.columns.three');
    if (columnas.length >= 3) {
      // Fecha / Hora de Certificación
      const fechaSpan = columnas[0].querySelector('span.break-words');
      resultado.fechaHoraCertificacion = fechaSpan ? fechaSpan.textContent.trim() : null;

      // Número de Serie Certificado del SAT
      const numSerieSpan = columnas[1].querySelector('span.break-words');
      resultado.numeroSerieCertificadoSAT = numSerieSpan ? numSerieSpan.textContent.trim() : null;

      // RFC del PAC
      const rfcPACSpan = columnas[2].querySelector('span.break-words');
      resultado.rfcPAC = rfcPACSpan ? rfcPACSpan.textContent.trim() : null;
    }
  }

  return resultado;
}

function renderizarFacturaHTML(datos) {
  // Extraemos de datos para facilitar acceso
  const {
    imgLogo,
    tipoYfolio,
    datosFiscales,
    InfoGlobalFactura,
    TotalesYConceptos,
    DatosDePago,
    CadenaYSellos,
    FormaDePago,
    codigoPostalReceptor,
    EfectoDelComprobante
  } = datos;

  // Construimos filas de conceptos/productos
  const filasConceptos = (TotalesYConceptos?.conceptos || []).map(concepto => {
    // Para mostrar impuestos en una celda (ej. "IVA 16% = $16.00"), juntamos los traslados
    const impuestosStr = concepto.traslados.length > 0
      ? concepto.traslados.join(', ')
      : '';

    return `
      <tr>
        <td>${concepto.producto}</td>
        <td>${concepto.conceptoTexto}</td>
        <td>${concepto.unidad}</td>
        <td class="text-right">${concepto.cantidad}</td>
        <td class="text-right">${concepto.precioUnitario}</td>
        <td class="text-right">${concepto.importe}</td>
        <td>${impuestosStr}</td>
        <td class="text-right">${concepto.importe /* aquí puedes ajustar si tienes un total distinto */}</td>
      </tr>
    `;
  }).join('');

  // Obtener UUID y Fecha de emisión del objeto datosFiscales (o donde lo tengas)
  // Aquí deberás ajustar según cómo estructuraste la extracción
  const uuid = datosFiscales?.folioFiscal || 'N/A';
  const fechaEmision = datosFiscales?.fechaEmision || 'N/A';
  const tipoComprobante = tipoYfolio?.tipoFactura || 'N/A';
  const lugarExpedicion = tipoYfolio?.lugarExpedicion || 'N/A';

  // Forma y método de pago
  const formaPago = FormaDePago?.formaPago || 'N/A';
  const metodoPago = FormaDePago?.metodoPago || 'N/A';

  // Datos emisor y receptor
  const emisorRFC = tipoYfolio?.emisorRfc || 'N/A';
  const emisorNombre = tipoYfolio?.emisorNombre || 'N/A';
  const regimenFiscal = tipoYfolio?.regimenFiscal || 'N/A';

  const receptorRFC = tipoYfolio?.receptorRfc || 'N/A';
  const receptorNombre = tipoYfolio?.receptorNombre || 'N/A';
  const usoCFDI = tipoYfolio?.receptorUsoCFDI || 'N/A';
  const regimenFiscalReceptor = tipoYfolio?.receptorRegimenFiscal || 'N/A';
  const codigoPostal = codigoPostalReceptor || 'N/A'; //-falta

  // Totales
  const subtotal = TotalesYConceptos?.subtotal || 'N/A';
  const impuestos = TotalesYConceptos?.impuestos || [];
  const totalLetra = TotalesYConceptos?.totalLetra || 'N/A';
  const total = TotalesYConceptos?.total || 'N/A';

  // Para mostrar impuestos en Totales
  const filasImpuestos = impuestos.map(imp => `
    <tr>
      <td><strong>${imp.impuesto}</strong></td>
      <td>${imp.importe}</td>
    </tr>
  `).join('');

  // QR y sellos (muestra un QR con el UUID y el sello digital en texto)
  const qrURL = `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=UUID:${uuid}`;
  const selloDigitalCortado = (CadenaYSellos?.selloDigitalCFDI || '').slice(0, 50) + '...';
  const cadenaOriginal = CadenaYSellos?.cadenaOriginal || '';

  // Finalmente, retornamos el string completo con template literals
  return `
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Vista previa de factura - CFDI 4.0</title>
  <style>
    /* aquí va el CSS que mostraste (puedes moverlo a un CSS externo si prefieres) */
    :root {
      --color-principal: #0669D0;
      --color-texto: #333;
      --color-fondo: #f9f9f9;
      --color-borde: #ccc;
    }

    body {
      font-family: 'Segoe UI', sans-serif;
      background-color: var(--color-fondo);
      padding: 40px;
      color: var(--color-texto);
      position: relative;
    }

    .factura {
      background: white;
      padding: 40px;
      max-width: 900px;
      margin: 0 auto;
      border: 1px solid var(--color-borde);
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
      position: relative;
      z-index: 1;
    }

    .encabezado {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
    }

    .logo img {
      max-height: 80px;
    }

    .titulo {
      text-align: right;
    }

    .titulo .title-cfdi{
      font-size: 24px;
      color: var(--color-principal);
      margin: 0;
    }

    .subtitulo {
      font-size: 14px;
      color: #888;
    }

    .marca-agua {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) rotate(-30deg);
      font-size: 70px;
      color: rgba(22, 73, 255, 0.1);
      font-weight: bold;
      z-index: 0;
      pointer-events: none;
      user-select: none;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
      font-size: 14px;
    }

    th {
      background-color: var(--color-principal);
      color: white;
      padding: 8px;
      text-align: left;
    }

    td {
      border: 1px solid var(--color-borde);
      padding: 8px;
    }

    .text-right {
      text-align: right;
    }

    .totales td {
      border: none;
      text-align: right;
      padding: 5px;
      font-size: 15px;
    }

    .info-section .title-cfdi{
      color: var(--color-principal);
      display: block;
      text-align: left;   /* por si hereda otro alineado */
      margin: 0;          /* elimina el margen propio del h3 */
      padding: 0;
      font-weight: bold;
      font-size: 1rem;
    }

    .info-section td {
      border: none;
      padding: 4px 8px;
    }

    .note{
      font-size: 12px;
      color: #666;
      margin-top: 30px;
      text-align: center;
    }

    .qr-sello {
      display: flex;
      justify-content: space-between;
      margin-top: 30px;
      gap: 20px;
    }

    .qr-sello img {
      max-width: 150px;
      height: auto;
    }

    .qr-sello pre {
      font-size: 10px;
      white-space: pre-wrap;
      word-wrap: break-word;
      background: #f4f4f4;
      padding: 10px;
      border: 1px solid #ddd;
      flex: 1;
    }

    .total-number{
      text-align: right;
      margin: 0;
      padding: 0;
    }

    .text-left{
      text-align: left;
      margin: 0;
      padding: 0;
    }

    .info-cfdi-sat{
      width:100%;
    }
  </style>
</head>
<body>
  <div class="factura">
    <div class="encabezado">
      <div class="logo">
        <img src=${imgLogo} alt="Logo Empresa">
      </div>
      <div class="titulo">
        <h1 class='title-cfdi'>Factura CFDI 4.0</h1>
        <div class="subtitulo">Folio ${tipoYfolio.folio}</div>
      </div>
    </div>
    <div class="info-section">
      <h3 class='title-cfdi'>Información fiscal</h3>
      <table>
        <tr>
          <td><strong>Folio fiscal (UUID):</strong> ${uuid}</td>
          <td><strong>Fecha de emisión:</strong> ${fechaEmision}</td>
        </tr>
        <tr>
          <td><strong>Tipo de comprobante:</strong> ${tipoComprobante}</td>
          <td><strong>Lugar de expedición:</strong> ${lugarExpedicion}</td>
        </tr>
        <tr>
          <td><strong>Forma de pago:</strong> ${formaPago}</td>
          <td><strong>Método de pago:</strong> ${metodoPago}</td>
        </tr>
      </table>
    </div>

    <div class="info-section">
      <h3 class='title-cfdi'>Emisor</h3>
      <table>
        <tr>
          <td><strong>RFC:</strong> ${emisorRFC}</td>
          <td><strong>Nombre o Razón Social:</strong> ${emisorNombre}</td>
        </tr>
        <tr>
          <td><strong>Régimen Fiscal:</strong> ${regimenFiscal}</td>
        </tr>
        <tr>
          <td><strong>Efecto del comprobante:</strong> ${EfectoDelComprobante}</td>
        </tr>
      </table>
    </div>

    <div class="info-section">
      <h3 class='title-cfdi'>Receptor</h3>
      <table>
        <tr>
          <td><strong>RFC:</strong> ${receptorRFC}</td>
          <td><strong>Nombre:</strong> ${receptorNombre}</td>
        </tr>
        <tr>
          <td><strong>Uso del CFDI:</strong> ${usoCFDI}</td>
          <td><strong>Régimen Fiscal:</strong> ${regimenFiscalReceptor}</td>
          <td><strong>Código Postal:</strong> ${codigoPostal}</td>
        </tr>
      </table>
    </div>

    <div class="info-section">
      <h3 class='title-cfdi'>Conceptos</h3>
      <table>
        <thead>
          <tr>
            <th>Clave SAT</th>
            <th>Descripción</th>
            <th>Unidad</th>
            <th>Cantidad</th>
            <th>Precio Unitario</th>
            <th>Subtotal</th>
            <th>Impuestos</th>
            <th>Total</th>
          </tr>
        </thead>
        <tbody>
          ${filasConceptos}
        </tbody>
      </table>
    </div>

    <div class="info-section">
      <h3 class='title-cfdi'>Totales</h3>
      <table class="totales">
        <tr>
          <td><strong>Subtotal:</strong></td>
          <td>${subtotal}</td>
        </tr>
        ${filasImpuestos}
        <tr>
          <td><strong>Total:</strong></td>
          <td><strong>${total}</strong></td>
        </tr>
      </table>
    </div>
    <h6 class='total-number'>${TotalesYConceptos.totalLetra}</h6>
    <br>

    <div class='note text-left'>
      numero serie certificado SAT: ${CadenaYSellos.numeroSerieCertificadoSAT}<br>
      rfc PAC: ${CadenaYSellos.rfcPAC}<br>
      certificado digital: ${datosFiscales.certificadoDigital}<br>
      folio fiscal: ${datosFiscales.folioFiscal}<br>
    </div>
    <div class="qr-sello text-left">
      <div class="qr">
        <img src="${qrURL}" alt="QR CFDI">
      </div>
      <pre>

<div class='info-cfdi-sat'>
<b>Cadena original del complemento:</b>
${cadenaOriginal}

<b>Sello digital CFDI:</b>
${CadenaYSellos.selloDigitalCFDI}

<b>Sello Digital del SAT:</b>
${CadenaYSellos.selloDigitalSAT} 
</div>

      </pre>
    </div>
    <div class='text-left'>
      <label>Ver más detalles de la factura aquí</label><br>
      <a href="${document.getElementById('facturaLink').textContent}" target="_blank">${document.getElementById('facturaLink').textContent}<a/>
    </div>
    <br>
    <div id="leyenda" style="
      text-align: center;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      font-size: 13px;
      color: #777;
      margin-top: 40px;
      letter-spacing: 0.4px;
    ">
      <span style="color: #1649FF; font-weight: 600;">Powered by</span>
      <a href="https://pluspuntodeventa.com" target="_blank" style="
        color: #1649FF;
        text-decoration: none;
        font-weight: 600;
        transition: color 0.3s ease;
      " onmouseover="this.style.color='#0f3bd1'" onmouseout="this.style.color='#1649FF'">
        PLUS Punto de Venta
      </a>
    </div>
  </div>
</body>
</html>
  `;
}
/*--------------------------------------------------------------**/





























  function cerrarPopup() {
    document.getElementById('facturaPopup').style.display = 'none';
  }

  function imprimirFactura() {
      const contenido = document.getElementById('container-facture').innerHTML;

      const ventana = window.open('', '_blank', 'width=800,height=600');
      ventana.document.write(`
        <html>
          <head>
            <title>Factura</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; }
              table { border-collapse: collapse; width: 100%; }
              th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
            </style>
          </head>
          <body>
            ${contenido}
            <script>
              window.onload = function() {
                window.print();
                window.onafterprint = function() {
                  window.close();
                };
              };
            <\/script>
          </body>
        </html>
      `);
      ventana.document.close();
  }

  function enviarPorEmail(id) {
    currentFacturaId=id;
    abrirModalEmail()
  }

  // Función que usarás para guardar en base de datos
  function guardar_facture(idFactura) {
    console.log("Guardando factura con ID:", idFactura);
    // Aquí tu fetch o lógica para guardar la factura
  }

  // Cerrar popup
  /*
  document.getElementById('popCfdiCloseBtn').onclick = () => {
    document.querySelector('.pop-cfdi-overlay').style.display = 'none';
  };
  */
  function download_pdf_with_library(){
    const elemento = document.getElementById('container-facture');

    const opciones = {
      margin:       0, // márgenes en pulgadas
      filename:     'factura.pdf',
      image:        { type: 'jpeg', quality: 0.98 },
      html2canvas:  { scale: 2 }, // mejor resolución
      jsPDF:        { unit: 'in', format: 'a4', orientation: 'portrait' }
    };

    html2pdf().set(opciones).from(elemento).save();
  }

  async function descargarFactura(id, formato) {
    if(formato=='pdf'){
      //download_pdf_with_library();
      //return;
    }

    const loadingOverlay = document.getElementById('loadingOverlay');
    loadingOverlay.style.display = 'flex';

    try {
      const response = await fetch('https://pluspuntodeventa.com/api/factura/descargar_factura.php', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ id, formato })
      });

      const result = await response.json();

      if (!result.success || !result.base64) {
        throw new Error(result.message || 'Error desconocido.');
      }

      const byteCharacters = atob(result.base64);
      const byteNumbers = Array.from(byteCharacters).map(c => c.charCodeAt(0));
      const byteArray = new Uint8Array(byteNumbers);
      const blob = new Blob([byteArray], { type: result.mime });

      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = result.filename || `factura_${id}.${formato}`;
      document.body.appendChild(a);
      a.click();
      a.remove();
      URL.revokeObjectURL(url);

    } catch (error) {
      console.error('❌ Error al descargar la factura:', error);
      alert('❌ Error al descargar la factura:\n' + error.message);
    }

    loadingOverlay.style.display = 'none';
  }
</script>
<script>
let facturaIdCancelar = '';

function mostrarCancelPopup(idFactura) {
  facturaIdCancelar = idFactura;
  document.getElementById('cancelPopup').style.display = 'flex';
}

function cerrarCancelPopup() {
  document.getElementById('cancelPopup').style.display = 'none';
  document.getElementById('uuidField').style.display = 'none';
  document.getElementById('uuidReplacement').value = '';
}

function toggleUUIDField() {
  const motivo = document.getElementById('cancelMotive').value;
  document.getElementById('uuidField').style.display = motivo === '01' ? 'block' : 'none';
}

async function enviarCancelacion() {
  //first we will confirm the cancell 
  if (await questionMessage('¿Cancelar factura?', '¿Estás seguro de que deseas anular esta factura? Esta acción no se puede deshacer.')) {
    const motive = document.getElementById('cancelMotive').value;
    const uuidReplacement = document.getElementById('uuidReplacement').value.trim();

    const payload = {
      id: facturaIdCancelar,
      motive,
      ...(motive === '01' && uuidReplacement ? { uuidReplacement } : {})
    };

    try {
      const res = await fetch('https://pluspuntodeventa.com/api/factura/cancelar_factura.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const data = await res.json();
      if (data.success) {
        cerrarCancelPopup();
        confirmationMessage('✅ Cancelación exitosa', `Factura cancelada correctamente (estado: ${data.status}).`);
        reiniciarPaginaYFiltrar(); // recargar lista si quieres
      } else {
        errorMessage("❌ Error",data.message)
      }
    } catch (err) {
      console.error(err);
      errorMessage("❌ Error al cancelar factura",err.message)
    }
  }
}
</script>


{{>tickets/sendEmail}}