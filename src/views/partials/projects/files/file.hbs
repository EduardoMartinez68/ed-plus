<style>
    /* Variables de CSS */
    :root {
        --bg-color: #f4f6f8;
        --card-bg: #ffffff;
        --text-color: #333333;
        --secondary-text: #666666;
        --border-color: #e0e0e0;
        --shadow-color: rgba(0, 0, 0, 0.1);
        --font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        --transition-speed: 0.3s;
        --sidebar-width: 250px;
    }

    .projects-team-container {
        display: flex;
        flex: 1;
        height: 100%;
    }

    /* Sidebar */
    .projects-team-sidebar {
        width: var(--sidebar-width);
        background-color: var(--card-bg);
        border-right: 1px solid var(--border-color);
        box-shadow: 2px 0 5px var(--shadow-color);
        display: flex;
        flex-direction: column;
        padding: 20px;
        overflow-y: auto;
        transition: transform var(--transition-speed);
    }

    .projects-team-sidebar h2 {
        margin-bottom: 20px;
        color: var(--color-company);
        text-align: center;
    }

    .projects-team-folders {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .projects-team-folder {
        background-color: var(--card-bg);
        padding: 10px 15px;
        border-radius: 6px;
        box-shadow: 0 2px 5px var(--shadow-color);
        cursor: pointer;
        transition: background-color var(--transition-speed), transform var(--transition-speed);
        display: flex;
        align-items: center;
        gap: 10px;
        text-align: left;
        position: relative;
    }

    .projects-team-folder:hover,
    .projects-team-folder.active {
        background-color: var(--color-company);
        color: #ffffff;
        transform: translateY(-2px);
    }

    .projects-team-folder img.projects-team-folder-icon {
        width: 24px;
        height: 24px;
    }

    /* Botones de Acción en Carpetas */
    .projects-team-folder-actions {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        display: flex;
        gap: 5px;
        opacity: 0;
        transition: opacity var(--transition-speed);
    }

    .projects-team-folder:hover .projects-team-folder-actions {
        opacity: 1;
    }

    .projects-team-folder-actions i {
        cursor: pointer;
        color: inherit;
        transition: color var(--transition-speed);
    }

    .projects-team-folder-actions i:hover {
        color: #ff4d4d;
        /* Color para el icono de eliminar */
    }

    .projects-team-folder-actions i.rename-icon:hover {
        color: #ffae42;
        /* Color para el icono de renombrar */
    }

    /* Main Content */
    .projects-team-main-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        padding: 20px;
        overflow-y: auto;
    }

    /* Botones */
    .projects-team-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        margin-bottom: 20px;
    }

    .projects-team-buttons button {
        padding: 10px 15px;
        border: none;
        border-radius: 6px;
        background-color: var(--color-company);
        color: #ffffff;
        cursor: pointer;
        transition: background-color var(--transition-speed), transform var(--transition-speed);
        display: flex;
        align-items: center;
        gap: 5px;
        font-size: 0.9rem;
    }

    .projects-team-buttons button:hover {
        background-color: #054a8c;
        transform: translateY(-2px);
    }

    .projects-team-buttons button i {
        font-size: 1rem;
    }

    /* Área de Archivos */
    .projects-team-file-area {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 20px;
    }

    .projects-team-file-item {
        background-color: var(--card-bg);
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        text-align: center;
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
        position: relative;
    }

    .projects-team-file-item:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
    }

    .projects-team-file-item img,
    .projects-team-file-item .projects-team-file-icon {
        width: 60px;
        height: 60px;
        object-fit: contain;
        margin-bottom: 10px;
    }

    .projects-team-file-item .projects-team-file-icon {
        font-size: 2rem;
        color: var(--color-company);
    }

    .projects-team-file-name {
        font-size: 14px;
        color: #333333;
        word-break: break-word;
    }

    /* Botón de Eliminar en Archivos */
    .projects-team-file-item .projects-team-delete-file {
        position: absolute;
        top: 5px;
        right: 5px;
        background-color: rgba(255, 255, 255, 0.7);
        border: none;
        border-radius: 50%;
        padding: 5px;
        cursor: pointer;
        transition: background-color var(--transition-speed);
    }

    .projects-team-file-item .projects-team-delete-file:hover {
        background-color: rgba(255, 0, 0, 0.8);
    }

    .projects-team-file-item .projects-team-delete-file i {
        color: #ffffff;
        font-size: 0.8rem;
    }

    /* Modal */
    .projects-team-modal {
        display: none;
        /* Oculto por defecto */
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
        padding: 10px;
    }

    .projects-team-modal-content {
        background-color: var(--card-bg);
        padding: 20px;
        border-radius: 8px;
        width: 60%;
        height: 90%;
        position: relative;
        box-shadow: 0 4px 15px var(--shadow-color);
        animation: fadeIn 0.3s ease-out;
    }

    .projects-team-modal-content-message{
        background-color: var(--card-bg);
        padding: 20px;
        border-radius: 8px;
        width: 30%;
        height: 29%;
        position: relative;
        box-shadow: 0 4px 15px var(--shadow-color);
        animation: fadeIn 0.3s ease-out;
    }


    .projects-team-modal-content-message p {
        margin-bottom: 15px;
        color: #333333;
    }

    .projects-team-modal-content-message input[type="text"],
    .projects-team-modal-content-message select,
    .projects-team-modal-content-message input[type="file"] {
        width: 100%;
        padding: 10px;
        margin-top: 10px;
        border-radius: 6px;
        border: 1px solid var(--border-color);
        font-size: 0.9rem;
    }

    .projects-team-modal-content-message button {
        margin-top: 15px;
        padding: 10px 15px;
        border: none;
        border-radius: 6px;
        background-color: var(--color-company);
        color: #ffffff;
        cursor: pointer;
        transition: background-color var(--transition-speed), transform var(--transition-speed);
        display: flex;
        align-items: center;
        gap: 5px;
        font-size: 0.9rem;
    }

    .projects-team-modal-content-message button:hover {
        background-color: #054a8c;
        transform: translateY(-2px);
    }

    .projects-team-close {
        position: absolute;
        right: 15px;
        top: 10px;
        font-size: 1.5rem;
        color: var(--secondary-text);
        cursor: pointer;
        transition: color var(--transition-speed);
    }

    .projects-team-close:hover {
        color: var(--color-company);
    }

    .projects-team-modal-content h2 {
        margin-bottom: 15px;
        color: var(--color-company);
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .projects-team-modal-content p {
        margin-bottom: 15px;
        color: #333333;
    }

    .projects-team-modal-content input[type="text"],
    .projects-team-modal-content select,
    .projects-team-modal-content input[type="file"] {
        width: 100%;
        padding: 10px;
        margin-top: 10px;
        border-radius: 6px;
        border: 1px solid var(--border-color);
        font-size: 0.9rem;
    }

    .projects-team-modal-content button {
        margin-top: 15px;
        padding: 10px 15px;
        border: none;
        border-radius: 6px;
        background-color: var(--color-company);
        color: #ffffff;
        cursor: pointer;
        transition: background-color var(--transition-speed), transform var(--transition-speed);
        display: flex;
        align-items: center;
        gap: 5px;
        font-size: 0.9rem;
    }

    .projects-team-modal-content button:hover {
        background-color: #054a8c;
        transform: translateY(-2px);
    }

    /* Previsualización */
    .projects-team-preview {
        margin-top: 20px;
    }

    .projects-team-preview img,
    .projects-team-preview embed,
    .projects-team-preview textarea {
        width: 100%;
        max-height: 600px;
        border: none;
        border-radius: 5px;
    }

    .projects-team-preview textarea {
        resize: none;
        padding: 10px;
        background-color: #f9f9f9;
        color: #333333;
        font-family: 'Courier New', Courier, monospace;
        font-size: 0.9rem;
    }

    /* Animaciones */
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: scale(0.95);
        }

        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    /* Responsive */
    @media (max-width: 768px) {
        .projects-team-sidebar {
            width: 200px;
        }

        .projects-team-file-area {
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
        }
    }

    @media (max-width: 480px) {
        body {
            flex-direction: column;
        }

        .projects-team-sidebar {
            width: 100%;
            border-right: none;
            border-bottom: 1px solid var(--border-color);
            flex-direction: row;
            overflow-x: auto;
        }

        .projects-team-folders {
            flex-direction: row;
            overflow-x: auto;
        }

        .projects-team-folder {
            min-width: unset;
            justify-content: center;
        }

        .projects-team-buttons {
            flex-direction: column;
            width: 100%;
        }

        .projects-team-buttons button {
            width: 100%;
            justify-content: center;
        }
    }
</style>
<link rel='stylesheet' href='https://cdn-uicons.flaticon.com/2.6.0/uicons-thin-straight/css/uicons-thin-straight.css'>
<div class="projects-team-buttons">
    <button onclick="openAddFolderModal()"><i class="fas fa-folder-plus"></i> Agregar Carpeta</button>
    <button onclick="openAddFileModal()"><i class="fas fa-file-upload"></i> Agregar Archivo</button>
</div>
<div class="projects-team-container">
    <!-- Sidebar de Carpetas -->
    <div class="projects-team-sidebar">
        <label for=""><i class="fi-icon fi-sr-folder-open"></i> Carpetas</label>
        <hr>
        <div class="projects-team-folders" id="folders">
            <!-- Carpetas dinámicas -->
        </div>
    </div>

    <!-- Área Principal -->
    <div class="projects-team-main-content">
        <div class="projects-team-file-area" id="fileArea">
            <!-- Archivos dinámicos -->
        </div>
    </div>

    <!-- Modal para Agregar Carpeta -->
    <div id="addFolderModal" class="projects-team-modal">
        <div class="projects-team-modal-content-message">
            <span class="projects-team-close" onclick="closeModal('addFolderModal')">&times;</span>
            <h2><i class="fas fa-folder-plus"></i> Agregar Nueva Carpeta</h2>
            <input type="text" id="newFolderName" placeholder="Nombre de la carpeta" class="form-control">
            <button onclick="addFolder()"><i class="fas fa-check"></i> Agregar</button>
        </div>
    </div>

    <!-- Modal para Agregar Archivo -->
    <div id="addFileModal" class="projects-team-modal">
        <div class="projects-team-modal-content-message">
            <span class="projects-team-close" onclick="closeModal('addFileModal')">&times;</span>
            <h2><i class="fas fa-file-upload"></i> Agregar Archivo</h2>
            <input type="file" id="fileInput" class="form-control">
            <select id="folderSelect" class="form-select" aria-label="Default select example">
                <!-- Opciones de carpetas dinámicas -->
            </select>
            <button onclick="addFile()"><i class="fas fa-upload"></i> Subir</button>
        </div>
    </div>

    <!-- Modal para Renombrar Carpeta -->
    <div id="renameFolderModal" class="projects-team-modal">
        <div class="projects-team-modal-content">
            <span class="projects-team-close" onclick="closeModal('renameFolderModal')">&times;</span>
            <h2><i class="fas fa-edit"></i> Renombrar Carpeta</h2>
            <input type="text" id="renameFolderName" placeholder="Nuevo nombre de la carpeta">
            <button onclick="renameFolder()"><i class="fas fa-check"></i> Renombrar</button>
        </div>
    </div>

    <!-- Modal para Confirmar Eliminación de Carpeta -->
    <div id="deleteFolderModal" class="projects-team-modal">
        <div class="projects-team-modal-content">
            <span class="projects-team-close" onclick="closeModal('deleteFolderModal')">&times;</span>
            <h2><i class="fas fa-trash-alt"></i> Eliminar Carpeta</h2>
            <p>¿Estás seguro de que deseas eliminar esta carpeta y todos sus archivos?</p>
            <button onclick="confirmDeleteFolder()"><i class="fas fa-trash-alt"></i> Eliminar</button>
            <button onclick="closeModal('deleteFolderModal')" style="background-color: #6c757d;"><i
                    class="fas fa-times"></i> Cancelar</button>
        </div>
    </div>

    <!-- Modal para Confirmar Eliminación de Archivo -->
    <div id="deleteFileModal" class="projects-team-modal">
        <div class="projects-team-modal-content">
            <span class="projects-team-close" onclick="closeModal('deleteFileModal')">&times;</span>
            <h2><i class="fas fa-trash-alt"></i> Eliminar Archivo</h2>
            <p>¿Estás seguro de que deseas eliminar este archivo?</p>
            <button onclick="confirmDeleteFile()"><i class="fas fa-trash-alt"></i> Eliminar</button>
            <button onclick="closeModal('deleteFileModal')" style="background-color: #6c757d;"><i
                    class="fas fa-times"></i> Cancelar</button>
        </div>
    </div>

    <!-- Modal para Previsualizar Archivo -->
    <div id="previewModal" class="projects-team-modal">
        <div class="projects-team-modal-content">
            <span class="projects-team-close" onclick="closeModal('previewModal')">&times;</span>
            <div class="projects-team-preview" id="previewContent">
                <!-- Contenido dinámico -->
            </div>
        </div>
    </div>
</div>

<script>
    // Estructura de Datos
    let data = {
        folders: [],
        currentFolder: null
    };

    // Variables para manejar acciones de eliminación y renombrado
    let folderToDelete = null;
    let fileToDelete = null;
    let folderToRename = null;

    // Cargar Datos desde Local Storage
    window.onload = function () {
        if (localStorage.getItem('fileManagerData')) {
            data = JSON.parse(localStorage.getItem('fileManagerData'));
        } else {
            // Carpeta por defecto
            data.folders.push({
                id: generateId(),
                name: 'Carpeta Principal',
                files: []
            });
            data.currentFolder = data.folders[0].id;
            saveData();
        }
        renderFolders();
        renderFiles();
    };

    // Generar ID Único
    function generateId() {
        return '_' + Math.random().toString(36).substr(2, 9);
    }

    // Guardar Datos en Local Storage
    function saveData() {
        localStorage.setItem('fileManagerData', JSON.stringify(data));
    }

    // Renderizar Carpetas
    function renderFolders() {
        const foldersDiv = document.getElementById('folders');
        foldersDiv.innerHTML = '';
        data.folders.forEach(folder => {
            const folderDiv = document.createElement('div');
            folderDiv.classList.add('projects-team-folder');
            if (folder.id === data.currentFolder) {
                folderDiv.classList.add('active');
            }

            // Contenido de la carpeta
            const folderContent = document.createElement('div');
            folderContent.style.display = 'flex';
            folderContent.style.alignItems = 'center';
            folderContent.style.gap = '10px';
            folderContent.style.flex = '1';

            const folderIcon = document.createElement('img');
            folderIcon.src = "https://cdn-icons-png.flaticon.com/512/11471/11471391.png";
            folderIcon.alt = "Folder Icon";
            folderIcon.classList.add('projects-team-folder-icon');

            const folderName = document.createElement('span');
            folderName.textContent = folder.name;

            folderContent.appendChild(folderIcon);
            folderContent.appendChild(folderName);

            // Acciones de la carpeta (renombrar y eliminar)
            const folderActions = document.createElement('div');
            folderActions.classList.add('projects-team-folder-actions');

            const renameIcon = document.createElement('i');
            renameIcon.classList.add('fas', 'fa-edit', 'rename-icon');
            renameIcon.title = "Renombrar Carpeta";
            renameIcon.style.marginRight = '5px';

            const deleteIcon = document.createElement('i');
            deleteIcon.classList.add('fas', 'fa-trash-alt');
            deleteIcon.title = "Eliminar Carpeta";

            // Agregar eventos a los iconos de acción
            renameIcon.addEventListener('click', function (event) {
                event.stopPropagation(); // Evitar que se seleccione la carpeta
                initRenameFolder(folder.id);
            });

            deleteIcon.addEventListener('click', function (event) {
                event.stopPropagation(); // Evitar que se seleccione la carpeta
                initDeleteFolder(folder.id);
            });

            folderActions.appendChild(renameIcon);
            folderActions.appendChild(deleteIcon);

            // Agregar contenido y acciones a la carpeta
            folderDiv.appendChild(folderContent);
            folderDiv.appendChild(folderActions);

            // Evento de clic para seleccionar la carpeta
            folderDiv.addEventListener('click', function () {
                data.currentFolder = folder.id;
                saveData();
                renderFolders();
                renderFiles();
            });

            foldersDiv.appendChild(folderDiv);
        });

        // Actualizar opciones en el select de carpetas
        const folderSelect = document.getElementById('folderSelect');
        folderSelect.innerHTML = '';
        data.folders.forEach(folder => {
            const option = document.createElement('option');
            option.value = folder.id;
            option.innerText = folder.name;
            folderSelect.appendChild(option);
        });
    }

    function isProgrammingLanguage(fileName) {
        const fileExtension = fileName.split('.').pop().toLowerCase(); // Obtener la extensión del archivo

        const programmingLanguages = ['py', 'html', 'htm', 'css', 'js', 'cpp', 'c', 'cs', 'go'];

        if (programmingLanguages.includes(fileExtension)) {
            return "this_is_a_language_program";
        } else {
            return "this_is_not_a_language_program";
        }
    }

    // Renderizar Archivos
    function renderFiles() {
        const fileArea = document.getElementById('fileArea');
        fileArea.innerHTML = '';
        const currentFolder = data.folders.find(folder => folder.id === data.currentFolder);
        if (currentFolder) {
            if (currentFolder.files.length === 0) {
                fileArea.innerHTML = '<p>No hay archivos en esta carpeta.</p>';
                return;
            }
            currentFolder.files.forEach(file => {
                const fileDiv = document.createElement('div');
                fileDiv.classList.add('projects-team-file-item');

                // Contenido del archivo
                if (file.type.startsWith('image/')) {
                    const img = document.createElement('img');
                    img.src = file.data;
                    img.alt = file.name;
                    fileDiv.appendChild(img);
                } else if (file.type === 'application/pdf') {
                    const pdfIcon = document.createElement('i');
                    pdfIcon.classList.add('fi-icon', 'fi-ts-file-pdf', 'projects-team-file-icon');
                    fileDiv.appendChild(pdfIcon);
                } else if (file.type === 'text/plain') {
                    const txtIcon = document.createElement('i');
                    txtIcon.classList.add('fi-icon', 'fi-ts-document-signed', 'projects-team-file-icon');
                    fileDiv.appendChild(txtIcon);
                }else if(isProgrammingLanguage(file.type)){
                    const txtIcon = document.createElement('i');
                    txtIcon.classList.add('fi-icon', 'fi-ts-square-code', 'projects-team-file-icon');
                    fileDiv.appendChild(txtIcon);         
                }else{
                    const txtIcon = document.createElement('i');
                    txtIcon.classList.add('fi-icon', 'fi-ts-document-signed', 'projects-team-file-icon');
                    fileDiv.appendChild(txtIcon);               
                }

                const nameDiv = document.createElement('div');
                nameDiv.classList.add('projects-team-file-name');
                nameDiv.innerText = file.name;
                fileDiv.appendChild(nameDiv);

                // Botón de eliminar archivo
                const deleteButton = document.createElement('button');
                deleteButton.classList.add('projects-team-delete-file');
                const trashIcon = document.createElement('i');
                trashIcon.classList.add('fas', 'fa-trash-alt');
                deleteButton.appendChild(trashIcon);

                // Evento de clic para eliminar archivo
                deleteButton.addEventListener('click', function (event) {
                    event.stopPropagation(); // Evitar que se active la previsualización
                    initDeleteFile(file.id);
                });

                fileDiv.appendChild(deleteButton);

                // Evento de clic para previsualizar archivo
                fileDiv.addEventListener('click', function () {
                    previewFile(file);
                });

                fileArea.appendChild(fileDiv);
            });
        }
    }

    // Abrir Modal
    function openModal(modalId) {
        document.getElementById(modalId).style.display = 'flex';
    }

    // Cerrar Modal
    function closeModal(modalId) {
        document.getElementById(modalId).style.display = 'none';
    }

    // Abrir Modales
    function openAddFolderModal() {
        openModal('addFolderModal');
    }

    function openAddFileModal() {
        openModal('addFileModal');
    }

    // Agregar Carpeta
    function addFolder() {
        const folderName = document.getElementById('newFolderName').value.trim();
        if (folderName === '') {
            alert('El nombre de la carpeta no puede estar vacío.');
            return;
        }
        data.folders.push({
            id: generateId(),
            name: folderName,
            files: []
        });
        saveData();
        renderFolders();
        closeModal('addFolderModal');
        document.getElementById('newFolderName').value = '';
    }

    // Agregar Archivo
    function addFile() {
        const fileInput = document.getElementById('fileInput');
        const folderSelect = document.getElementById('folderSelect');
        const files = fileInput.files;
        const selectedFolderId = folderSelect.value;

        if (files.length === 0) {
            alert('Por favor, selecciona un archivo.');
            return;
        }

        const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg', 'application/pdf', 'text/plain'];
        const file = files[0];
        /*
        if (!allowedTypes.includes(file.type)) {
            alert('Tipo de archivo no permitido.');
            return;
        }
        */

        const reader = new FileReader();
        reader.onload = function (e) {
            const fileData = e.target.result;
            const currentFolder = data.folders.find(folder => folder.id === selectedFolderId);
            if (currentFolder) {
                currentFolder.files.push({
                    id: generateId(),
                    name: file.name,
                    type: file.type,
                    data: fileData
                });
                saveData();
                if (selectedFolderId === data.currentFolder) {
                    renderFiles();
                }
            }
        };

        reader.readAsDataURL(file);
        closeModal('addFileModal');
        fileInput.value = ''; // Resetear input
    }

    // Iniciar Renombrado de Carpeta
    function initRenameFolder(folderId) {
        folderToRename = folderId;
        const folder = getFolderById(folderId);
        if (folder) {
            document.getElementById('renameFolderName').value = folder.name;
            openModal('renameFolderModal');
        }
    }

    // Renombrar Carpeta
    function renameFolder() {
        const newName = document.getElementById('renameFolderName').value.trim();
        if (newName === '') {
            alert('El nuevo nombre de la carpeta no puede estar vacío.');
            return;
        }
        const folder = getFolderById(folderToRename);
        if (folder) {
            folder.name = newName;
            saveData();
            renderFolders();
            closeModal('renameFolderModal');
            folderToRename = null;
        }
    }

    // Iniciar Eliminación de Carpeta
    function initDeleteFolder(folderId) {
        folderToDelete = folderId;
        openModal('deleteFolderModal');
    }

    // Confirmar Eliminación de Carpeta
    function confirmDeleteFolder() {
        const folderIndex = data.folders.findIndex(folder => folder.id === folderToDelete);
        if (folderIndex !== -1) {
            data.folders.splice(folderIndex, 1);
            // Si la carpeta eliminada es la actual, seleccionar otra carpeta
            if (data.currentFolder === folderToDelete) {
                if (data.folders.length > 0) {
                    data.currentFolder = data.folders[0].id;
                } else {
                    data.currentFolder = null;
                }
            }
            saveData();
            renderFolders();
            renderFiles();
            closeModal('deleteFolderModal');
            folderToDelete = null;
        }
    }

    // Iniciar Eliminación de Archivo
    function initDeleteFile(fileId) {
        fileToDelete = fileId;
        openModal('deleteFileModal');
    }

    // Confirmar Eliminación de Archivo
    function confirmDeleteFile() {
        const currentFolder = data.folders.find(folder => folder.id === data.currentFolder);
        if (currentFolder) {
            const fileIndex = currentFolder.files.findIndex(file => file.id === fileToDelete);
            if (fileIndex !== -1) {
                currentFolder.files.splice(fileIndex, 1);
                saveData();
                renderFiles();
                closeModal('deleteFileModal');
                fileToDelete = null;
            }
        }
    }

    // Obtener Carpeta por ID
    function getFolderById(folderId) {
        return data.folders.find(folder => folder.id === folderId);
    }

    // Previsualizar Archivo
    function previewFile(file) {
        const previewContent = document.getElementById('previewContent');
        previewContent.innerHTML = ''; // Limpiar contenido previo

        if (file.type.startsWith('image/')) {
            const img = document.createElement('img');
            img.src = file.data;
            img.alt = file.name;
            previewContent.appendChild(img);
        } else if (file.type === 'application/pdf') {
            const embed = document.createElement('embed');
            embed.src = file.data;
            embed.type = 'application/pdf';
            embed.width = '100%';
            embed.height = '600px';
            previewContent.appendChild(embed);
        } else if (file.type === 'text/plain') {
            const textarea = document.createElement('textarea');
            textarea.readOnly = true;
            textarea.value = atob(file.data.split(',')[1]); // Decodificar Base64
            previewContent.appendChild(textarea);
        }

        openModal('previewModal');
    }

    // Cerrar Modales al hacer clic fuera
    window.onclick = function (event) {
        const modals = document.querySelectorAll('.projects-team-modal');
        modals.forEach(modal => {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });
    };
</script>