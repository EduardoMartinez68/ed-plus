<link rel='stylesheet' href='https://cdn-uicons.flaticon.com/2.5.1/uicons-brands/css/uicons-brands.css'>
<link rel='stylesheet' href='https://cdn-uicons.flaticon.com/2.5.1/uicons-regular-rounded/css/uicons-regular-rounded.css'>
<link rel='stylesheet' href='https://cdn-uicons.flaticon.com/2.5.1/uicons-bold-rounded/css/uicons-bold-rounded.css'>

<div class="add-column-form">
    {{#each branchFree}}
    <button id="addColumnBtn" class="btn btn-confirm-message" onclick="add_table_crm('{{id_companies}}','{{id}}')">A√±adir nueva columna <i
            class="fi-icon fi-sr-square-plus"></i></button>
    {{/each}}
    {{#each company}}
    <button id="addColumnBtn" class="btn btn-confirm-message" onclick="add_table_crm('{{id}}')">A√±adir nueva columna <i
            class="fi-icon fi-sr-square-plus"></i></button>
    {{/each}}
    <button id="addColumnBtn" class="btn btn-edit" onclick="updateOrderInBackend()">Guardar cambios <i class="fi-icon fi-sr-disk"></i></button>
</div>

<!--this is for the form of edit-->
{{#each branchFree}}
    <input type="hidden" value="{{id}}" id="id_branch">
    <input type="hidden" value="{{id_companies}}" id="id_company">
{{/each}}

<div class="board-wrapper">
    <div class="board" id="container-column">
        {{#each salesStage}}
            <div class="column" id="stage-{{id}}" position="{{position}}" idStage="{{id}}" nameStage="{{name}}">
                <div class="title-column">
                    <h4 id="h4-name-{{id}}">{{name}}</h4>
                    <button class="dropdown-btn"><i class="fi fi-br-menu-dots"></i></button>
                    <div class="dropdown-menu">
                        <ul>
                            <li><a onclick="edit_name('{{id}}')" class="dropdown-item">Cambiar nombre</a></li>
                            <li><a onclick="nextStage('{{id}}')" class="dropdown-item">Mover adelante</a></li>
                            <li><a onclick="backStage('{{id}}')" class="dropdown-item">Mover atr√°s</a></li>
                            <li><a onclick="deleteStage('{{id}}','{{id_companies}}','{{name}}')" class="dropdown-item">Eliminar</a></li>
                        </ul>
                    </div>
                </div>
                <hr>
            </div>
        {{/each}}
        {{#each prospects}}
            <div class="task" stageId="{{id_sales_stage}}" priority="{{priority}}">
                <div class="task-badge" style="background-color: {{color}};"></div>
                <div class="task-header">
                    <span class="task-name">{{name}}</span>
                    <button class="edit-btn"><i class="fi fi-br-menu-dots"></i></button>
                    <div class="dropdown-menu-2">
                        <ul>
                            <li><a href="/links/{{id_companies}}/{{id_branches}}/{{id}}/edit" class="dropdown-item"><i class="fi-icon fi-ss-pencil"></i> Editar</a></li>
                            <li><a href="/links/{{id_companies}}/{{id_branches}}/{{id}}/edit" class="dropdown-item"><i class="fi-icon fi-rs-clock-three"></i> Agendar cita</a></li>
                            <li><a href="/links/{{id_companies}}/{{id_branches}}/{{id}}/send_email" class="dropdown-item"><i class="fi-icon fi-rr-envelope"></i> Enviar mensaje</a></li>
                            <li><a href="/links/{{id_companies}}/{{id_branches}}/{{id}}/send_whatsapp" class="dropdown-item"><i class="fi-icon fi-brands-whatsapp"></i> Enviar Whatsapp</a></li>
                            <li><a onclick="delete_prospect('{{id_companies}}','{{id}}')" class="dropdown-item"><i class="fi-icon fi-sr-trash"></i> Eliminar</a></li>
                        </ul>
                    </div>
                </div>
                <div class="task-date">Contacto: {{timeago  creation_date}} Cierre: {{timeago planned_closure}}</div>
                <div class="task-progress">Ingresos Estimados: <b>${{estimated_income}}</b></div>
                <div class="products">{{product_name}}</div>
                <div class="stark"  priority="{{priority}}">
                    
                </div>
                <div class="appointment"><i class="fi-icon fi-rr-clock-three"></i></div>
                <div class="img-employee">
                    {{#if user_photo}}
                        <img src="{{user_photo}}" alt="">
                    {{else}}
                        <img src="https://cdn-icons-png.flaticon.com/512/3177/3177440.png" alt="">
                    {{/if}}
                </div>
            </div>
        {{/each}}
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js"></script>
<script>
    async function delete_prospect(id_company,id_prospect){
        if(await questionMessage('Eliminar oportunidad üò±',`¬øDeseas eliminar esta oportunidad?`)){
            const id_branch=document.getElementById('id_branch').value;

            //we will see if the user would like delete the stage
            if(id_branch){
                window.location.href = `/links/${id_company}/${id_branch}/${id_prospect}/delete-prospect`;
            }else{
                window.location.href = `/links/${id_company}/${id}/delete-prospect`;
            }
        }
    }
    
    async function edit_name(id){
        const nameH=document.getElementById('h4-name-'+id); //get the h4 of the column
        const newName=await edit_name_table_crm(nameH.textContent); 

        //we will see if the new name no is null
        if (newName) {
            const columnId=document.getElementById('stage-'+id); //get the id of the column

            //we will see if this name not exist in the database
            const container = document.getElementById('container-column'); //get the container column
            const columns = Array.from(container.children);
            const order = columns.map(col => col.getAttribute('nameStage'));
            let repeat=false;
            for(var i=0;i<order.length;i++){
                if(order[i]==newName){
                    repeat=true;
                    break; 
                }
            }

            //if the new name not exist in the database, we will update
            if(!repeat){
                nameH.textContent = newName;
                columnId.setAttribute('nameStage', newName); //update the name
                await updateOrderInBackend() //update the information in the database
            }else{
                warningMessage('Error al actualizar el nombre','El nombre que intentaste ingresar ya existe en alguna tabla');
            }
        }else{
            warningMessage('Error al actualizar el nombre','El nombre que intentaste ingresar no es correcto');
        }
    }

    function nextStage(id){
        const columnId=document.getElementById('stage-'+id); //get the id of the column
        const container = document.getElementById('container-column'); //get the container column
        const columns = Array.from(container.children); //get all the columns of the column column
        const index = columns.indexOf(columnId); //get the index of the column in the array
        const newIndex = index + 1; 

        //we will see if can move the column 
        if (newIndex < columns.length) {
            //save both columns for use after
            container.insertBefore(columns[newIndex], columns[index]);
        }
    }

    function backStage(id){
        const columnId=document.getElementById('stage-'+id); //get the id of the column
        const container = document.getElementById('container-column'); //get the container column
        const columns = Array.from(container.children); //get all the columns of the column column
        const index = columns.indexOf(columnId); //get the index of the column in the array
        const newIndex = index - 1; 
 
        //we will see if can move the column 
        if (newIndex >-1) {
            //save both columns for use after
            container.insertBefore(columns[index], columns[newIndex]);
        }    
    }

    async function deleteStage(id,id_company,name){
        if(await questionMessage('Eliminar etapa de venta üò±',`¬øDeseas eliminar la etapa de venta '${name}'?`)){
            const id_branch=document.getElementById('id_branch').value;

            //we will see if the user would like delete the stage
            if(id_branch){
                window.location.href = `/links/${id_company}/${id_branch}/${id}/delete-table-crm`;
            }else{
                window.location.href = `/links/${id_company}/${id}/delete-table-crm`;
            }
        }
    }

    async function updateOrderInBackend() {
        //this is for get the new name of the columns
        const container = document.getElementById('container-column');
        const columns = Array.from(container.children);
        const order = columns.map(col => col.getAttribute('nameStage'));

        //this is for get the id of the columns
        const ids = columns.map(col => col.getAttribute('idStage'));

        //create the body that send to the server
        const requestBody = {
            order: order,
            ids: ids
        };

        //show the load window
        document.getElementById('loading-screen').style.display = 'flex';

        try {
            const response = await fetch('/fud/update-stage-columns', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            //we will see if the answer of th server
            if (response.ok) {
                const responseData = await response.json();
                notificationMessage('CRM actualizado con √©xito', 'Tus propuestas fueron actualizadas con √©xito');
            } else {
                errorMessage('Error al actualizar CRM', 'Hubo un error al intentar actualizar tus propuestas');
            }
        } catch (error) {
            errorMessage('Error al actualizar CRM', 'Hubo un error al intentar actualizar tus propuestas');
        } finally {
            // hidden the load window
            document.getElementById('loading-screen').style.display = 'none';
        }
    }

</script>
<script>
function organizeTasksIntoStages() {
    // Obt√©n todas las tareas
    const tasks = document.querySelectorAll('.task');
    
    // Recorre cada tarea
    tasks.forEach(task => {
        // Obt√©n el stageId de la tarea
        const stageId = task.getAttribute('stageId');
        
        // Busca la columna correspondiente usando el id del stage
        const column = document.querySelector(`#stage-${stageId}`);
        
        // Si encontramos la columna, mueve la tarea dentro de la columna
        if (column) {
            column.appendChild(task);
        }
    });
}

// Llama a la funci√≥n para organizar las tareas despu√©s de que el contenido est√© completamente cargado
document.addEventListener('DOMContentLoaded', () => {
    organizeTasksIntoStages();
});
</script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    // Obt√©n todos los contenedores de estrellas
    const starsContainers = document.querySelectorAll('.stark');

    starsContainers.forEach(container => {
        // Obt√©n el valor de prioridad del atributo data-priority
        const priority = parseInt(container.getAttribute('priority'), 10);
        console.log(container)
        // Limita el valor de priority a 3 si es mayor
        const starCount = Math.min(priority, 3);

        // Limpia el contenedor de estrellas
        container.innerHTML = '';

        // A√±ade el n√∫mero adecuado de estrellas
        for (let i = 0; i < starCount; i++) {
            const star = document.createElement('i');
            star.className = 'fi fi-sr-star';
            container.appendChild(star);
        }

        const startOff=starCount-3;
        if(startOff<0){
            for (let i = 0; i > startOff; i--) {
                const star = document.createElement('i');
                star.className = 'fi fi-rr-star';
                container.appendChild(star);
            }
        }
    });
});
</script>