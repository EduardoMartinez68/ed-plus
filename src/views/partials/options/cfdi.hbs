<style>
    .sat-form-container {
        font-family: 'Segoe UI', sans-serif;
    }

    .sat-form-container h2,
    .sat-form-container label {
        color: #2c3e50;
    }

    .sat-form-container form {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .input-wrapper {
        position: relative;
    }

    .custom-file-upload {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background: #ecf0f1;
        border: 2px dashed #bdc3c7;
        padding: 12px 15px;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 0.95rem;
    }

    .custom-file-upload:hover {
        background: #dde4e7;
    }

    .custom-file-upload i {
        margin-right: 10px;
        color: #3498db;
    }

    input[type="file"] {
        display: none;
    }

    input[type="password"] {
        padding: 12px;
        border-radius: 10px;
        border: 1px solid #ccc;
        width: 100%;
    }

    input[type="text"] {
        padding: 12px;
        border-radius: 10px;
        border: 1px solid #ccc;
        width: 100%;
    }

    button[type="submit"] {
        background-color: var(--color-company);
        color: white;
        border: none;
        padding: 12px;
        width: 100%;
        border-radius: 10px;
        font-size: 1rem;
        cursor: pointer;
        transition: 0.3s ease;
    }

    button[type="submit"]:hover {
        background-color: var(--color-hover);
    }

    .file-name {
        font-style: italic;
        font-size: 0.9rem;
        margin-top: 5px;
        color: #7f8c8d;
    }

    .color-link {
        color: var(--color-company);
        text-decoration: none;
    }
</style>

<div class="tab-pane fade show" id="navbar-cfdi" role="tabpanel" aria-labelledby="navbar-company-tab">
    <div class="card">
        <div class="card-body sat-form-container">
            <label><i class="fi-icon fi-sr-shield-check"></i> Subir Llaves del SAT</label>

            <!---
            <form id="formKey">

                <div class="row">
                    <div class="col-8">
                        <label for="keyFile">Archivo .KEY:</label>
                        <div class="input-wrapper">
                            <label class="custom-file-upload">
                                <i class="fi-icon fi-sr-key"></i> Seleccionar archivo .KEY
                                <input type="file" name="keyFile" id="keyFile" accept=".key" required
                                    onchange="showFileName(this)">
                            </label>
                            <div id="keyFileName" class="file-name"></div>
                        </div>
                    </div>
                    <div class="col">
                        <br>
                        <button type="submit">Subir y Validar</button>
                    </div>
                </div>

            </form>

            <form id="formCer">
                <div class="row">           
                    <div class="col-8">
                        <label for="cerFile">Archivo .CER:</label>
                        <div class="input-wrapper">
                            <label class="custom-file-upload">
                                <i class="fi-icon fi-sr-certificate"></i> Seleccionar archivo .CER
                                <input type="file" name="cerFile" id="cerFile" accept=".cer" required
                                    onchange="showFileName(this)">
                            </label>
                            <div id="cerFileName" class="file-name"></div>
                        </div>
                    </div>
                    <div class="col">
                        <br>
                        <button type="submit">Subir y Validar</button>
                    </div>
                </div>
            </form>


            <form id="formPassword">
                <div class="row">
                    <div class="col">
                        <label for="password">Contraseña de la llave .KEY:</label>
                        <input type="password" name="password" id="password" placeholder="Ingresa tu contraseña" required>
                    </div>
                    <div class="col">
                        <br>
                        <button type="submit">Actualizar</button>
                    </div>
                </div>
            </form>
            --->



            <form id="formKeyCfdi">
                <label for="keyFile">Archivo .KEY:</label>
                <div class="input-wrapper">
                    <label class="custom-file-upload">
                        <i class="fi-icon fi-sr-key"></i> Seleccionar archivo .KEY
                        <input type="file" name="keyFile" id="keyFile" accept=".key" required
                            onchange="showFileName(this)">
                    </label>
                    <div id="keyFileName" class="file-name"></div>
                </div>

                <label for="cerFile">Archivo .CER:</label>
                <div class="input-wrapper">
                    <label class="custom-file-upload">
                        <i class="fi-icon fi-sr-certificate"></i> Seleccionar archivo .CER
                        <input type="file" name="cerFile" id="cerFile" accept=".cer" required
                            onchange="showFileName(this)">
                    </label>
                    <div id="cerFileName" class="file-name"></div>
                </div>

                <label for="password">Contraseña de la llave .KEY:</label>
                <input type="password" name="password" id="passwordKey" placeholder="Ingresa tu contraseña" required>
                
                <div class="dropdown-toggle-box">
                    <div class="dropdown-header" onclick="watch_most('dataCFDI')">
                        <label class="mb-0 fw-semibold">Información CFD</label>
                        <i class="fi fi-rr-angle-down" id="icon-addressSection"></i>
                    </div>

                    <!-- Contenido oculto con animación -->
                    <div id="dataCFDI" class="dropdown-content collapsed">
                        {{#each branchFree}}
                        <label for="password">Link de tu logo:</label>
                        <input type="text" name="linkCFDI" id="rfcUser" placeholder="https://img/mi-logo.png" value="{{path_icon_cfdi}}">
                        <label for="password">RFC: *</label>
                        <input type="text" name="rfc" id="rfcUser" placeholder="Clave del Registro Federal de Contribuyentes" value="{{rfc}}"
                            required>
                        <label for="password">Razón Social: *</label>
                        <input type="text" name="name_branch" id="rfcUser" placeholder="Ej: Restaurante La Esquina S.A. de C.V."  value="{{name_branch}}"
                            required>
                        {{>cfdi/regimenFiscal}}
                        <label for="password">Codigo Postal: *</label>
                        <input type="text" name="postal_code" id="rfcUser"  placeholder="Ej: 03100"  value="{{postal_code}}"
                            required>
                        {{/each}}
                    </div>
                </div>



 
                <!-- address of the branch -->
                <div class="dropdown-toggle-box">
                    <div class="dropdown-header" onclick="watch_most('addressSection')">
                        <label class="mb-0 fw-semibold">Domicilio</label>
                        <i class="fi fi-rr-angle-down" id="icon-addressSection"></i>
                    </div>

                    <!-- Contenido oculto con animación -->
                    <div id="addressSection" class="dropdown-content collapsed">
                        {{>options/formAdressCFDI}}
                    </div>
                </div>

               


                <center>
                    <label>Al subir tus archivos, aceptas que los datos serán almacenados en nuestros servidores y en
                        los servidores de <a href="https://facturama.mx">Facturama</a> y que esta información serán
                        utilizados para la validación de tu información fiscal. <a href="" class="color-link">Lee
                            nuestros terminos y condiciones para usar este servicio</a>
                        .Si no tienes los archivos, puedes generarlos desde el portal del SAT.
                        Si no tienes la contraseña de tu llave .KEY, puedes recuperarla desde el portal del SAT.</label>
                </center>
                <button type="submit">Subir Datos</button>
            </form>

        </div>
    </div>
</div>
<br>
<script>
    /*
    function showFileName(input) {
        const fileName = input.files[0]?.name || '';
        const display = input.id === 'keyFile' ? 'keyFileName' : 'cerFileName';
        document.getElementById(display).textContent = fileName;
    }


    async function enviarFormularioArchivo(formId, campoArchivo, ruta) {
        const form = document.getElementById(formId);
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData();
            const archivo = document.getElementById(campoArchivo).files[0];

            if (!archivo) {
                return alert('Selecciona un archivo primero');
            }

            formData.append('image', archivo);

            try {
                const res = await fetch(ruta, {
                    method: 'POST',
                    body: formData
                });


                const data = await res.json();

                if (data.success) {
                    confirmationMessage('🎉 ¡Subida exitosa!', '¡El archivo se ha subido con éxito!');
                } else {
                    errorMessage('🚫 ¡Algo salió mal!', 'Hubo un error al subir el archivo. Por favor, inténtalo nuevamente.');
                }
            } catch (error) {
                alert('Error al subir archivo: ' + error.message);
            }
        });
    }

    async function enviarFormularioPassword() {
        const form = document.getElementById('formPassword');
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const password = document.getElementById('password').value;

            const formData = new URLSearchParams();
            formData.append('password', password);

            try {
                const res = await fetch('/links/update-password-sat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: formData.toString()
                });

                const respuestaTexto = await res.text();
                alert(respuestaTexto);
            } catch (error) {
                alert('Error al enviar contraseña: ' + error.message);
            }
        });
    }

    // Ejecutar todo al cargar
    window.addEventListener('DOMContentLoaded', () => {
        enviarFormularioArchivo('formKey', 'keyFile', '/links/subir-sat');
        enviarFormularioArchivo('formCer', 'cerFile', '/links/subir-sat');
        enviarFormularioPassword();
    });


    //this script is for the new API of Facturama to upload the keys and cer files
document.getElementById('formKeyCfdi').addEventListener('submit', async function (e) {
  e.preventDefault();
  //get the values of the inputs
  const rfc = document.getElementById('rfcUser').value;
  const password = document.getElementById('password').value;
  const keyFile = document.getElementById('keyFile').files[0];
  const cerFile = document.getElementById('cerFile').files[0];
  
  //check if the inputs are empty
  const formData = new FormData();
  formData.append('rfc', rfc);
  formData.append('password', password);
  formData.append('keyFile', keyFile);
  formData.append('cerFile', cerFile);

  try {
    //send the data to the server
    //using the fetch API to send the data to the server
    const response = await fetch('https://pluspuntodeventa.com/api/facturama/upload_information_rfc.php', {
      method: 'POST',
      body: formData
    });

    //get the response from the server
    const data = await response.json();

    //we check if the response is ok and we show a message to the user
    if (response.ok) {
      confirmationMessage('✅ Datos enviados correctamente','Tus datos han sido enviados correctamente a nuestros servidores.');
      console.log(data);
    } else {
      errorMessage('❌ Error del servidor: ', (data.message || JSON.stringify(data)));
    }
  } catch (error) {
    errorMessage('❌ Error en la conexión con el servidor', error);
    console.error(error);
  }
});
*/
</script>
<script>
    function showFileName(input) {
        const fileName = input.files[0]?.name || '';
        const display = input.id === 'keyFile' ? 'keyFileName' : 'cerFileName';
        document.getElementById(display).textContent = fileName;
    }

    document.getElementById('formKeyCfdi').addEventListener('submit', async function (e) {
        e.preventDefault();

        const rfc = document.getElementById('rfcUser').value.trim();
        const password = document.getElementById('passwordKey').value.trim();
        const keyFile = document.getElementById('keyFile').files[0];
        const cerFile = document.getElementById('cerFile').files[0];

        const action = 'add'; // o "update" o "delete" si quieres que sea dinámico

        if (!rfc || !password || !keyFile || !cerFile) {
            infoMessage('😳 Espera un momento ', 'Por favor completa todos los campos y selecciona los archivos .KEY y .CER')
            return;
        }

        // Convierte archivos a base64
        const toBase64 = file => new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result.split(',')[1]);
            reader.onerror = error => reject(error);
            reader.readAsDataURL(file);
        });

        const loadingOverlay=document.getElementById('loadingOverlay')
        loadingOverlay.style.display = 'flex';
        await save_RFC(rfc);
        try {
            const certBase64 = await toBase64(cerFile);
            const keyBase64 = await toBase64(keyFile);

            const payload = {
                Rfc: rfc,
                Certificate: certBase64,
                PrivateKey: keyBase64,
                PrivateKeyPassword: password
            };

            const url = `https://pluspuntodeventa.com/api/factura/load_csds.php?action=${encodeURIComponent(action)}`;
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });

            const resultText = await response.text();
            console.log(resultText)
            if (response.ok){
                if (resultText.includes('Operación realizada correctamente')) {
                    confirmationMessage('✅ ¡Listo!', 'Los datos se han enviado correctamente y fueron procesados exitosamente.');
                } else {
                    infoMessage(
                        '😕 Algo salió mal',
                        resultText
                    );
                }
            } else {
                    let serverMessage = 'Ocurrió un error desconocido al procesar tu solicitud.';
                    
                    try {
                        const parsedError = JSON.parse(resultText);
                        if (parsedError?.ModelState) {
                            // Extrae todos los errores del objeto ModelState
                            const errorList = Object.values(parsedError.ModelState)
                                .flat()
                                .join('<br>');
                            serverMessage = errorList;
                        } else if (parsedError?.Message) {
                            serverMessage = parsedError.Message;
                        }
                    } catch (parseError) {
                        console.warn('No se pudo interpretar el JSON de error:', parseError);
                    }

                    warningMessage('❌ Error al enviar los datos', serverMessage);
                    console.error('Respuesta del servidor:', resultText);
            }

        } catch (error) {
            warningMessage('❌', ' Error al procesar los archivos o al conectar con el servidor')
            console.error('Error:', error);
        }

        loadingOverlay.style.display = 'none';
    });


    async function save_RFC(rfc){
        const url = `/links/update_rfc`;
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
           body: JSON.stringify({ rfc })
        });
    }
</script>