{{#each customer}}
<form action="/fud/{{id_companies}}/{{id_branches}}/{{id}}/update-prospect" method="post" id="myForm">
<div class="container">
    <br>
        <button class="btn btn-edit" type="submit" style="margin-left: 10px; ">ü°∏</button>
    <br><br>
    <div class="card">
        <div class="card-body">
            <br>     
            <div class="row">
                <div class="col-9">
                    <label><i class="fi-icon fi-ss-trophy"></i> Editar oportunidad</label>
                    <h1>{{name}}</h1>
                </div>
                <div class="col">
                    <div class="time-progress-container">
                        <div class="time-progress-bar" id="progressBar">0%</div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col" style="text-align: right;">
                                <label for="" class="form-label" style="text-align: right;" id="label-priority">Prioridad</label>
                                <div class="rating-container">
                                    <div class="priorities">
                                        <span class="priority" data-value="3" data-message="Prioridad Alta">‚òÖ</span>
                                        <span class="priority" data-value="2" data-message="Prioridad Media">‚òÖ</span>
                                        <span class="priority" data-value="1" data-message="Prioridad Baja">‚òÖ</span>
                                    </div>
                                    <div class="message-priority" id="ratingMessage">Seleccione una prioridad</div>
                                    <input type="hidden" name="priority" id="priority" value="{{priority}}">
                                </div>
                            </div>
                        </div>
                    </div>
                {{/each}}           
                </div>
            </div>
            <hr>
            <br>

            <div class="btn-group">
                <button class="btn-select btn-active" onclick="showSection('select-1', this)" type="button">Informaci√≥n Personal</button>
                <button class="btn-select" onclick="showSection('select-2', this)" type="button">Informaci√≥n de Venta</button>
                <button class="btn-select" onclick="showSection('select-3', this)" type="button">Informaci√≥n Adicional</button>
            </div>

                {{>manager/CRM/tabsSalesStage}}

                <div id="select-1" class="content-section active">
                    {{>manager/CRM/formCustomer1Edit}}
                </div>
                <div id="select-2" class="content-section">
                    {{>manager/CRM/formCustomer3Edit}}
                </div>
                <div id="select-3" class="content-section">
                    {{>manager/CRM/formCustomer2Edit}}
                </div>

                {{#each customer}}
                <div class="div-container-right">
                    <input type="hidden" value="{{id_companies}}" id="customer-id-company">
                    <input type="hidden" value="{{id_branches}}" id="customer-id-branch">
                    <input type="hidden" value="{{id}}" id="customer-id">
                    <button type="button" class="btn btn-confirm-message" onclick="message_flask()" id="btn-form-loading">
                        <span class="bnt-loading-icon"></span>
                        Guardar
                    </button>
                </div>
                {{/each}}
            
        </div>
    </div>
</div>
</form>
{{>updateSelects}}




<br><br><br>


<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="/js/CRM/starts.js"></script>
<script>
    $(document).ready(function () {
        $('#myTab a').on('click', function (e) {
            e.preventDefault();
            $(this).tab('show');
        });
    });
</script>
<script>
function update_date(){
    const inputDate = document.getElementById('closureDate');
    const plannedClosure = inputDate.getAttribute('planned_closure');

    // Convert date and time in ISO 8601 format to 'YYYY-MM-DDTHH:MM' format
    function formatISOToDateTimeLocal(isoDateString) {
        const date = new Date(isoDateString);
        // Formatear a 'YYYY-MM-DDTHH:MM'
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

    // Set the input value
    console.log(inputDate)
    if (inputDate) {
        console.log(formatISOToDateTimeLocal(plannedClosure))
        inputDate.value = formatISOToDateTimeLocal(plannedClosure);
    }
}
update_date()
</script>
<script>

//get the form 
const form = document.getElementById("myForm");
const btnForm= document.getElementById('btn-form-loading');
const idCompany=document.getElementById('customer-id-company').value;
const idBranch=document.getElementById('customer-id-branch').value;
const idCustomer=document.getElementById('customer-id').value;


//Serializes form data to an object or string. This is for when we are going to compare if the user modified the form
function serializeForm(form) {
    const formData = new FormData(form);
    const serialized = {};
    formData.forEach((value, key) => {
        serialized[key] = value;
    });
    return JSON.stringify(serialized);
}

// save the status first of the form
let initialFormState = serializeForm(form);


let timeout;

//we will see if the user is edit the form
form.addEventListener("input", () => {
    if (the_form_was_edit()) {
        //we will see if exist the class 
        if(!btnForm.classList.contains('btn-loading-off')){
            btnForm.classList.add('btn-loading-off');
            btnForm.disabled = true;
        }

        // Cancels any previously scheduled saves
        clearTimeout(timeout);

        //Schedule a save after of X seconds of inactivity
        const seconds=5;
        timeout = setTimeout(() => {
            send_the_form_automatically_to_the_server();
        }, 1000*seconds);
    }else{
        off_button_loading();
    }
});

async function send_the_form_automatically_to_the_server(){
    //we will see if the user edit the form for send to the server
    if (the_form_was_edit()) {
        await send_form_data(idCompany, idBranch, idCustomer);
    }else{
        off_button_loading();
    }
}

function the_form_was_edit(){
    //Serializes the current state of the form
    const currentFormState = serializeForm(form);
    return currentFormState !== initialFormState;
}

function off_button_loading(){
    //when the form is equal, we will cancel the animation button 
    btnForm.classList.remove('btn-loading-off');
    btnForm.disabled = false;
}


//------------------------------this is for when the user send the click-----------------------------------//
async function send_form_data(id_companies,id_branches,id_prospect) {
    // Create a FormData object with the form data
    const formData = new FormData(form);

    // Convert FormData to a simple JavaScript object
    const formObject = {};
    formData.forEach((value, key) => {
        formObject[key] = value;
    });

    // Call the function to handle this data
    await send_to_server(formObject,id_companies,id_branches,id_prospect);
}

async function send_to_server(formData,id_companies,id_branches,id_prospect) {
    const loadingOverlay = document.getElementById("loadingOverlay");
    //loadingOverlay.style.display = "flex"; // Show loading overlay

    //we will see if can edit the form in the server or exist a error
    try {
        const response = await fetch('/fud/update-prospect', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({formData,id_companies,id_branches,id_prospect}), // Enviar los datos como JSON
        });

        if (!response.ok) {
            throw new Error(`Error en la solicitud: ${response.statusText}`);
        }

        //we will show the anser of the server
        const data = await response.json();
        notificationMessage('Notificaci√≥n',data.message);
    } catch (error) {
        notificationMessageError('Error',error);
        console.error('Error al enviar formulario:', error);
    }finally{
        loadingOverlay.style.display = "none"; // hidden loading overlay
        off_button_loading();

        //we will save the new form edit for compare it later
        initialFormState = serializeForm(form);
    }
}

function message_flask(){
    notificationMessage('Notificaci√≥n','Base de datos actualizada');
}
</script>