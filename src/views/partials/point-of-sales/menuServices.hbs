<style>
    :root {
        --menu-services-primary: #1649FF;
    }

    .menu-services-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.4);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 999;
    }

    .menu-services-popup {
        position: relative;
        background: white;
        padding: 40px;
        border-radius: 16px;
        width: 90%;
        max-width: 900px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
        animation: menu-services-fadeIn 0.4s ease-in-out;
    }

    .menu-services-close-btn {
        position: absolute;
        top: 12px;
        right: 12px;
        font-size: 22px;
        color: #555;
        background: none;
        border: none;
        cursor: pointer;
        background-color: transparent;
        padding: 0.5rem;
        border-radius: 50%;
        transition: background-color 0.3s, transform 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .menu-services-close-btn:hover {
        background-color: #eee;
        transform: scale(1.1);
    }

    .menu-services-close-btn svg {
        width: 20px;
        height: 20px;
        stroke: #333;
        stroke-width: 2;
    }

    @keyframes menu-services-fadeIn {
        from {
            opacity: 0;
            transform: scale(0.95);
        }

        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    .menu-services-options {
        display: flex;
        justify-content: space-between;
        margin-top: 30px;
    }

    .menu-services-btn-half {
        flex: 1;
        margin: 0 10px;
        padding: 16px;
        background: #f0f2ff;
        color: var(--color-company);
        border: 2px solid var(--color-company);
        border-radius: 12px;
        font-size: 18px;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.3s, color 0.3s;
    }

    .menu-services-btn-half:hover {
        background: rgba(22, 73, 255, 0.1);
    }

    .menu-services-cards-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        margin-top: 20px;
        gap: 20px;
    }

    .menu-services-card {
        width: 120px;
        padding: 15px;
        background: #fff;
        border: 1px solid #ddd;
        border-radius: 12px;
        text-align: center;
        cursor: pointer;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.08);
        transition: transform 0.2s ease;
    }

    .menu-services-card:hover {
        transform: scale(1.05);
    }

    .menu-services-card img {
        width: 80px;
        height: 80px;
        object-fit: contain;
        margin-bottom: 10px;
    }

    .menu-services-formulario {
        margin-top: 30px;
        display: flex;
        flex-direction: column;
        gap: 20px;
        text-align: left;
    }

    .menu-services-formulario label {
        font-size: 15px;
        color: #444;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .menu-services-formulario input {
        width: 100%;
        padding: 12px 16px;
        font-size: 16px;
        background-color: #fafbfc;
        border: 1.5px solid #d1d5db;
        border-radius: 10px;
        transition: all 0.3s ease;
        color: #111827;
        font-family: 'Inter', sans-serif;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.03);
    }

    .menu-services-formulario input::placeholder {
        color: #9ca3af;
        opacity: 1;
    }

    .menu-services-formulario input:focus {
        border-color: var(--color-company, #3b82f6);
        box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.2);
        outline: none;
        background-color: #fff;
    }

    .menu-services-recargas-rapidas {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        justify-content: center;
        margin-bottom: 20px;
    }

    .menu-services-recargas-rapidas button {
        padding: 12px 20px;
        font-size: 15px;
        background-color: #fff;
        color: var(--color-company, #3b82f6);
        border: 1.5px solid var(--color-company, #3b82f6);
        border-radius: 9999px;
        cursor: pointer;
        font-weight: 500;
        font-family: 'Inter', sans-serif;
        transition: all 0.25s ease;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.04);
    }

    .menu-services-recargas-rapidas button:hover {
        background-color: var(--color-company, #3b82f6);
        color: #ffffff;
        box-shadow: 0 4px 10px rgba(59, 130, 246, 0.15);
    }

    .menu-services-btn-comprar {
        background: var(--color-company);
        color: white;
        border: none;
        padding: 14px 20px;
        font-size: 17px;
        border-radius: 12px;
        cursor: pointer;
        width: 100%;
        margin-top: 10px;
        transition: background 0.3s, transform 0.3s;
    }

    .menu-services-btn-comprar:hover {
        background: var(--color-hover);
        ;
        transform: scale(1.02);
    }

    .menu-services-open-popup-btn {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: var(--color-company);
        color: white;
        border: none;
        padding: 14px 20px;
        border-radius: 50px;
        font-size: 16px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        cursor: pointer;
        z-index: 998;
        transition: background 0.3s ease;
    }

    .menu-services-open-popup-btn:hover {
        background: var(--color-hover);
    }

    h2,
    h3 {
        text-align: center;
        color: #333;
    }

    #menu-services-contenido-dinamico {
        max-height: 70vh;
        /* Ajusta según lo que necesites */
        overflow-y: auto;
        padding-right: 10px;
        /* espacio para que el scroll no tape contenido */
    }

    /* Estiliza el scrollbar (opcional pero bonito) */
    #menu-services-contenido-dinamico::-webkit-scrollbar {
        width: 3px;
    }

    #menu-services-contenido-dinamico::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 5px;
    }

    #menu-services-contenido-dinamico::-webkit-scrollbar-thumb {
        background: rgba(0, 0, 0, 0.2);
        border-radius: 5px;
    }

    #menu-services-contenido-dinamico::-webkit-scrollbar-thumb:hover {
        background: rgba(0, 0, 0, 0.5);
    }
</style>

<!---->
{{#each branchFree}}
<input type="hidden" id="user_prontipagos" value="{{user_prontipagos}}">
<input type="hidden" id="password_prontipagos" value="{{password_prontipagos}}">
<input type="hidden" id="iv_for_password" value="{{iv_for_password}}">
{{/each}}


<!-- Primer Popup -->
<div class="menu-services-overlay" id="menu-services-popup-1" style="display: none;">
    <div class="menu-services-popup">
        <button class="menu-services-close-btn" onclick="cerrarPopups()" aria-label="Cerrar ventana">
            <svg viewBox="0 0 24 24" fill="none">
                <line x1="18" y1="6" x2="6" y2="18" />
                <line x1="6" y1="6" x2="18" y2="18" />
            </svg>
        </button>
        <h2>¿Qué deseas hacer?</h2>
        <div class="menu-services-options">
            <button class="menu-services-btn-half" onclick="seleccionarOpcion('recargas')">Pagar Recargas</button>
            <button class="menu-services-btn-half" onclick="seleccionarOpcion('servicios')">Pagar Servicios</button>
        </div>
    </div>
</div>

<!-- Segundo Popup (dinámico) -->
<div class="menu-services-overlay" id="menu-services-popup-2" style="display: none;">
    <div class="menu-services-popup">
        <button class="menu-services-close-btn" onclick="cerrarPopups()" aria-label="Cerrar ventana">
            <svg viewBox="0 0 24 24" fill="none">
                <line x1="18" y1="6" x2="6" y2="18" />
                <line x1="6" y1="6" x2="18" y2="18" />
            </svg>
        </button>
        <div id="menu-services-contenido-dinamico"></div>
    </div>
</div>


<script>
    const urlBase = "https://prontipagos-api-dev.domainscm.com";

    let companyRechange = null;
    let myCreditForRechange = null;
    let dataSku1 = '';
    let dataSku2 = ''
    const menuServicesRecargas = [
        { name: "Telcel", icon: "https://yt3.googleusercontent.com/je7RNk1GeegHqDmmppc3HVbYIE9_Nh2pS64Mz6fkk-RcK29wbWujnx3HooDa0vqyu5tfXffxCA=s900-c-k-c0x00ffffff-no-rj", sku1: '', sku2: '' },
        { name: "Internet amigo ", icon: "https://holatelcel.com/wp-content/uploads/2016/11/amigo.jpg", sku1: 'INT', sku2: '' },
        { name: "Amigo sin limite", icon: "https://api3.criptopago.net/content/prod/141/5960/img/5960.jpg", sku1: 'PA', sku2: '' },
        { name: "Movistar", icon: "https://cdn2.downdetector.com/static/uploads/c/300/a2e0d/MovistarGreen_1.png", sku1: 'S3TAE', sku2: 'MOVIMXN' },
        { name: "AT&T", icon: "https://assets.weforum.org/organization/image/hRiZoy6qNMv7D-YblWFRXINkKb_3-9aj8xSMjID05kk.jpg", sku: '' },
        { name: "Unefon", icon: "https://images.seeklogo.com/logo-png/19/1/unefon-logo-png_seeklogo-196154.png", sku1: 'S3TAE', sku2: 'UNEFONMXN' },
        { name: "Bait", icon: "https://i.pinimg.com/474x/21/a7/ae/21a7ae2c609acfce2eb37c49a1454fe3.jpg", sku1: '', sku2: '' },

        { name: "ALO", icon: "https://tiendasneto.com.mx/media/wysiwyg/alo.png", sku1: 'S3TAER4', sku2: 'ALOTELCMXN' },
        { name: "Flash Mobile", icon: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT9QJV3Dy47hVerM4Jz0sW07iPRsfY2Cc-jhw&s", sku1: 'S3TAEFLASH', sku2: 'MXN' },
        { name: "IUSACELL", icon: "https://www.techgames.com.mx/wp-content/uploads/2015/01/Iusacell-ATT.jpg", sku1: 'S3TAE', sku2: 'IUSAMXN' },
        { name: "VIRGIN", icon: "https://play-lh.googleusercontent.com/oit0z38kXk-DDWY9SQtLZ_8z5CjtHAMCjfkDJNBCdaP5NrxGnmz7rTrwKDwaTabp-Q", sku1: 'S3TAE', sku2: 'VIRGINMXN' },
        { name: "Maz Tiempo", icon: "https://mobileecosystemforum.com/wp-content/uploads/2016/02/maz-tiempo-logo.png", sku1: 'S3TAE', sku2: 'MAZTIEMMXN' },
    ];

    /*
        { name: "FreedomPop", icon: "https://cdn.mos.cms.futurecdn.net/v2/t:0,l:150,cw:1200,ch:900,q:80,w:1200/rWUsCDev7eDWzCZzPFCw2b.jpg", sku1: '', sku2: '' },
        { name: "Diri", icon: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR49a8O6tby89KKg3A2fvlN-gbrAncjkUS59g&s", sku1: '', sku2: '' },
        { name: "Oui", icon: "https://play-lh.googleusercontent.com/40I0MAr1getFF-dLOzxekLi2_C3MC_u0HL2gmqNbXNWy32n9Bo3XIz2YYlAutfCT8aw", sku1: '', sku2: '' },
        { name: "Walmart Bodega Aurrera (Bait)", icon: "https://cdn.milenio.com/uploads/media/2020/06/17/walmart-lanza-bodega-aurrera-internet_0_2_702_436.jpg", sku1: '', sku2: '' },
        { name: "Her Mobile", icon: "https://roams.mx/images/post/es_MX_telco/companias-telefonicas-hermobile.svg", sku1: '', sku2: '' },
        { name: "Wibo", icon: "https://startupchile.org/content/uploads/2021/09/wibo.jpg", sku1: '', sku2: '' },
        { name: "Aldi", icon: "https://cdn.worldvectorlogo.com/logos/aldi-nord-logo.svg", sku1: '', sku2: '' },
        { name: "Weex", icon: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQo0GEq4ZMnw5UNhF9_QicOFpWzIkrq7Tyndg&s", sku1: '', sku2: '' },
        { name: "Netwey", icon: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQSxetOuvMWYzNFlyoIWIAlowmNtG_iD9gX-w&s", sku1: '', sku2: '' },
        { name: "Simplii", icon: "https://upload.wikimedia.org/wikipedia/commons/5/50/Simplii_Logo.png", sku1: '', sku2: '' }
    */

    const menuServicesPago = [
        { name: "CFE", icon: "https://play-lh.googleusercontent.com/7UppiZcZTNBInAJzU-XG8EpGeU3BlLVJM9LoJTaWiVamvguplwUFMNUg_92lk-0z4g", sku1: '', sku2: '', imgHelp: 'https://ws.prontipagos.mx/siveta-mgmt-web-1.0-SNAPSHOT/icons/guiacfevigente.png' },

        { name: "Telefonia Telmex", icon: "https://www.pandaancha.mx/plds/articulos/bf939f7800c0615f8a42e390482c969a439275547.png", sku1: 'S3TELEFOTELMEXMXN', sku2: '', imgHelp: 'https://ws.prontipagos.mx/siveta-mgmt-web-1.0-SNAPSHOT/icons/telmex_telefoniafija.jpg' },
        { name: "TeleCable", icon: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSH3lzgOSCvyMMYKFctqeEudmXLRdHD6gBVWA&s", sku1: 'S3TELECABLEMXN', sku2: '', imgHelp: '' },
        { name: "TELEFONIA AXTEL", icon: "https://comparaiso.mx/sites/comparaiso.mx/files/images/logos/axtel-200x300.png", sku1: 'S3AXTELMXN', sku2: '', imgHelp: 'https://ws.prontipagos.mx/siveta-mgmt-web-1.0-SNAPSHOT/icons/axtel_telefoniafija1.jpg' },
        { name: "TELEFONIA MAXCOM", icon: "https://i.blogs.es/1791f4/maxcom/650_1200.jpg", sku1: 'S3TELEMAXCOMMXN', sku2: '', imgHelp: 'https://ws.prontipagos.mx/siveta-mgmt-web-1.0-SNAPSHOT/icons/MAXCOM_telefoniafija.jpg' },
        { name: "TELEFONIA TELNOR (BC)", icon: "https://media.licdn.com/dms/image/v2/C560BAQHQWwaljuOq6w/company-logo_200_200/company-logo_200_200/0/1630607585360/telnor_logo?e=2147483647&v=beta&t=r5teaROdy0o78ZaojnuVx95k-BMIIx10B5Wic2wjgiQ", sku1: 'S3TELEFTELNORMXN', sku2: '', imgHelp: 'https://ws.prontipagos.mx/siveta-mgmt-web-1.0-SNAPSHOT/icons/telnor_telefoniafija.jpg' },

        { name: "IZZI", icon: "https://play-lh.googleusercontent.com/TvS7cnMS_Qda0d0DQ6IsoM3KEZTiNqF_AiWBuG5x8k_027IlkGLy2T0SR-PzUQQZGg=w240-h480-rw", sku1: 'S3IZIMXN', sku2: '', imgHelp: "https://ws.prontipagos.mx/siveta-mgmt-web-1.0-SNAPSHOT/icons/IZZI_televisiondepaga.jpg" },
        { name: "TOTAL PLAY", icon: "https://tiendasneto.com.mx/media/wysiwyg/TotalPlay.png", sku1: 'S3TOTALPLAYMXN', sku2: '', imgHelp: 'https://ws.prontipagos.mx/siveta-mgmt-web-1.0-SNAPSHOT/icons/TOTALPLAY_televisiondepaga.jpg' },
        { name: "Ve TV", icon: "https://queplan.mx/sites/default/files/inline-images/canales-vetv-hd1%20%281%29.png", sku1: 'S3TELEVETVMXN', sku2: '', imgHelp: 'https://ws.prontipagos.mx/siveta-mgmt-web-1.0-SNAPSHOT/icons/VETV_televisiondepagaB.jpg' },
        { name: "DISH", icon: "https://farmaciasroma.com/wp-content/uploads/2022/10/Pago-de-servicios-Dish-776x470.png", sku1: 'S3TELEVDISHMXN', sku2: '', imgHelp: 'https://ws.prontipagos.mx/siveta-mgmt-web-1.0-SNAPSHOT/icons/DISH_televisiondepaga.jpg' },
        { name: "SKY/Vtv", icon: "https://upload.wikimedia.org/wikipedia/commons/7/74/SKY_Basic_Logo.svg", sku1: 'S3TELESKYMXN', sku2: '', imgHelp: 'https://ws.prontipagos.mx/siveta-mgmt-web-1.0-SNAPSHOT/icons/SKY_televisiondepaga.jpg' },
        { name: "MEGACABLE", icon: "https://www.mtcenter.com.mx/wp-content/uploads/MEGACABLE.png", sku1: 'S3TELEMEGACABMXN', sku2: '', imgHelp: 'https://ws.prontipagos.mx/siveta-mgmt-web-1.0-SNAPSHOT/icons/MEGACABLE_televisiondepaga.jpg' },
        { name: "CABLEMAS", icon: "https://www.pandaancha.mx/plds/articulos/e853fc308798874fb175094ece8fd24a292941926.jpg", sku1: 'S3CABLEMASMXN', sku2: '', imgHelp: 'https://ws.prontipagos.mx/siveta-mgmt-web-1.0-SNAPSHOT/icons/CABLEMAS_televisindepaga.jpg' },
        { name: "cablevision", icon: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSDxHFEnf3mMrllF4QTlgDPvWP1XrE6PL5BnA&s", sku1: 'S3CABLEVISIONMXN', sku2: '', imgHelp: 'https://ws.prontipagos.mx/siveta-mgmt-web-1.0-SNAPSHOT/icons/CABLEVISION_televisiondepaga.jpg' },

        { name: "Telefonia NEXTEL", icon: "https://i.blogs.es/19aa83/nextel-mx/650_1200.jpg", sku1: 'S3NEXTELMXN', sku2: '', imgHelp: 'https://ws.prontipagos.mx/siveta-mgmt-web-1.0-SNAPSHOT/icons/ATTNEXTEL_pagodefactura.jpg' },
        { name: "Telefonia MOVISTAR", icon: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ-hEYmNGskAc-bkvHAF2vuIGwbl7Xyh4eSuA&s", sku1: 'S3MOVISTARTELMXN', sku2: '', imgHelp: 'https://ws.prontipagos.mx/siveta-mgmt-web-1.0-SNAPSHOT/icons/MOVISTAR_pagodefactura.jpg' },
        { name: "Telefonia IUSACELL", icon: "https://i.blogs.es/8e12c8/logo-iusacell-600x330/450_1000.jpeg", sku1: 'S3IUSACELLMXN', sku2: '', imgHelp: 'https://ws.prontipagos.mx/siveta-mgmt-web-1.0-SNAPSHOT/icons/iusacell_pagodefactura.jpg' },
    ];



    async function openPopServices() {
        document.getElementById('menu-services-popup-1').style.display = 'flex';
        document.getElementById('menu-services-popup-2').style.display = 'none';
    }

    function cerrarPopups() {
        document.getElementById('menu-services-popup-1').style.display = 'none';
        document.getElementById('menu-services-popup-2').style.display = 'none';
    }

    async function seleccionarOpcion(tipo) {
        await get_data_of_the_services();
        mostrarCategoria(tipo);
    }

    async function get_data_of_the_services() {
        //if not have the rechange of the user, we will get from our api
        if (myCreditForRechange == null) {
            const answerApi = await get_the_credit_of_the_server();
            myCreditForRechange = answerApi.credit;
        }

        document.getElementById('menu-services-popup-1').style.display = 'none';
        document.getElementById('menu-services-popup-2').style.display = 'flex';
    }

    function mostrarCategoria(tipo) {
        const contenedor = document.getElementById('menu-services-contenido-dinamico');
        contenedor.innerHTML = '';

        let servicios = tipo === 'recargas' ? menuServicesRecargas : menuServicesPago;

        const cardsHTML = servicios.map(serv => `
        <div class="menu-services-card" onclick="${tipo === 'recargas' ? `mostrarFormularioRecarga('${serv.name}','${serv.sku1}','${serv.sku2}')` : `show_buy_services('${serv.name}','${serv.sku1}','${serv.imgHelp}')`}">
          <img src="${serv.icon}" alt="${serv.name}">
          <p>${serv.name}</p>
        </div>
      `).join('');

        contenedor.innerHTML = `<h3>Selecciona un servicio</h3><div class="menu-services-cards-container">${cardsHTML}</div>`;
    }


    //---buy services-------//
    //this variable save all the input that the form need for buy this service
    const serviciosCampos = {
        "CFE": [
            { label: "Número de servicio", id: "number-service", type: "text", placeholder: "Ej. 123456789012" }
        ],
        "Telmex": [
            { label: "Número Telmex", id: "number-service", type: "text", placeholder: "Ej. 5544332211" }
        ],
        "Sky": [
            { label: "Número de cliente", id: "number-service", type: "text", placeholder: "Ej. 40123456789" }
        ],
        "Dish": [
            { label: "Número de contrato", id: "number-service", type: "text", placeholder: "Ej. 1234567890" }
        ],
        "Totalplay": [
            { label: "Número de cuenta", id: "number-service", type: "text", placeholder: "Ej. 123456789" }
        ],
        "Izzi": [
            { label: "Número de suscriptor", id: "number-service", type: "text", placeholder: "Ej. 123456789" }
        ],
        "Megacable": [
            { label: "Número de suscriptor", id: "number-service", type: "text", placeholder: "Ej. 123456789" }
        ],
        "VeTV": [
            { label: "Número de tarjeta VeTV", id: "number-service", type: "text", placeholder: "Ej. 40123456789" }
        ],
        "Agua y Drenaje": [
            { label: "Número de cuenta", id: "number-service", type: "text", placeholder: "Ej. 123456789" }
        ],
        "Infonavit": [
            { label: "Número de crédito", id: "number-service", type: "text", placeholder: "Ej. 1234567890", "sku": "S3CREDHIPOTECAMXN" }
        ],
        "SAT / Impuestos": [
            { label: "Línea de captura", id: "number-service", type: "text", placeholder: "Ej. 123456789012345678" }
        ],
        "Coppel Servicios": [
            { label: "Número de referencia", id: "number-service", type: "text", placeholder: "Ej. 123456789012345678" }
        ],
        "Telnor": [
            { label: "Número Telnor", id: "number-service", type: "text", placeholder: "Ej. 6641234567" }
        ]
    };

    async function show_buy_services(serviceName, sku, imgHelp) {
        dataSku1 = sku;
        dataSku2 = '';

        await get_data_of_the_services();

        const contenedor = document.getElementById('menu-services-contenido-dinamico');

        //get the camp of the services
        const campos = serviciosCampos[serviceName] || [{ label: "Número Referencia", id: "number-service", type: "text", placeholder: "Ej. 6641234567" }];

        //her we wil print the input that the form need
        const camposHTML = campos.map(campo => `
            <div>
                <label for="${campo.id}">${campo.label}</label>
                <input type="${campo.type}" id="${campo.id}" placeholder="${campo.placeholder}">
            </div>
        `).join('');

        //her we will print all the container of the form 
        contenedor.innerHTML = `
            <center><h6>Saldo disponible ${myCreditForRechange}$</h6></center>
            <h3>Pagar servicio de ${serviceName}</h3>
            <div class="row">
                <div class="col-8">
                    <div class="menu-services-formulario">

                    <div class="menu-services-recargas-rapidas">
                        ${[10, 20, 30, 50, 100].map(monto => `
                        <button onclick="document.getElementById('menu-services-recarga').value=${monto}">$${monto}</button>
                        `).join('')}
                    </div>

                    ${camposHTML}

                    <div>
                        <label for="menu-services-recarga">Monto</label>
                        <input type="number" id="menu-services-recarga" placeholder="Ej. 50">
                    </div>

                    <button class="menu-services-btn-comprar" onclick="showMoneyForRechangeAService('${serviceName}')">Pagar servicio</button>
                    </div>
                </div>
                <div class="col">
                    <center><img src="${imgHelp}" alt="${serviceName}" style="width: 100%; height: auto;"></center>
                </div>
            </div>

        `;
    }

    async function showMoneyForRechangeAService(companyRechange) {
        const numberService = document.getElementById('number-service').value;
        const amount = document.getElementById('menu-services-recarga').value;

        const contenedor = document.getElementById('menu-services-contenido-dinamico');
        contenedor.innerHTML = `
            <center><h6>Recarga para ${numberService}$</h6></center>
            <h3>Recarga ${amount}$</h3>
            <div class="menu-services-formulario">
                <div>
                    <label for="moneyReceived">Dinero Recibido *</label>
                    <input type="number" id="moneyReceived" placeholder="Ej. 50" oninput="calculate_change_for_services(${amount})">
                </div>
        
                <div>
                    <label for="moneyCommission">Comisión *</label>
                    <input type="number" id="moneyCommission" placeholder="Ej. 10" oninput="calculate_change_for_services(${amount})">
                </div>

                <div>
                    <label><strong>Cambio para el cliente:</strong> <span id="cambioCliente">0.00</span> $</label>
                </div>
        
                <button class="menu-services-btn-comprar" onclick="buy_services('${numberService}','${amount}','${companyRechange}')">Comprar recarga</button>
            </div>
        `;
    }

    async function buy_services(numberService, amount, serviceName) {
        amount = parseFloat(amount);
        let moneyReceived = parseFloat(document.getElementById('moneyReceived').value);
        let moneyCommission = parseFloat(document.getElementById('moneyCommission').value);
        moneyReceived = isNaN(moneyReceived) ? 0 : moneyReceived;
        moneyCommission = isNaN(moneyCommission) ? 0 : moneyCommission;

        const moneyEarning = moneyCommission + amount; //this is the money that earning for the buy
        const changeOFTheBuy = (moneyReceived - moneyEarning).toFixed(2); //this is the change of the buy

        //we will see if exist change. If not exist change, show a message of error
        if (changeOFTheBuy < 0) {
            errorMessage('¡Atención! ⚠️', 'Parece que el pago es insuficiente. Por favor ingresa un monto mayor.');
            return;
        }

        //now will send a message to our API in the web
        const skuServices = dataSku1; // si aplica
        const answerApi = await send_soliciutd_to_my_api(skuServices, numberService, amount, serviceName, moneyReceived, changeOFTheBuy);
        if (answerApi.code!==0 || Number(answerApi.code)!== 0) {
            //if when send the message to the api and an error occurred, show the mssage of the API 
            warningMessage('¡Atención! ⚠️', answerApi.message);
            return;
        }

        //if the service was success, show a message success and show the change of the customer
        cerrarPopups();
        confirmationMessage('¡Compra exitosa! 🎉', `El cambio total es de $${changeOFTheBuy}. ¡Gracias por tu compra!`);
        dataSku1 = '';
        dataSku2 = '';
    }


    //---change for cellphone---
    async function mostrarFormularioRecarga(company, sku1, sku2) {
        dataSku1 = sku1;
        dataSku2 = sku2;

        await get_data_of_the_services();

        companyRechange = company;
        const contenedor = document.getElementById('menu-services-contenido-dinamico');
        contenedor.innerHTML = `
        <center><h6>Saldo disponible ${myCreditForRechange}$</h6></center>
        <h3>Recarga para ${company}</h3>
        <div class="menu-services-formulario">
          <div class="menu-services-recargas-rapidas">
            ${[10, 20, 30, 50, 100].map(monto => `
              <button onclick="document.getElementById('menu-services-recarga').value=${monto}">$${monto}</button>
            `).join('')}
          </div>
  
          <div>
            <label for="menu-services-telefono">Número de teléfono *</label>
            <input type="tel" id="menu-services-telefono-1" placeholder="Ej. 5544332211">
          </div>
  
          <div>
            <label for="menu-services-telefono-2">Confirmar número de teléfono *</label>
            <input type="tel" id="menu-services-telefono-2" placeholder="Ej. 5544332211">
          </div>
  
          <div>
            <label for="menu-services-recarga">Monto</label>
            <input type="number" id="menu-services-recarga" placeholder="Ej. 50">
          </div>
  
          <button class="menu-services-btn-comprar" onclick="comprarRecarga('${company}')">Comprar recarga</button>
        </div>
      `;
    }

    function validarTelefono(tel) {
        // Expresión regular para validar números de celular en México (10 dígitos)
        const regex = /^(\+?52|52)?(1)?(\d{10})$/;

        return regex.test(tel); // Retorna true si el teléfono es válido, de lo contrario, false
    }

    async function showMoneyForRechange(tel, amount, companyRechange) {
        const contenedor = document.getElementById('menu-services-contenido-dinamico');
        contenedor.innerHTML = `
            <center><h6>Recarga para ${tel}$</h6></center>
            <h3>Recarga ${amount}$</h3>
            <div class="menu-services-formulario">
                <div>
                    <label for="moneyReceived">Dinero Recibido *</label>
                    <input type="number" id="moneyReceived" placeholder="Ej. 50" oninput="calculate_change_for_services(${amount})">
                </div>
        
                <div>
                    <label for="moneyCommission">Comisión *</label>
                    <input type="number" id="moneyCommission" placeholder="Ej. 10" oninput="calculate_change_for_services(${amount})">
                </div>

                <div>
                    <label><strong>Cambio para el cliente:</strong> <span id="cambioCliente">0.00</span> $</label>
                </div>
        
                <button class="menu-services-btn-comprar" onclick="buy_rechange('${tel}','${amount}','${companyRechange}')">Comprar recarga</button>
            </div>
        `;
    }

    function calculate_change_for_services(amountChange) {
        amountChange = parseFloat(amountChange) || 0;
        const received = parseFloat(document.getElementById('moneyReceived').value) || 0;
        const commission = parseFloat(document.getElementById('moneyCommission').value) || 0;


        const cambio = received - commission - amountChange;

        document.getElementById('cambioCliente').textContent = cambio.toFixed(2);
    }

    async function comprarRecarga(company) {
        const tel = document.getElementById('menu-services-telefono-1').value;
        const tel2 = document.getElementById('menu-services-telefono-2').value;
        const amount = document.getElementById('menu-services-recarga').value;

        //first we will see if the fields are empty
        if (!tel || !amount || !tel2) {
            warningMessage('¡Ey, esperaaa! 😅', 'Parece que olvidaste llenar todos los campos. ¡No te preocupes, solo falta un pasito más!');
            return;
        }

        //now we will see if the number is valid
        if (!validarTelefono(tel)) {
            warningMessage('¡Ey, esperaaa! 😅', 'Parece que el número de teléfono no es válido. Por favor verifica el número e intenta nuevamente.');
            return;
        }

        //now we will see if the number is equal
        if (tel !== tel2) {
            warningMessage('¡Ey, esperaaa! 😅', 'Los números de teléfono no coinciden. Por favor verifica e intenta nuevamente.');
            return;
        }

        //now show a new message pop for get the money and the change 
        showMoneyForRechange(tel, amount, company);
    }

    async function buy_rechange(tel, amount, companyRechange) {
        amount = parseFloat(amount);
        let moneyReceived = parseFloat(document.getElementById('moneyReceived').value);
        let moneyCommission = parseFloat(document.getElementById('moneyCommission').value);
        moneyReceived = isNaN(moneyReceived) ? 0 : moneyReceived;
        moneyCommission = isNaN(moneyCommission) ? 0 : moneyCommission;

        const moneyEarning = moneyCommission + amount; //this is the money that earning for the buy
        const changeOFTheBuy = (moneyReceived - moneyEarning).toFixed(2); //this is the change of the buy

        //we will see if exist change. If not exist change, show a message of error
        if (changeOFTheBuy < 0) {
            errorMessage('¡Atención! ⚠️', 'Parece que el pago es insuficiente. Por favor ingresa un monto mayor.');
            return;
        }

        //now will send a message to our API in the web
        const skuServices = dataSku1 + amount + dataSku2; // si aplica
        const answerApi = await send_soliciutd_to_my_api(skuServices, tel, amount, companyRechange, moneyReceived, changeOFTheBuy);
        if (answerApi.code!==0 || Number(answerApi.code)!== 0) {
            //if when send the message to the api and an error occurred, show the mssage of the API 
            warningMessage('¡Atención! ⚠️', answerApi.message);
            return;
        }

        //if the service was success, show a message success and show the change of the customer
        cerrarPopups();
        confirmationMessage('¡Compra exitosa! 🎉', `El cambio total es de $${changeOFTheBuy}. ¡Gracias por tu compra!`);
        dataSku1 = '';
        dataSku2 = '';
    }

    async function send_soliciutd_to_my_api(skuServices, cellphone, amount, company,moneyReceived, changeOFTheBuy) {
        const loadingOverlay = document.getElementById("loadingOverlay");
        loadingOverlay.style.display = "flex";
        try {
            //const token = await get_token_prontipagos(); 

            const response = await fetch('/links/send_information_to_prontipagos', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    sku: skuServices,
                    amount,
                    reference:cellphone,
                    company,
                    moneyReceived,
                    changeOFTheBuy
                })
            });

            const data = await response.json();
            return data;
        } catch (error) {
            console.error('Error:', error);
            return { status: false, message: error };
        } finally {
            loadingOverlay.style.display = "none";
        }
    }


    //----
    async function get_the_credit_of_the_server() {
        const loadingOverlay = document.getElementById("loadingOverlay");
        loadingOverlay.style.display = "flex";
        try {
            //get the infomration of the form
            const token = await get_token_prontipagos();
            //send a message to our api in the web for activate the token
            const response = await fetch(`${urlBase}/prontipagos-external-apiws/ws/protected/v1/balance/current`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Authorization': `Bearer ${token}`
                }
            });

            //get the anser of the server
            const data = await response.json();
            console.log(data)
            if (data.code !== 0) {
                return false;
            }

            const balance = data.payload[0].balance;
            return balance;
        } catch (error) {
            console.error('Error:', error);
            return false;
        } finally {
            // Hide loading overlay regardless of success or failure
            loadingOverlay.style.display = "none";
        }

        /*
        const loadingOverlay = document.getElementById("loadingOverlay");
        loadingOverlay.style.display = "flex";
        try {
            //get the infomration of the form
            const email = document.getElementById('email').value;

            //send a message to our api in the web for activate the token
            const response = await fetch("https://www.pluspuntodeventa.com/api/prontiPagos/get_my_credit.php", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ email:email})
            });

            //get the anser of the server
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('Error:', error);
            return false;
        }finally {
            // Hide loading overlay regardless of success or failure
            loadingOverlay.style.display = "none";
        }
        */
    }

    async function update_credit_for_my_rechange() {
        const answerApi = await get_the_credit_of_the_server();
        if (answerApi.success) {
            confirmationMessage('¡Yujuu! 🎉', answerApi.message);
        } else {
            errorMessage('¡Oops! 😵‍💫', answerApi.message);
        }

        myCreditForRechange = answerApi.credit;
    }

    async function get_only_my_credit() {
        try {
            //get the infomration of the form
            const token = await get_token_prontipagos();

            //send a message to our api in the web for activate the token
            const response = await fetch(`${urlBase}/prontipagos-external-apiws/ws/protected/v1/balance/current`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Authorization': `Bearer ${token}`
                }
            });

            //get the anser of the server
            const data = await response.json();
            if (data.code !== 0) {
                return false;
            }

            const balance = data.payload[0].balance;
            return balance;
        } catch (error) {
            console.error('Error:', error);
            return false;
        }
    }



    /*----------------------------*/
    async function get_token_prontipagos() {
        const username = document.getElementById('user_prontipagos').value;
        const password = await get_password_of_the_user_in_prontipagos();

        try {
            const response = await fetch(`${urlBase}/prontipagos-external-api-ws/ws/v1/auth/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ username, password })
            });

            const data = await response.json();

            if (data.code === 0 && data.payload?.accessToken) {
                return data.payload.accessToken;
            } else {
                throw new Error("Error al obtener el token: " + JSON.stringify(data));
            }
        } catch (error) {
            throw new Error("Fallo en la solicitud del token: " + error.message);
        }
    }

    async function get_menu_of_prontipagos(page = 0) {
        const resultado = document.getElementById('resultado');

        try {
            const token = await get_token_prontipagos();

            const response = await fetch(`${urlBase}/prontipagos-external-api-ws/ws/protected/v1/product/list?page=${page}&pageSize=100`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Authorization': `Bearer ${token}`
                }
            });

            const data = await response.json();
            const resultado = JSON.stringify(data, null, 2);
            console.log(resultado);

        } catch (error) {
            resultado.textContent = `❌ Error: ${error.message}`;
        }
    }

    /*----------------------------*/
    async function get_password_of_the_user_in_prontipagos() {
        const encryptedPassword = document.getElementById('password_prontipagos').value;
        const iv = document.getElementById('iv_for_password').value;

        if (!encryptedPassword || !iv) {
            console.error("Faltan datos para procesar la solicitud.");
            return;
        }

        try {
            const response = await fetch('/links/decryptPassword_of_prontipagos', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    encryptedData: encryptedPassword,
                    iv: iv
                })
            });

            const result = await response.json();

            if (result.success) {
                return result.password;
            } else {
                console.error("Error al desencriptar:", result.message);
            }

        } catch (error) {
            console.error("Error de red o servidor:", error);
        }
    }

</script>