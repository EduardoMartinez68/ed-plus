<!-- Popup para editar diferencia -->

<style>
    .pop-edit-cant-inventory-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        transition: opacity 0.3s ease;
    }

    .pop-edit-cant-inventory-hidden {
        opacity: 0;
        pointer-events: none;
    }

    .pop-edit-cant-inventory-content {
        background: white;
        padding: 30px 40px;
        border-radius: 16px;
        text-align: center;
        width: 90%;
        max-width: 600px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        animation: popScale 0.3s ease forwards;
    }

    @keyframes popScale {
        from {
            transform: scale(0.7);
            opacity: 0;
        }

        to {
            transform: scale(1);
            opacity: 1;
        }
    }

    .pop-edit-cant-inventory-content h3 {
        margin-bottom: 20px;
        font-size: 24px;
        color: var(--color-company);
    }

    .pop-edit-cant-inventory-controls {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 15px;
        margin-bottom: 25px;
    }

    .pop-edit-cant-inventory-controls input {
        width: 50%;
        text-align: center;
        padding: 8px;
        font-size: 20px;
        border: 2px solid var(--color-company);
        border-radius: 8px;
    }

    .pop-edit-cant-inventory-controls button {
        width: 25%;
        height: 45px;
        font-size: 26px;
        background: var(--color-company);
        color: white;
        border: none;
        cursor: pointer;
        transition: background 0.3s, transform 0.2s;
    }

    .pop-edit-cant-inventory-controls button:hover {
        background: var(--color-hover);
    }

    .pop-edit-cant-inventory-actions {
        display: flex;
        justify-content: center;
        gap: 20px;
    }

    .pop-edit-cant-inventory-save,
    .pop-edit-cant-inventory-cancel {
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        transition: background 0.3s;
    }

    .pop-edit-cant-inventory-save {
        background: var(--color-company);
        color: white;
    }

    .pop-edit-cant-inventory-save:hover {
        background: var(--color-hover);
    }

    .pop-edit-cant-inventory-cancel {
        background: #ccc;
        color: #333;
    }

    .pop-edit-cant-inventory-cancel:hover {
        background: #bbb;
    }
</style>

<!-- Popup para editar diferencia -->
<div id="pop-edit-cant-inventory-popup" class="pop-edit-cant-inventory-overlay pop-edit-cant-inventory-hidden">
    <div class="pop-edit-cant-inventory-content">
        <h3>Editar Diferencia</h3>
        <div class="pop-edit-cant-inventory-controls">
            <button onclick="popCambiarCantidad(-1)">-</button>
            <input type="number" id="pop-edit-cant-inventory-input" value="0">
            <button onclick="popCambiarCantidad(1)">+</button>
        </div>
        <div class="pop-edit-cant-inventory-actions">
            <button class="pop-edit-cant-inventory-save" onclick="popGuardarDiferencia()">Guardar</button>
            <button class="pop-edit-cant-inventory-cancel" onclick="popCerrar()">Cancelar</button>
        </div>
    </div>
</div>







<script>
    let popCeldaSeleccionada = null;

    function openPopEditQuantity(td, idProduct, max_inventary, minimum_inventory) {
        popCeldaSeleccionada = td;
        const valorActual = parseInt(td.innerText) || 0;

        const inputCantidad = document.getElementById('pop-edit-cant-inventory-input');
        inputCantidad.value = valorActual;

        // Establecer los valores m√°ximo y m√≠nimo como atributos num√©ricos
        inputCantidad.setAttribute('max', max_inventary);
        inputCantidad.setAttribute('min', minimum_inventory);
        document.getElementById('pop-edit-cant-inventory-popup').classList.remove('pop-edit-cant-inventory-hidden');
    }

    function popCerrar() {
        document.getElementById('pop-edit-cant-inventory-popup').classList.add('pop-edit-cant-inventory-hidden');
    }

    function popCambiarCantidad(valor) {

        const input = document.getElementById('pop-edit-cant-inventory-input');
        let nuevaCantidad = parseInt(input.value) + valor;

        // Actualizamos el valor en el input
        input.value = nuevaCantidad;
    }

    function popGuardarDiferencia(valor) {
        const selectedCheckboxes = document.querySelectorAll('.product-check:checked');
        if (selectedCheckboxes.length > 0) {
            popGuardarDiferenciaAll(selectedCheckboxes);
        } else {
            popGuardarDiferenciaOnlyOne();
        }
    }

    function popGuardarDiferenciaOnlyOne() {
        const input = document.getElementById('pop-edit-cant-inventory-input');
        const cantInput = parseInt(input.value);
        const min = parseInt(input.min); // Obtenemos el valor m√≠nimo
        const max = parseInt(input.max); // Obtenemos el valor m√°ximo

        let nuevaCantidad = cantInput;

        popCerrar(); //close pop


        if (popCeldaSeleccionada) {
            const cantidadActual = parseInt(popCeldaSeleccionada.innerText) || 0; // La diferencia actual
            const cantidadFinal = nuevaCantidad; // Nueva diferencia

            popCeldaSeleccionada.innerText = cantidadFinal; // Actualiza la diferencia

            const fila = popCeldaSeleccionada.parentElement; // <tr>

            // update the 'new existence'
            const tdExistencia = fila.querySelector('.existence');
            const tdnewExistence = fila.querySelector('.newExistence');
            const tdQuantity = fila.querySelector('.diferencia');

            if (tdExistencia) {
                const existenciaActual = parseInt(tdExistencia.textContent) || 0;


                let nuevaExistencia = existenciaActual + nuevaCantidad;
                nuevaCannuevaExistenciaidad = nuevaExistencia;

                //her we will see if the user would like to ignore the limits of the product
                const checkbox = document.getElementById('ignore-limit-toggle');
                if (!checkbox.checked) {
                    /*if the user not would like to ignore the limits of the product 
                    we will check if the new existence is less than the minimum or greater than the maximum*/

                    //if the new existence is less than the minimum or greater than the maximum
                    if (nuevaExistencia < min) {
                        //update the new existence to the minimum value
                        nuevaExistencia = min;
                        nuevaCantidad = nuevaExistencia - existenciaActual;
                        nuevaCannuevaExistenciaidad = existenciaActual + nuevaCantidad;
                        popCeldaSeleccionada.innerText = nuevaCantidad;
                        //show a message to the user
                        regularMessage('Ups! üòÖ', `La cantidad no puede ser menor que ${min}`);
                    }

                    // if the new existence is less than the minimum or greater than the maximum
                    if (nuevaExistencia > max) {
                        //update the new existence to the minimum value
                        nuevaCannuevaExistenciaidad = max;
                        nuevaCantidad = nuevaCannuevaExistenciaidad - existenciaActual;
                        popCeldaSeleccionada.innerText = nuevaExistencia - existenciaActual;
                        //show a message to the user
                        regularMessage('Ups! üòÖ', `La cantidad no puede ser mayor que ${max}`);
                    }
                }

                //update the data in the table
                tdQuantity.textContent = nuevaCantidad;
                tdnewExistence.textContent = nuevaCannuevaExistenciaidad; // aqu√≠ usamos textContent, no value

                // Disparar evento manual solo si quieres que algo escuche cambios en el DOM
                tdExistencia.dispatchEvent(new Event('change'));
            }




            // Actualizar el 'Importe'
            const celdaImporte = fila.querySelector('.importe');
            const celdaPrecio = fila.querySelector('td:nth-child(6)'); // 6ta columna es el precio $ (en tu estructura)

            if (celdaImporte && celdaPrecio) {
                // Sacamos el precio, quitamos el signo $ y parseamos
                const precioTexto = celdaPrecio.innerText.replace('$', '').trim();
                const precio = parseFloat(precioTexto) || 0;

                // Calculamos nuevo total
                const nuevoTotal = (parseFloat(nuevaCantidad) || 0) * precio;

                // Actualizamos el contenido
                celdaImporte.innerText = `$${nuevoTotal.toFixed(2)}`;
                celdaImporte.setAttribute('total', nuevoTotal); // actualizamos tambi√©n el atributo 'total' por si lo usas
            }

            // Pintar la fila
            pintarFila(fila, nuevaCantidad);
        }
    }


    function popGuardarDiferenciaAll(selectedCheckboxes) {
        const input = document.getElementById('pop-edit-cant-inventory-input');
        const cantInput = parseInt(input.value); // Nueva cantidad ingresada por el usuario
        let nuevaCantidad = cantInput;

        // Cerramos el pop-up
        popCerrar();

        // Verificamos si hay checkboxes seleccionados

        selectedCheckboxes.forEach(checkbox => {
            const fila = checkbox.closest('tr'); // <tr> que contiene el producto
            const idProduct = fila ? fila.getAttribute('idProduct') : null; // Obtenemos el id del producto de la fila
            if (idProduct) {
                // Extraemos los valores espec√≠ficos de cada producto desde los atributos de la fila
                const name = fila.getAttribute('name'); // M√≠nimo de inventario del producto
                const min = parseInt(fila.getAttribute('min_inventary')); // M√≠nimo de inventario del producto
                const max = parseInt(fila.getAttribute('max_inventary')); // M√°ximo de inventario del producto

                // Actualizamos la celda de la cantidad
                const tdExistencia = fila.querySelector('.existence');
                const tdnewExistence = fila.querySelector('.newExistence');
                const tdQuantity = fila.querySelector('.diferencia');

                if (tdExistencia) {
                    const existenciaActual = parseInt(tdExistencia.textContent) || 0;

                    let nuevaExistencia = existenciaActual + nuevaCantidad;

                    // Si el checkbox "Ignorar l√≠mites" no est√° marcado, validamos los l√≠mites
                    const checkbox = document.getElementById('ignore-limit-toggle');
                    if (!checkbox.checked) {
                        // Verificamos que la nueva existencia no sea menor que el m√≠nimo
                        if (nuevaExistencia < min) {
                            nuevaExistencia = min;
                            nuevaCantidad = nuevaExistencia - existenciaActual;
                            regularMessage('Ups! üòÖ', `La cantidad de ${name} no puede ser menor que ${min}`);
                        }

                        // Verificamos que la nueva existencia no sea mayor que el m√°ximo
                        if (nuevaExistencia > max) {
                            nuevaExistencia = max;
                            nuevaCantidad = nuevaExistencia - existenciaActual;
                            regularMessage('Ups! üòÖ', `La cantidad de ${name} no puede ser mayor que ${max}`);
                        }
                    }

                    // Actualizamos la cantidad y la existencia en la tabla
                    tdQuantity.textContent = nuevaCantidad;
                    tdnewExistence.textContent = nuevaExistencia; // Actualizamos la nueva existencia
                }

                // Actualizar el 'Importe'
                const celdaImporte = fila.querySelector('.importe');
                const celdaPrecio = fila.querySelector('td:nth-child(6)'); // 6ta columna es el precio $ (en tu estructura)

                if (celdaImporte && celdaPrecio) {
                    const precioTexto = celdaPrecio.innerText.replace('$', '').trim();
                    const precio = parseFloat(precioTexto) || 0;

                    const nuevoTotal = nuevaCantidad * precio;

                    celdaImporte.innerText = `$${nuevoTotal.toFixed(2)}`;
                    celdaImporte.setAttribute('total', nuevoTotal); // actualizamos el atributo 'total' por si lo usas
                }

                // Pintar la fila (si es necesario hacer alg√∫n cambio de estilo en la fila)
                pintarFila(fila, nuevaCantidad);
            }
        });
    }

    function pintarFila(fila, cantidad) {
        if (cantidad > 0) {
            fila.style.backgroundColor = "rgba(76, 175, 80, 0.1)"; // --color-company transparente
        } else if (cantidad < 0) {
            fila.style.backgroundColor = "rgba(255, 0, 0, 0.1)";
        } else {
            fila.style.backgroundColor = ""; // Sin color
        }
    }
</script>